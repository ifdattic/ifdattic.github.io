<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/tips/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-01-06T13:05:09+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iTerm Shortcut Keys]]></title>
    <link href="http://ifdattic.com/iterm-shortcut-keys"/>
    <updated>2015-11-04T17:26:09+02:00</updated>
    <id>http://ifdattic.com/iterm-shortcut-keys</id>
    <content type="html"><![CDATA[<p>If you use Mac OSX and do a lot of work in terminal the <a href="https://www.iterm2.com">iTerm</a> application will become your friend fast. It&rsquo;s a great terminal application and it would be hard to imagine my days without it.</p>

<p>Once you learn a few shortcut keys and develop your personal work flow you would hardly want to leave that black (differs) window.</p>

<p>Below is some of the shortcut keys I use.</p>

<h2>Working with multiple terminals</h2>

<p>It&rsquo;s rare occasion having only one terminal open as often I&rsquo;m working with multiple projects / tools at the same time. Sometimes even if I&rsquo;m not using something at the moment (or in the last few days / weeks) the terminal windows are left as is (often to avoid going to the needed directory). And sometimes you just need to try something fast and close it. Following shortcuts allow me to open new terminals, move between them, close once I&rsquo;m done with it.</p>

<blockquote><p>New Tab <code>⌘T</code></p>

<p>Previous Tab <code>⌘←</code></p>

<p>Next Tab <code>⌘→</code></p>

<p>Close tab <code>⌘w</code></p></blockquote>

<p>You could move the tabs around using the following shortcut keys, but I rarely use them.</p>

<blockquote><p>Move Tab Right <code>⇧⌘→</code></p>

<p>Move Tab Left <code>⇧⌘←</code></p></blockquote>

<h2>Working with multiple terminals in same tab</h2>

<p>Opening a new tab takes care of the most use cases, but sometimes there&rsquo;s a need to see multiple terminals at the same time. The splitting the tab shortcut keys are the lifesaver in those moments. You can go crazy with splitting the current tab (if you need to)!</p>

<blockquote><p>Split Vertically with Current Profile <code>⌘D</code></p>

<p>Split Horizontally with Current Profile <code>⇧⌘D</code></p></blockquote>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22596362330/in/dateposted-public/" title="iterm-split-windows-go-crazy"><img src="https://farm6.staticflickr.com/5658/22596362330_9a8d2fabed_c.jpg" width="733" height="800" alt="iterm-split-windows-go-crazy"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Your performance would suffer a lot if you had to use the mouse to use any of those terminals. For that problem the shortcut keys to move between the panes solve it.</p>

<blockquote><p>Next Pane <code>⌘]</code></p>

<p>Previous Pane <code>⌘[</code></p></blockquote>

<p>You can also move between panes directionally. Most of the time I can&rsquo;t remember the shortcut keys for it, previous/next pane works great, rarely have more than 2 panes at the time.</p>

<blockquote><p>Select Pane Above <code>⌥⌘↑</code></p>

<p>Select Pane Below <code>⌥⌘↓</code></p>

<p>Select Pane Left <code>⌥⌘←</code></p>

<p>Select Pane Right <code>⌥⌘→</code></p></blockquote>

<h2>Interacting with the terminal</h2>

<p>The following shortcut keys are not used that often (sometimes due to failing personal memory). They do come in handy from time to time when you need to do something with the output which is in terminal.</p>

<blockquote><p>Clear Buffer <code>⌘K</code></p>

<p>Scroll Up <code>⇧Page Up</code></p>

<p>Scroll Down <code>⇧Page Down</code></p>

<p>Find&hellip; <code>⌘F</code></p></blockquote>

<h2>Changing font size</h2>

<p>The iTerm on my machine is configured to my liking and works for almost all the use cases. For that reason it&rsquo;s rare to change the font size. If you&rsquo;re making a presentation, recording screen cast or your eyes are tired shortcut keys for changing font size solves that problem.</p>

<blockquote><p>Make Text Bigger <code>⌘+</code></p>

<p>Make Text Normal Size <code>⌘0</code></p>

<p>Make Text Smaller <code>⌘-</code></p></blockquote>

<h2>Custom shortcuts keys</h2>

<p>You can change global shortcut keys from profile preferences <code>Keys</code> tab. One shortcut key I find useful is deleting the last word. It uses the <code>⌘←Delete</code> as keyboard shortcut and sends the <code>0x1B 0x08</code> hex code (action).</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22841825873/in/dateposted-public/" title="iterm-custom-shortcut-key"><img src="https://farm1.staticflickr.com/597/22841825873_9521a2502d_c.jpg" width="800" height="464" alt="iterm-custom-shortcut-key"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Conclusion</h2>

<p>These are the shortcut keys I use daily with iTerm. Learning shortcut keys for any application can move you to a power user level and improve your productivity a lot. The problem is remembering all of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure phpspec for DDD]]></title>
    <link href="http://ifdattic.com/configure-phpspec-for-ddd"/>
    <updated>2015-06-24T08:16:35+03:00</updated>
    <id>http://ifdattic.com/configure-phpspec-for-ddd</id>
    <content type="html"><![CDATA[<p>A lot of my architecture for DDD is taken from <a href="http://programmingarehard.com/">David Adams</a>, <a href="http://verraes.net/">Mathias Verraes</a>, <a href="http://williamdurand.fr/">William Durand</a> &amp; other smart people.</p>

<p>While developing an application I try to keep the code separated. I also love testing and one wonderful tool which helps me produce good quality code is <a href="http://www.phpspec.net/">phpspec</a>. The issue is what by default it keeps all the tests in the root directory.</p>

<p>phpspec requires some configuration to keep the tests where they belong. You might notice that I&rsquo;m using Symfony framework for my application. When you do DDD development the framework used isn&rsquo;t that important. My domain login is kept in <code>src/Domain</code> directory &amp; infrastructure code is kept as bundles in <code>src</code> directory.</p>

<p>The following configuration is required to make phpspec work correctly (finding specs, creating/updating specs, running specs):</p>

<p>```yml
suites:</p>

<pre><code>core_suite:
    namespace: Domain\Core
    psr4_prefix: Domain\Core
    spec_path: src/Domain/Core
    src_path: src/Domain/Core
    spec_prefix: Spec

user_infrastructure_suite:
    namespace: UserBundle
    psr4_prefix: UserBundle
    spec_path: src/UserBundle
    src_path: src/UserBundle
    spec_prefix: Spec

user_suite:
    namespace: Domain\User
    psr4_prefix: Domain\User
    spec_path: src/Domain/User
    src_path: src/Domain/User
    spec_prefix: Spec
</code></pre>

<p>```</p>

<p>Save the file as <code>phpspec.yml</code> in root directory.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18485964273" title="Configure phpspec for DDD by Andrew Marcinkevičius, on Flickr"><img src="https://c4.staticflickr.com/4/3898/18485964273_ac0e4e5e5b_z.jpg" width="640" height="296" alt="Configure phpspec for DDD"></a></p>

<p>If you would run:</p>

<p><code>bash
phpspec describe Domain/User/ValueObject/UserName
</code></p>

<p>It should create a file <code>UserNameSpec.php</code> in <code>src/Domain/User/Spec/ValueObject</code>.</p>

<p>Some lines in suites might look like duplication, but I found that you have to set all the options. Otherwise there are issues with file creation/updating. You could skip <code>spec_prefix</code> option if you don&rsquo;t mind specifications directory in lowercase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T19:29:10+02:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/axt6O6myUvs?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<p><code>bash
docker pull mongo:latest
</code></p>

<p>And when launch your MongoDB container:</p>

<p><code>bash
docker run -v "$(pwd)":/data --name mongo -d mongo mongod --smallfiles
</code></p>

<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<p>```bash</p>

<h1>display only running containers</h1>

<p>docker ps</p>

<h1>or if you want all containers displayed</h1>

<p>docker ps -a
```</p>

<p>There are two options for connecting to your Mongo database.</p>

<p>```bash
docker run -it \</p>

<pre><code>--link mongo:mongo \
--rm mongo sh \
-c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'
</code></pre>

<h1>or on one line for easier copy-paste</h1>

<p>docker run -it &mdash;link mongo:mongo &mdash;rm mongo sh -c &lsquo;exec mongo &ldquo;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&rdquo;&rsquo;
```</p>

<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<p>```bash
docker exec -it 442c2541fe1a bash # by ID</p>

<h1>or</h1>

<p>docker exec -it mongo bash # by Name
```</p>

<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<p><code>bash
mongo
db.col.insert({"a": 4})
db.col.find().pretty()
</code></p>

<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<iframe width="732" height="412" src="https://www.youtube.com/embed/bZFXxhkrD44?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<p><code>bash
ls -la db
</code></p>

<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<p><code>bash
mongodump --db test --out /data/test-backup
</code></p>

<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<p><code>bash
mongorestore --db test-restored /data/test-backup/test
</code></p>

<h2>Node.js</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/0frJFB9toFQ?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<p><code>bash
docker pull node:latest
</code></p>

<p>To launch the NodeJS container run:</p>

<p><code>bash
docker run -it --rm node
</code></p>

<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<p><code>bash
console.log('It works!!')
</code></p>

<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<p><code>bash
docker run -it --name node -v "$(pwd)":/data --link mongo:mongo -w /data -p 8082:8082 node bash
</code></p>

<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<p>```bash</p>

<h1>execute commands in container</h1>

<p>cd hw3-2and3-3/blog
npm install
node app.js
```</p>

<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<p>```javascript
// Original connect
MongoClient.connect(&lsquo;mongodb://localhost:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using environment variables
MongoClient.connect(&lsquo;mongodb://&rsquo;+process.env.MONGO_PORT_27017_TCP_ADDR+&lsquo;:&rsquo;+process.env.MONGO_PORT_27017_TCP_PORT+&lsquo;/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using hosts entry
MongoClient.connect(&lsquo;mongodb://mongo:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});
```</p>

<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<p>```bash</p>

<h1>from host OS terminal</h1>

<p>docker run \</p>

<pre><code>--name nodeapp \
-v "$(pwd)":/data \
--link mongo:mongo \
-w /data/hw3-2and3-3/blog \
-p 8082:8082 \
-d node node app.js
</code></pre>

<h1>or on one line for easy copy-paste</h1>

<p>docker run &mdash;name nodeapp -v &ldquo;$(pwd)&rdquo;:/data &mdash;link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
```</p>

<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<p>```bash</p>

<h1>to see running containers</h1>

<p>docker ps</p>

<h1>to check output of container</h1>

<p>docker logs nodeapp</p>

<h1>to tail the output of container</h1>

<p>docker logs -f nodeapp</p>

<h1>to stop running container</h1>

<p>docker stop nodeapp
```</p>

<h2>MongoDB Course Manual Validation Tips</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/TwzNfD1L3vM?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<p><code>bash
node hw3-2validate.js --db mongodb://mongo:27017/blog
</code></p>

<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Events: Require Account Information After Registration]]></title>
    <link href="http://ifdattic.com/symfony-events-require-account-information-after-registration"/>
    <updated>2014-12-03T10:04:45+02:00</updated>
    <id>http://ifdattic.com/symfony-events-require-account-information-after-registration</id>
    <content type="html"><![CDATA[<p>The user visits your application, clicks &ldquo;Sign up with Twitter&rdquo;, authorizes the application and he&rsquo;s ready to use your application with his profile data already filled. Unfortunately in this case you won&rsquo;t have a users' email address as Twitter doesn&rsquo;t share it. Or what if you require something else that might not be provided by a different social network. In this case you might want to require your user to fill mandatory information before using the application. And in Symfony it&rsquo;s easy to do using events.</p>

<p><strong>Note:</strong> the tutorial assumes that your application is using <a href="https://github.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a> for user management.  If you want to add registration/login using social networks, I recommend using <a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> (not needed for this tutorial). Application assumes what when registering a user he is disabled and he is not enabled until he provides all the required information.</p>

<p>First initialize the <code>src/Ifdattic/UserBundle/EventListener/AccountInformationListener.php</code> (change namespaces as required) with following contents:</p>

<p>```php
&lt;?php</p>

<p>namespace Ifdattic\UserBundle\EventListener;</p>

<p>use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\FOSUserEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Event\FilterControllerEvent;</p>

<p>class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>/**
 * Route to redirect to
 *
 * @var string
 */
private $redirectRoute;

/**
 * @param string $redirectRoute Route to redirect to if conditions not met
 */
public function __construct($redirectRoute)
{
    $this-&gt;redirectRoute = $redirectRoute;
}

/**
 * {@inheritDoc}
 */
public static function getSubscribedEvents()
{
    return [
        'kernel.controller' =&gt; 'onKernelController',
        FOSUserEvents::PROFILE_EDIT_SUCCESS =&gt; 'onProfileEdit',
    ];
}
</code></pre>

<p>}
```</p>

<p>The listener is provided a route name when initializing it (via constructor argument) and it subscribes to two events: <code>kernel.controller</code> and <code>FOSUserEvents::PROFILE_EDIT_SUCCESS</code>.</p>

<p>Add the method which will be executed on <code>kernel.controller</code> event:</p>

<p>```php
class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>// ...

/**
 * If user is not enabled (haven't provided all information) make him to
 * finish it before using the application.
 *
 * @param  FilterControllerEvent $event
 * @return mixed
 */
public function onKernelController(FilterControllerEvent $event)
{
    if ($this-&gt;redirectRoute === $event-&gt;getRequest()-&gt;attributes-&gt;get('_route')) {
        return;
    }

    $controller = $event-&gt;getController();

    if (!is_array($controller) || !method_exists($controller[0], 'get')) {
        return;
    }

    $security = $controller[0]-&gt;get('security.context');

    if (!$security-&gt;isGranted('IS_AUTHENTICATED_REMEMBERED')) {
        return;
    }

    $user = $security-&gt;getToken()-&gt;getUser();

    if ($user-&gt;isEnabled()) {
        return;
    }

    $redirectUrl = $controller[0]-&gt;generateUrl($this-&gt;redirectRoute);
    $event-&gt;setController(function () use ($redirectUrl) {
        return new RedirectResponse($redirectUrl);
    });
}
</code></pre>

<p>}
```</p>

<p>The method first checks what redirect route and controller is provided. Then using <code>security.context</code> service make sure the user is authenticated before continuing. If user is authenticated, but he is not enabled a URL is generated and controller is replaced with an anonymous function which returns a redirect response.</p>

<p>Some might be wondering how much of an overhead this will add. Don&rsquo;t worry, it will probably won&rsquo;t even show on your profiler (if threshold is set to >0ms).</p>

<p>It should be possible to enable a user when he provides all the required information. Add a method to execute on profile edit:</p>

<p>```php
class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>// ...

/**
 * Enable user after he filled all the required account information.
 *
 * @param  FormEvent $event
 * @return void
 */
public function onProfileEdit(FormEvent $event)
{
    $user = $event-&gt;getForm()-&gt;getData();

    if (false === $user-&gt;isEnabled()) {
        $user-&gt;setEnabled(true);
    }
}
</code></pre>

<p>}
```</p>

<p>This will return a user after successful form submit (after validation, etc.) and enable him if he was not enabled before. This point is a great place to collect some metrics to help you track activated users, how long it takes to activate, etc. It can be done simply by sending another event (event dispatcher can be returned from current event using <code>getDispatcher()</code> method).</p>

<p>To enable the listener add it as a service (<code>src/Ifdattic/UserBundle/Resources/config/services.yml</code>):</p>

<p>```yaml
services:</p>

<pre><code>ifdattic_user.account_information.listener:
    class: Ifdattic\UserBundle\EventListener\AccountInformationListener
    arguments: ["fos_user_profile_edit"]
    tags:
        - { name: kernel.event_subscriber }
</code></pre>

<p>```</p>

<p>Now if you visited the application with a user which is not enabled, he should be redirected to a profile edit page. If a new field which is required for using the application is added, you could disable a user to make sure he provides that information before continuing. If you want to send a user to a different page (e.g., profile edit page has a lot of optional fields and you want to display only required fields) just change the first argument for the listener.</p>

<p>This is optional, but to help users understand the next step add some visuals.</p>

<p>```yaml</p>

<h1>in app/Resources/FOSUserBundle/translations/FOSUserBundle.en.yml</h1>

<p>profile:</p>

<pre><code>edit:
    message_for_disabled_user:
        header: Required account information
        message: Please provide the required information before using the application
</code></pre>

<p>```</p>

<p>
```jinja
{# in src/Ifdattic/UserBundle/Resources/views/Profile/_disabled_user_message.html.twig #}
{% trans_default_domain &lsquo;FOSUserBundle&rsquo; %}</p>

<p>{% if app.user.isEnabled == false %}</p>

<pre><code>&lt;div&gt;
    &lt;h3&gt;{{ 'profile.edit.message_for_disabled_user.header'|trans }}&lt;/h3&gt;
    &lt;p&gt;{{ 'profile.edit.message_for_disabled_user.message'|trans }}&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>{% endif %}
```
</p>

<p>
<code>jinja
{# in src/Ifdattic/UserBundle/Resources/views/Profile/edit_content.html.twig #}
{% include "IfdatticUserBundle:Profile:_disabled_user_message.html.twig" %}
</code>
</p>

<p>Requiring account information was very easy to implement with a simple listener and now it can be extended by adding more logic and actions to it.</p>

<p>Source files are available as a <a href="https://gist.github.com/ifdattic/21a0575dc4878633430e">gist</a>.</p>

<p>Do you have any suggestions, ideas, questions? Please share them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating DataDog &amp; logstash on AWS EC2]]></title>
    <link href="http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2"/>
    <updated>2014-11-26T15:36:49+02:00</updated>
    <id>http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2</id>
    <content type="html"><![CDATA[<p>If you have an application you should collect metrics and data about it to be able to improve your application. There is multiple solutions for collecting stats, but I chose <a href="http://www.datadoghq.com/">DataDog</a> for my application. Below you will find how to integrate DataDog agent on EC2 server using ElasticBeanstalk and how to send Apache logs to DataDog using logstash.</p>

<p><strong>Note:</strong> The tutorial assumes that you&rsquo;re <a href="/how-to-deploy-symfony-application-to-aws-elasticbeanstalk">deploying a Symfony application using AWS ElasticBeanstalk</a> (the link points to an article on how to do it). If you&rsquo;re deploying a different application or don&rsquo;t want to use EB, you will need to make some changes (which will be left as an exercise for the reader).</p>

<h2>Add DataDog Config</h2>

<p>To install and configure the DataDog agent create <code>.ebextensions/02-datadog.config</code> file with following contents:</p>

<p>```yaml
packages:</p>

<pre><code>yum:
    datadog-agent: []
rpm:
    datadog: http://yum.datadoghq.com/rpm/x86_64/datadog-agent-5.1.0-539.x86_64.rpm
</code></pre>

<p>container_commands:</p>

<pre><code>100-copy-config:
    command: "source .ebextensions/bin/copy-datadog-config.sh"
200-restart-agent:
    command: "/etc/init.d/datadog-agent restart"
    test: "[ $SYMFONY__ENV__DATADOG__API__KEY ]"
250-stop-agent:
    command: "/etc/init.d/datadog-agent stop"
    test: "[ ! $SYMFONY__ENV__DATADOG__API__KEY ]"
</code></pre>

<p>```</p>

<p>And <code>.ebextensions/bin/copy-datadog-config.sh</code> file:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>sed &rsquo;s/api_key:.*/api_key: &lsquo;&ldquo;$SYMFONY<strong>ENV</strong>DATADOG<strong>API</strong>KEY&rdquo;&rsquo;/&lsquo; /etc/dd-agent/datadog.conf.example > /etc/dd-agent/datadog.conf
```</p>

<p>If you will deploy an application with these configuration files, EB will install DataDog agent and run the configuration script to update the API key. The API key should be set as an environment variable for the hosts you want to measure. When if <code>SYMFONY__ENV__DATADOG__API__KEY</code> environment variable is set on the host it will restart the DataDog agent to reload the configuration and give a deployment event in DataDog application. If the environment variable is not set (for example you don&rsquo;t want to track a host anymore) it would stop the agent.</p>

<p>This is enough to start receiving some metrics about your hosts on DataDog application, but more can be done.</p>

<h2>Apache Rewrite For Symfony</h2>

<p>Apache has a <code>server-status</code> handler which provides some statistics about current server status. The Symfony application configuration blocks this route, add the following condition in your <code>.htaccess</code> or Apache configuration file (will depend on your project) before queries are rewritten to front controller:</p>

<p>```apache</p>

<h1>Allow internal requests</h1>

<p>RewriteCond %{REQUEST_URI} !^/internal/.+$
```</p>

<p>This will allow requests to <code>/internal</code> URLS (in case you need to add more locations reachable by URL).</p>

<h2>DataDog Apache Integration</h2>

<p>To send server statistics first create internal server status location in your Apache configuration:</p>

<p>```apache</p>

<h1>Enable server-status for internal IP</h1>

<p><Location /internal/server-status>
   SetHandler server-status
   Order Deny,Allow
   Deny from all
   Allow from 127.0.0.1
</Location>
```</p>

<p>This will allow to get server statistics locally (when connected to a host or from the host).</p>

<p>Next update <code>.ebextensions/02-datadog.config</code> file and add:</p>

<p>```yaml
files:</p>

<pre><code>/etc/dd-agent/conf.d/apache.yaml:
    mode: "000644"
    owner: dd-agent
    group: root
    content: |
        init_config:

        instances:
            -   apache_status_url: http://127.0.0.1/internal/server-status?auto
</code></pre>

<p>```</p>

<p>This will create Apache configuration file for DataDog agent pointing it to an URL where it can get server statistics. After deployment you should start receiving metrics about your current server status.</p>

<h2>Install &amp; logstash</h2>

<p><a href="http://logstash.net/">logstash</a> is a tool for managing events and logs.</p>

<p>To install logstash (optional: contrib plugin is installed only once, if you don&rsquo;t use it you can remove the <code>200-install-contrib-plugin</code> command) on deployment create <code>.ebextensions/02-logstash.config</code> file with following contents:</p>

<p>```yaml
files:</p>

<pre><code>/etc/yum.repos.d/logstash.repo:
    mode: "000644"
    owner: root
    group: root
    content: |
        [logstash-1.4]
        name=logstash repository for 1.4.x packages
        baseurl=http://packages.elasticsearch.org/logstash/1.4/centos
        gpgcheck=1
        gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch
        enabled=1
</code></pre>

<p>commands:</p>

<pre><code>100-install-logstash:
    command: "yum -y install logstash-1.4.2"
200-install-contrib-plugin:
    command: "wget -O /tmp/logstash-contrib-1.4.2.tar.gz http://download.elasticsearch.org/logstash/logstash/logstash-contrib-1.4.2.tar.gz &amp;&amp; tar zxf /tmp/logstash-contrib-1.4.2.tar.gz -C /opt/logstash --strip 1 &amp;&amp; touch /tmp/logstash-contrib-installed"
    test: "[ ! -f /tmp/logstash-contrib-installed ]"
</code></pre>

<p>```</p>

<h2>Parse Apache Logs</h2>

<p>To start parsing Apache logs the logstash first has to be configured. Add the contents bellow to <code>.ebextensions/02-logstash.config</code> file. You will notice what command <code>300-restart-service</code> is commented out, why will be explained shortly.</p>

<p>```yaml
container_commands:</p>

<pre><code>100-delete-configs:
    command: "rm -f /etc/logstash/conf.d/*"
200-copy-configs:
    command: "cp .ebextensions/logstash/* /etc/logstash/conf.d/"
# 300-restart-service:
#     command: "service logstash restart"
</code></pre>

<p>```</p>

<p>Add the following to Apache configuration to have more information in Apache logs:</p>

<p>```apache
<IfModule log_config_module></p>

<pre><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %D %T" combined
</code></pre>

<p></IfModule>
```</p>

<p>Create logstash configuration for parsing Apache logs in <code>.ebextensions/logstash/apache.conf</code>:</p>

<p>```
input {
  file {</p>

<pre><code>exclude =&gt; "*.gz"
path =&gt; "/var/log/httpd/*"
type =&gt; "apache-access"
</code></pre>

<p>  }
}</p>

<p>filter {
  grok {</p>

<pre><code>match =&gt; ["message", "%{COMBINEDAPACHELOG} %{NUMBER:microseconds} %{NUMBER:seconds}"]
</code></pre>

<p>  }
}</p>

<p>output {
  statsd {</p>

<pre><code>count =&gt; ["apache.count.bytes", "%{bytes}"]
increment =&gt; "apache.count.response.%{response}"
increment =&gt; "apache.count.request.%{request}"
timing =&gt; ["apache.timing.request.%{request}", "%{microseconds}"]
</code></pre>

<p>  }</p>

<p>  if [response] =~ /^2\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.2XX" }
</code></pre>

<p>  } else if [response] =~ /^3\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.3XX" }
</code></pre>

<p>  } else if [response] =~ /^4\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.4XX" }
</code></pre>

<p>  } else if [response] =~ /^5\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.5XX" }
</code></pre>

<p>  }
}
```</p>

<p>This will process apache logs and will send metrics using statsd output. Make changes to track what you need.</p>

<p><img class="<a" src="href="https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png">https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png</a>" title="&lsquo;&rsquo; &lsquo;Chart of HTTP status responses&rsquo;" ></p>

<p>As a use case one of tracked metrics with this configuration is HTTP status responses by type. You can create a graph helping you visualize for spikes of 4xx responses (e.g., a bug was introduced in latest deployment or hackers are scanning for vulnerabilities).</p>

<p>Unfortunately I wasn&rsquo;t able to make any of logstash service scripts to work (this is why restart command was commented out). With all the scripts the logstash service is started fine, but no metrics are being output. If you have any suggestions please share. For now I&rsquo;m using the following way to run logstash.</p>

<p>Create the <code>.ebextensions/01-pre.config</code> file with following contents:</p>

<p>```yaml
commands:</p>

<pre><code>100-create-posthook-dir:
    command: "mkdir /opt/elasticbeanstalk/hooks/appdeploy/post"
    test: "[ ! -d /opt/elasticbeanstalk/hooks/appdeploy/post ]"
</code></pre>

<p>container_commands:</p>

<pre><code>100-chmod-posthooks:
    command: "chmod +x .ebextensions/hooks/appdeploy/post/*"
200-copy-posthooks:
    command: "cp .ebextensions/hooks/appdeploy/post/* /opt/elasticbeanstalk/hooks/appdeploy/post/"
</code></pre>

<p>```</p>

<p>This will create a post hooks directory for ElasticBeanstalk and copy the post hooks to it. Create the <code>.ebextensions/hooks/appdeploy/post/logstash-background-job.sh</code> script which will start logstash after deployment:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>. /opt/elasticbeanstalk/support/envvars</p>

<p>for pid in <code>ps aux | grep /etc/logstash/conf.d | grep -v grep | tr -s ' ' | cut -d ' ' -f 2</code>
do</p>

<pre><code>disown $pid
kill -9 $pid
</code></pre>

<p>done</p>

<p>export HOME=/var/lib/logstash</p>

<p>/opt/logstash/bin/logstash \</p>

<pre><code>-f /etc/logstash/conf.d \
-l /var/log/logstash/logstash.log \
&gt; /var/log/logstash/logstash.stdout \
2&gt; /var/log/logstash/logstash.err \
&amp;
</code></pre>

<p>```</p>

<p>This script will first kill all the running logstash processes (you should have only one, otherwise your metrics would be sent multiple times) and then start a new logstash process. After deployment you should start receiving metrics from processed Apache logs.</p>

<h2>Conclusion</h2>

<p>You should be receiving a lot of different metrics in your DataDog account and it&rsquo;s easy to extend to receive even more. This will allow you to measure how your application is performing and make important business decisions.</p>

<p>All files can be found in the <a href="https://gist.github.com/ifdattic/61a5b2708dff8811e7e2">gist</a>, the first line displays the full path for it and should be removed from files.</p>

<p>What about you: are you tracking how your application is performing? Or maybe you have suggestions? Please share them in comments.</p>
]]></content>
  </entry>
  
</feed>
