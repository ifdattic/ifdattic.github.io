<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/tips/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-05-03T14:06:46+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keyboard Shortcuts I Found Useful While Recording a Video Course]]></title>
    <link href="http://ifdattic.com/useful-keyboard-shortcuts-recording-video-course"/>
    <updated>2016-05-03T11:51:43+03:00</updated>
    <id>http://ifdattic.com/keyboard-shortcuts-i-found-useful-while-recording-a-video-course</id>
    <content type="html"><![CDATA[<p>While recording a video course you constantly need to put your environment in the same state and you often repeat the same action. Having a few keyboard shortcuts up your sleeve can make your life a lot easier. Here is some keyboard shortcuts that I found useful while recording the <a href="https://www.packtpub.com/web-development/web-development-nodejs-and-mongodb-video">Web Development with Node.JS and MongoDB</a> video course.</p>

<p>Please keep in mind that my local environment is OSX, so shortcuts and applications are based for it. Not all shortcuts are set by default (for example I set them myself for Screenflow).</p>

<p>Skip to any of the sections or continue reading:</p>

<ul>
<li><a href="#full-screen">Full screen</a></li>
<li><a href="#screenshots">Screenshots</a></li>
<li><a href="#finder">Finder</a></li>
<li><a href="#chrome">Chrome</a></li>
<li><a href="#sublime-text">Sublime Text</a></li>
<li><a href="#iterm">iTerm</a></li>
<li><a href="#screenflow">Screenflow</a></li>
<li><a href="#resolution">Recording resolution</a></li>
<li><a href="#display-mirroring">Quick display mirroring</a></li>
</ul>


<p><a name="full-screen"></a></p>

<h2>Full screen</h2>

<p>Note that for most of applications <code>⌃⌘F</code> will put them in full screen mode.</p>

<p><a name="screenshots"></a></p>

<h2>Screenshots</h2>

<p>The <code>⇧⌘3</code> (<em>whole screen</em>) and <code>⇧⌘4</code> (<em>selected area</em>) was really helpful for taking screenshots. The screenshots were later used inside the scripts, slides, or videos. <strong>Use the mouse</strong> when taking area screenshots for the scripts. If you don&rsquo;t have one, spend a few bucks for a cheap one. It will be much faster and less painful.</p>

<p><a name="finder"></a></p>

<h2>Finder</h2>

<p>You will probably end managing a lot of files. Finder might not be the best application for managing files, but it&rsquo;s perfectly fine once I learned how to do <strong>copy/paste</strong>. This was a life saver and saved me from using the mouse for file manipulations.</p>

<p><code>⌘C</code> => Cut</p>

<p><code>⌥⌘V</code> => Paste</p>

<p>It&rsquo;s mostly fine to use the default Finder. Though, depending on your set up you might want to make a few changes.</p>

<p><code>⌥⌘P</code> => Hide path bar</p>

<p><code>⌥⌘S</code> => Hide sidebar</p>

<p><code>⌥⌘T</code> => Hide toolbar</p>

<p><a name="chrome"></a></p>

<h2>Chrome</h2>

<p>For my most day to day I use FireFox. Chrome is used for additional testing and video watching (plays most videos without needing Flash). I chose Chrome as my default browser for the course for a single reason. <em>FireFox doesn&rsquo;t have a shortcut to hide bookmarks toolbar</em>. Just didn&rsquo;t feel like constantly going through menus using a mouse to hide/show it.</p>

<p><code>⇧⌘B</code> => Hide bookmarks bar</p>

<p>While doing another video experiment started to notice how problematic bookmarks toolbar is on FireFox, but found one solution for easy hiding. By using <a href="http://www.packal.org/workflow/menu-bar-search">Menu Bar Search Workflow for Alfred</a>, it&rsquo;s possible to hide/show it using only the keyboard. Still not as easy as using a shortcut.</p>

<p><a name="sublime-text"></a></p>

<h2>Sublime Text</h2>

<p>If you do other work with the editor while recording, keeping the font size at <code>16px</code> is not the best choice (depends on preference / quality of eyes). You will want to constantly change the font size depending on the work you do.</p>

<p><code>⌘+</code> => Increase font size</p>

<p><code>⌘-</code> => Decrease font size</p>

<p><a name="iterm"></a></p>

<h2>iTerm</h2>

<p>For the course related terminal I had a new window that run a dedicated profile on a few tabs. That way they didn&rsquo;t get in the way, and didn&rsquo;t need any changes (like making font size bigger).</p>

<p>The iTerm has a different shortcut for a full screen (<code>⌘⏎</code>).</p>

<p>Sometimes something messed up and the terminal was not recorded. In that case turning full screen off and on fixed the problem. This mostly happened on the next day (after a lot of putting laptop to sleep and similar activities).</p>

<p>Another very useful shortcut was <code>⌃L</code> for clearing the terminal window. Unlike <code>⌘K</code> (clear buffer) shortcut, this command re-loads the prompt too.</p>

<p>If you want to learn more useful iTerm shortcuts read <a href="/iterm-shortcut-keys">iTerm Shortcut Keys</a> article.</p>

<p><a name="screenflow"></a></p>

<h2>Screenflow</h2>

<p>Screenflow is a great application for recording and editing your videos. It takes some time to get used to. After a while you make your own workflow and get good at it.</p>

<p><code>⌃⌥⌘R</code> => Record; for starting new a recording and stopping an existing one</p>

<p><code>⌃⌥⌘P</code> => Pause; for pausing a recording, didn&rsquo;t use often as most of recordings was done in short clips (also very long recording are harder to manage/edit)</p>

<p><code>⌃⌥⌘M</code> => Mark; for adding a marker on the recording. Useful for longer recordings. Comes in handy to mark the places you need to edit (like to cut out a part of it)</p>

<p><code>⌥⌘N</code> => Nest clips; would depend on your chosen workflow. As I chose to do everything in small clips (slides), each of them was made from multiple videos/images/audio, and then nested into a single clip for easier maintenance.</p>

<p><a name="resolution"></a></p>

<h2>Recording resolution</h2>

<p>When recording your videos you might want to set your screen resolution to <code>1280x720</code> or an equivalent of it (e.g., at <code>2560x1440</code> for retina display). That way you get a nice HD quality videos without any cropping or similar artifacts (an would guess that exporting is faster).</p>

<p>To change the resolution I used the <a href="https://github.com/ramiroaraujo/alfred-set-resolution-workflow">Set Resolution Workflow for Alfred</a>. Press <code>⌥SPACE</code> (my preference for opening Alfred), enter <code>setresolution</code> (using tab key autocomplete it after a few letters), enter <code>720</code>, and choose the resolution you want. After finishing switch back.</p>

<p><a name="display-mirroring"></a></p>

<h2>Quick display mirroring</h2>

<p>I use the external monitor in my daily life. Normally the laptop is in front (for keyboard and touchpad), with mirroring turned on, and laptop brightness all the way down (only single display used). For recording, having two displays is very useful. You can record on one and have all the notes on another.</p>

<p>Normally it would mean going to <code>System Preferences -&gt; Displays -&gt; Arrangement -&gt; Mirror Displays</code>. That takes a lot of time and a lot of mouse maneuvering.</p>

<p>Oh, how happy I was then I found you can do this with <code>⌘F1</code> (actually it&rsquo;s <code>⌘BrightnessDown</code>). This will turn display mirroring on and off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Video Course - Behind the Scenes]]></title>
    <link href="http://ifdattic.com/making-video-course-reflection"/>
    <updated>2016-04-12T12:53:48+03:00</updated>
    <id>http://ifdattic.com/making-a-video-course-behind-the-scenes</id>
    <content type="html"><![CDATA[<p>This post is my reflection on creating a video course. It contains personal thoughts, processes used &amp; possible improvements for them. This might be helpful if you&rsquo;re thinking about creating a video course and not sure that it might require or where to start. And if you want to learn how to convert your ideas to web applications you can check the <a href="https://www.packtpub.com/web-development/web-development-nodejs-and-mongodb-video">course</a> itself.</p>

<p>First when I got an offer to produce a video course my reaction was to do what I often do &ndash; run &amp; hide (something called impostor syndrome).</p>

<blockquote><p>Impostor syndrome is a term referring to high-achieving individuals marked by an inability to internalize their accomplishments and a persistent fear of being exposed as a &ldquo;fraud&rdquo;. Despite external evidence of their competence, those exhibiting the syndrome remain convinced that they are frauds and do not deserve the success they have achieved. Proof of success is dismissed as luck, timing, or as a result of deceiving others into thinking they are more intelligent and competent than they believe themselves to be.</p>

<p>Source: <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">Wikipedia</a></p></blockquote>

<p>Of course you start making excuses for it &mdash; I don&rsquo;t know enough, I don&rsquo;t have time, etc. &mdash; in the end they are still only excuses. No one ever did something great just by making excuses. By remembering a saying <em>&ldquo;Experts are experts because they started before they knew enough&rdquo;</em> &amp; confirming that it&rsquo;s something I can do (even if it will require banging the head against a wall once in a while).</p>

<p>So, what do you do when you have a project with the deadline &amp; have no idea how long it will take? You procrastinate of course! Like by making a calendar with inner deadlines, and then making a second version as you notice an issue. It&rsquo;s easy to avoid work when you don&rsquo;t know anything about it. The issue with that is that you took the challenge, and sooner or later it will start staring you in the eyes. The question is whose ass kicking will commence.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26115403990/in/dateposted-public/" title="01 - procrastinating, deadline calendar"><img src="https://farm2.staticflickr.com/1714/26115403990_b194e22121_c.jpg" width="672" height="800" alt="01 - procrastinating, deadline calendar"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p><strong>The secret is inertia</strong>. No matter how scary the task is you can endure it for half an hour. After half an hour you know more about it &amp; another half an hour doesn&rsquo;t sound so bad. In a few days you get a better idea of that it will require from you and you get high from being an ass kicker.</p>

<p>I always enjoyed learning something &amp; teaching it to others. The issue with that is that it requires a lot of reading and experimenting. Kept noticing myself falling in the trap of &ldquo;just one more page&rdquo;, which is bottomless. At some point you have to stomp down your foot &amp; say &ldquo;enough!&rdquo; It gets easier after a while as you start time-boxing it &amp; cutting down research (at least initial) to few hours.</p>

<p>After the research comes the writing. You stare at the cursor on the empty display &amp; have no idea what to write about. 500-700 words looks like Mount Everest as you stare at the excitedly blinking cursor at its starting position.</p>

<p>At this point you go back to inertia. Using the structure from a provided template you try to write down the problem, the solution, and three steps to move between them. This gives you a few anchor points &amp; keyboard starts getting some exercise. After a little bit you look at the word count &amp; swear. You went past 700 words, by a lot. And you still have a bunch to write about.</p>

<p>It might be fine in un-official atmosphere (especially with a drink in hand), but <strong>the secret is quality, not quantity</strong>. You just reached a point most creative people dread &ndash; killing your babies. You spent a lot of time &amp; energy making it, you can&rsquo;t just get rid of it. It would be wrong! Wrong, I say! This is where you have to <strong>punch your ego to the face</strong>. You have to understand that you are doing this to help others, not to make yourself feel better. As the ego runs away with the tail between its legs &amp; you start deleting words, the smile comes to your face as you notice that the message you are trying to convey is becoming easier to understand (and yes I noticed that this sentence goes on forever).</p>

<p>After a while <strong>you get better at writing</strong>. Most of the time you still start with a blinking cursor on an empty page, stumble around till you find the direction you want to go, and try to avoid ending in a ditch too often.</p>

<p>The challenge might have been a lot harder if I was at it alone (and quality wouldn&rsquo;t be as good). By getting support from other people (reviewers, editors, etc.), it&rsquo;s much easier to notice that can be improved or what to do next. The process wasn&rsquo;t always going smoothly as you would like. It doesn&rsquo;t help being an old grumpy man who runs on logic &amp; works in software development. It is only so many times you can fill same information in different format documents before you shout &ldquo;this needs to be an application!&rdquo; Some decisions logically didn&rsquo;t make sense to me. Like asking if I have no days off planned so we could finish the course sooner (answer No). Then after a week of silence (during which I couldn&rsquo;t continue without feedback on existing work) getting a reply about getting back from holidays. Even if multiple people work on the course the distance between them feels enormous. You get feedback on your work, but getting repeated feedback on some point (e.g., elaborating on the comment) feels like dredging through the pitch black silence. And like everywhere there&rsquo;s always some issues with payments. They were trivial, but still I find it strange, as in my opinion finances are the thing you take care right away so you could go back to doing the business which brings in the money.</p>

<p>In the beginning it took a while to get myself rolling. So that calendar with the deadlines came in handy. You could of course just mark the dates on digital calendar, but for me personally it doesn&rsquo;t work as well as taking a deliberate action and getting feedback (like crossing the date and seeing that tomorrow is the deadline). At points, I remembered the words from <em>The Shinning &ldquo;&hellip; All work and no play makes &mdash;&ndash; a dull boy &hellip;&rdquo;</em> My roommates probably wouldn&rsquo;t have liked that scenario. At other times it reminded me of school/college &ndash; doing some assignment for which I will be graded. Can&rsquo;t say I liked that feeling. Mostly, because I didn&rsquo;t like school/college as they interfered with me learning things.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26115405600/in/dateposted-public/" title="05 - being chased by the deadline"><img src="https://farm2.staticflickr.com/1692/26115405600_a0fd711a92_c.jpg" width="592" height="800" alt="05 - being chased by the deadline"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>I did start making great progress once I got myself rolling. Batching the tasks helped a lot. During writing I kept to focusing on a single topic at a time. Which sounds like a smart decision in theory, but didn&rsquo;t work well in practice. It might be hard to notice, but context switching does take its toll. Once I <strong>started taking hours/days for same tasks</strong> (research, writing, editing, recording, video editing) <strong>time savings became noticeable</strong>.</p>

<p>Trello was used for project management &amp; it worked well. This is kind of DIY project management. But that works well for one project might not be good for another one. All that you really need is to note some tasks, know in which state they are and keep some relevant info.</p>

<p>Doing a video in a single swoop isn&rsquo;t for me &amp; it often ends in a big mess. For that reason, I chose to split everything in smallest possible pieces &amp; then glue them together for the final result. It made batching tasks, recording &amp; editing a lot easier. Of course, the final result is not as natural, and sometimes can feel &ldquo;robotic.&rdquo; The process was kept simple &ndash; scripts in text files under version control, moved to word templates with screenshots, audio in many files, lots of screenshot images, single screenflow recording for each topic (if doing again would probably use many recordings).</p>

<p>One of big parts of making a video course is audio. With my current housing situation it wasn&rsquo;t easy to do. First, for good quality you need good set-up (good microphone, unobstructed lungs, good sound isolation, not being ill, etc.). It&rsquo;s not easy to keep up your cool when dogs start to bark and people start walking around just as soon as you start recording. Good thing that it was decided to add voice over &amp; my audio was only needed for reference, so quality wasn&rsquo;t as important. Another issue with audio recording is that English is not my native language, and I&rsquo;m not a big user of my voice. If it&rsquo;s one of the days where I don&rsquo;t feel like wasting my voice, I can easily spend whole day around people doing chores/errands without saying a single letter (sometimes for fun I just challenge myself with this to see how creative I will get). It was a good practice even if some days the tongue wasn&rsquo;t cooperating. An iodine spray (or something similar) helps a lot as your throat will hurt when recording for long periods. The sentences with a lot of &ldquo;s&rdquo; letters was fun as I started to sound like a snake :D</p>

<p>One thing worth deciding while/before writing scripts is how the commands will be spelled. It&rsquo;s not a problem with simple single word commands, but once they contain dashes/colons, or you start using flags/options, it can be very awkward to convert them to audio. I think, for the next time I will go with making them sound as human as possible (without dashes or anything fancy), and would mention them as little as possible. Maybe say it for the first time or explain a new option when it&rsquo;s used, but otherwise leave it to the video to show the command. Using &ldquo;execute the following command&rdquo; doesn&rsquo;t work as well as you would think &amp; in my opinion worth to avoid using. <strong>Avoid using exact numbers</strong> (like <code>13 ms</code> or version <code>3.3.10</code>). Might be fine in some cases, but you want to avoid running tests multiple times just to hit that 13 ms execution time which is used in the script &amp; audio. If you want to make it specific try to <em>use less / greater than with a good margin</em> (e.g., less than a second).</p>

<p>After learning that a voice over will be used felt hurt for a moment; starting to get angry macho voices inside. This is where you have to punch your ego in the face again. Once you do that you realize that this is being done to help as much people as possible, not for stroking your ego.</p>

<p>By this time had a script with screenshots, so recording was easier. You always have to <strong>remember to put everything in the recording state</strong> &ndash; set resolution to one which translates to <code>720p</code>, put everything in full-screen, hide that you don&rsquo;t need, etc. It&rsquo;s not fun to record for a while &amp; notice that something is not right. <strong>Make a checklist you go over before recording</strong>. <em>Two screens help</em> a lot as one contains the recording &amp; another the script. You go through each script step planning how the end result will look like &amp; then recording it. Still, can get frustrating when you mess something up or for example get &ldquo;connection lost&rdquo; in the middle of display as bluetooth mouse decided to save batteries. Then you have to go back to known state (which sometimes can be hard), and repeat again, and somehow mess up again. Took a lot of screenshots, before &amp; after each step. The pace of the video is dictated by the audio and you often need video to stay in place. It can be done by using freeze frames from a video, but found it a lot easier to use an image.</p>

<p>Google Drive was used for storing &amp; sharing the files. Found the whole experience terrible. It works well for storage, but just making the damn thing work takes forever. Never ending loading &amp; refreshes until it finally decides &ldquo;OK, now I will work, you can upload&rdquo; (sometimes taking up to half an hour). Lost any will to use Google Drive again.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26362331236/in/dateposted-public/" title="07 - editing videos"><img src="https://farm2.staticflickr.com/1704/26362331236_589d19162e_c.jpg" width="800" height="450" alt="07 - editing videos"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>The last part is editing, which by this time is easy as all the work was done before hand. So you wake up half past six in the morning, get a cup of tea with a butter, put on the headphones,and start editing. You throw in the audio, add the video accordingly &amp; make improvements often taking a gut guess. Two monitors are very helpful as you do editing on one &amp; script is on another. The only change I would probably do is to batch the export (like before going for lunch). Exporting takes a long time (at least couple minutes for 5 minute video). After the export you need to watch the video to make sure it&rsquo;s correct and make adjustments. By batching those tasks I could do the export while eating and watch them at the end of the day when already tired.</p>

<p>You could go on forever improving &amp; polishing everything, but in the end you have to remember to just fucking ship it.</p>

<p>So, would I do it again? I don&rsquo;t know. I&rsquo;m really glad I took this challenge. Learned a lot during those months &amp; it feels awesome being able to help others. But at least right away I don&rsquo;t feel like taking a similar challenge. It&rsquo;s the direction I wouldn&rsquo;t mind going, but first, should experiment with it in small scale to see exactly where to go.</p>

<p>I would like to thank the people who helped me on this journey. Especially Sigita Mikuckytė, who encouraged me to take this challenge by reminding me that I&rsquo;m trying to hide behind the impostor syndrome.</p>

<p>Have you ever created a similar product? What was your experience? Share it in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm Shortcut Keys]]></title>
    <link href="http://ifdattic.com/iterm-shortcut-keys"/>
    <updated>2015-11-04T17:26:09+02:00</updated>
    <id>http://ifdattic.com/iterm-shortcut-keys</id>
    <content type="html"><![CDATA[<p>If you use Mac OSX and do a lot of work in terminal the <a href="https://www.iterm2.com">iTerm</a> application will become your friend fast. It&rsquo;s a great terminal application and it would be hard to imagine my days without it.</p>

<p>Once you learn a few shortcut keys and develop your personal work flow you would hardly want to leave that black (differs) window.</p>

<p>Below is some of the shortcut keys I use.</p>

<h2>Working with multiple terminals</h2>

<p>It&rsquo;s rare occasion having only one terminal open as often I&rsquo;m working with multiple projects / tools at the same time. Sometimes even if I&rsquo;m not using something at the moment (or in the last few days / weeks) the terminal windows are left as is (often to avoid going to the needed directory). And sometimes you just need to try something fast and close it. Following shortcuts allow me to open new terminals, move between them, close once I&rsquo;m done with it.</p>

<blockquote><p>New Tab <code>⌘T</code></p>

<p>Previous Tab <code>⌘←</code></p>

<p>Next Tab <code>⌘→</code></p>

<p>Close tab <code>⌘w</code></p></blockquote>

<p>You could move the tabs around using the following shortcut keys, but I rarely use them.</p>

<blockquote><p>Move Tab Right <code>⇧⌘→</code></p>

<p>Move Tab Left <code>⇧⌘←</code></p></blockquote>

<h2>Working with multiple terminals in same tab</h2>

<p>Opening a new tab takes care of the most use cases, but sometimes there&rsquo;s a need to see multiple terminals at the same time. The splitting the tab shortcut keys are the lifesaver in those moments. You can go crazy with splitting the current tab (if you need to)!</p>

<blockquote><p>Split Vertically with Current Profile <code>⌘D</code></p>

<p>Split Horizontally with Current Profile <code>⇧⌘D</code></p></blockquote>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22596362330/in/dateposted-public/" title="iterm-split-windows-go-crazy"><img src="https://farm6.staticflickr.com/5658/22596362330_9a8d2fabed_c.jpg" width="733" height="800" alt="iterm-split-windows-go-crazy"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Your performance would suffer a lot if you had to use the mouse to use any of those terminals. For that problem the shortcut keys to move between the panes solve it.</p>

<blockquote><p>Next Pane <code>⌘]</code></p>

<p>Previous Pane <code>⌘[</code></p></blockquote>

<p>You can also move between panes directionally. Most of the time I can&rsquo;t remember the shortcut keys for it, previous/next pane works great, rarely have more than 2 panes at the time.</p>

<blockquote><p>Select Pane Above <code>⌥⌘↑</code></p>

<p>Select Pane Below <code>⌥⌘↓</code></p>

<p>Select Pane Left <code>⌥⌘←</code></p>

<p>Select Pane Right <code>⌥⌘→</code></p></blockquote>

<h2>Interacting with the terminal</h2>

<p>The following shortcut keys are not used that often (sometimes due to failing personal memory). They do come in handy from time to time when you need to do something with the output which is in terminal.</p>

<blockquote><p>Clear Window <code>⌃L</code></p>

<p>Clear Buffer <code>⌘K</code></p>

<p>Scroll Up <code>⇧Page Up</code></p>

<p>Scroll Down <code>⇧Page Down</code></p>

<p>Find&hellip; <code>⌘F</code></p></blockquote>

<h2>Changing font size</h2>

<p>The iTerm on my machine is configured to my liking and works for almost all the use cases. For that reason it&rsquo;s rare to change the font size. If you&rsquo;re making a presentation, recording screen cast or your eyes are tired shortcut keys for changing font size solves that problem.</p>

<blockquote><p>Make Text Bigger <code>⌘+</code></p>

<p>Make Text Normal Size <code>⌘0</code></p>

<p>Make Text Smaller <code>⌘-</code></p></blockquote>

<h2>Custom shortcuts keys</h2>

<p>You can change global shortcut keys from profile preferences <code>Keys</code> tab. One shortcut key I find useful is deleting the last word. It uses the <code>⌘←Delete</code> as keyboard shortcut and sends the <code>0x1B 0x08</code> hex code (action).</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22841825873/in/dateposted-public/" title="iterm-custom-shortcut-key"><img src="https://farm1.staticflickr.com/597/22841825873_9521a2502d_c.jpg" width="800" height="464" alt="iterm-custom-shortcut-key"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<blockquote><p>Go Left One Word <code>⌥←</code> (send escape sequence <code>b</code>)</p>

<p>Go Right One Word <code>⌥→</code> (send escape sequence <code>f</code>)</p></blockquote>

<h2>Conclusion</h2>

<p>These are the shortcut keys I use daily with iTerm. Learning shortcut keys for any application can move you to a power user level and improve your productivity a lot. The problem is remembering all of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure phpspec for DDD]]></title>
    <link href="http://ifdattic.com/configure-phpspec-for-ddd"/>
    <updated>2015-06-24T08:16:35+03:00</updated>
    <id>http://ifdattic.com/configure-phpspec-for-ddd</id>
    <content type="html"><![CDATA[<p>A lot of my architecture for DDD is taken from <a href="http://programmingarehard.com/">David Adams</a>, <a href="http://verraes.net/">Mathias Verraes</a>, <a href="http://williamdurand.fr/">William Durand</a> &amp; other smart people.</p>

<p>While developing an application I try to keep the code separated. I also love testing and one wonderful tool which helps me produce good quality code is <a href="http://www.phpspec.net/">phpspec</a>. The issue is what by default it keeps all the tests in the root directory.</p>

<p>phpspec requires some configuration to keep the tests where they belong. You might notice that I&rsquo;m using Symfony framework for my application. When you do DDD development the framework used isn&rsquo;t that important. My domain login is kept in <code>src/Domain</code> directory &amp; infrastructure code is kept as bundles in <code>src</code> directory.</p>

<p>The following configuration is required to make phpspec work correctly (finding specs, creating/updating specs, running specs):</p>

<p>```yml
suites:</p>

<pre><code>core_suite:
    namespace: Domain\Core
    psr4_prefix: Domain\Core
    spec_path: src/Domain/Core
    src_path: src/Domain/Core
    spec_prefix: Spec

user_infrastructure_suite:
    namespace: UserBundle
    psr4_prefix: UserBundle
    spec_path: src/UserBundle
    src_path: src/UserBundle
    spec_prefix: Spec

user_suite:
    namespace: Domain\User
    psr4_prefix: Domain\User
    spec_path: src/Domain/User
    src_path: src/Domain/User
    spec_prefix: Spec
</code></pre>

<p>```</p>

<p>Save the file as <code>phpspec.yml</code> in root directory.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18485964273" title="Configure phpspec for DDD by Andrew Marcinkevičius, on Flickr"><img src="https://c4.staticflickr.com/4/3898/18485964273_ac0e4e5e5b_z.jpg" width="640" height="296" alt="Configure phpspec for DDD"></a></p>

<p>If you would run:</p>

<p><code>bash
phpspec describe Domain/User/ValueObject/UserName
</code></p>

<p>It should create a file <code>UserNameSpec.php</code> in <code>src/Domain/User/Spec/ValueObject</code>.</p>

<p>Some lines in suites might look like duplication, but I found that you have to set all the options. Otherwise there are issues with file creation/updating. You could skip <code>spec_prefix</code> option if you don&rsquo;t mind specifications directory in lowercase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T19:29:10+02:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/axt6O6myUvs?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<p><code>bash
docker pull mongo:latest
</code></p>

<p>And when launch your MongoDB container:</p>

<p><code>bash
docker run -v "$(pwd)":/data --name mongo -d mongo mongod --smallfiles
</code></p>

<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<p>```bash</p>

<h1>display only running containers</h1>

<p>docker ps</p>

<h1>or if you want all containers displayed</h1>

<p>docker ps -a
```</p>

<p>There are two options for connecting to your Mongo database.</p>

<p>```bash
docker run -it \</p>

<pre><code>--link mongo:mongo \
--rm mongo sh \
-c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'
</code></pre>

<h1>or on one line for easier copy-paste</h1>

<p>docker run -it &mdash;link mongo:mongo &mdash;rm mongo sh -c &lsquo;exec mongo &ldquo;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&rdquo;&rsquo;
```</p>

<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<p>```bash
docker exec -it 442c2541fe1a bash # by ID</p>

<h1>or</h1>

<p>docker exec -it mongo bash # by Name
```</p>

<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<p><code>bash
mongo
db.col.insert({"a": 4})
db.col.find().pretty()
</code></p>

<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<iframe width="732" height="412" src="https://www.youtube.com/embed/bZFXxhkrD44?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<p><code>bash
ls -la db
</code></p>

<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<p><code>bash
mongodump --db test --out /data/test-backup
</code></p>

<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<p><code>bash
mongorestore --db test-restored /data/test-backup/test
</code></p>

<h2>Node.js</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/0frJFB9toFQ?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<p><code>bash
docker pull node:latest
</code></p>

<p>To launch the NodeJS container run:</p>

<p><code>bash
docker run -it --rm node
</code></p>

<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<p><code>bash
console.log('It works!!')
</code></p>

<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<p><code>bash
docker run -it --name node -v "$(pwd)":/data --link mongo:mongo -w /data -p 8082:8082 node bash
</code></p>

<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<p>```bash</p>

<h1>execute commands in container</h1>

<p>cd hw3-2and3-3/blog
npm install
node app.js
```</p>

<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<p>```javascript
// Original connect
MongoClient.connect(&lsquo;mongodb://localhost:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using environment variables
MongoClient.connect(&lsquo;mongodb://&rsquo;+process.env.MONGO_PORT_27017_TCP_ADDR+&lsquo;:&rsquo;+process.env.MONGO_PORT_27017_TCP_PORT+&lsquo;/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using hosts entry
MongoClient.connect(&lsquo;mongodb://mongo:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});
```</p>

<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<p>```bash</p>

<h1>from host OS terminal</h1>

<p>docker run \</p>

<pre><code>--name nodeapp \
-v "$(pwd)":/data \
--link mongo:mongo \
-w /data/hw3-2and3-3/blog \
-p 8082:8082 \
-d node node app.js
</code></pre>

<h1>or on one line for easy copy-paste</h1>

<p>docker run &mdash;name nodeapp -v &ldquo;$(pwd)&rdquo;:/data &mdash;link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
```</p>

<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<p>```bash</p>

<h1>to see running containers</h1>

<p>docker ps</p>

<h1>to check output of container</h1>

<p>docker logs nodeapp</p>

<h1>to tail the output of container</h1>

<p>docker logs -f nodeapp</p>

<h1>to stop running container</h1>

<p>docker stop nodeapp
```</p>

<h2>MongoDB Course Manual Validation Tips</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/TwzNfD1L3vM?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<p><code>bash
node hw3-2validate.js --db mongodb://mongo:27017/blog
</code></p>

<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>

<blockquote><p>If you liked this article and would like to learn more about developing web applications try out the <a href="https://www.packtpub.com/web-development/web-development-nodejs-and-mongodb-video">Web Development with Node.js and MongoDB</a> video course (created by me). In that course you will learn how to convert the ideas in your head to custom web applications. It covers the topics like preparing development environment, scaffolding a web application, storing data, working with RESTful APIs, testing your application and improving performance. <strong>Take the course and learn how to convert your ideas into web applications</strong>.</p></blockquote>
]]></content>
  </entry>
  
</feed>
