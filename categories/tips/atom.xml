<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/tips/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2015-04-24T14:47:45+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T19:29:10+02:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<p><code>bash
docker pull mongo:latest
</code></p>

<p>And when launch your MongoDB container:</p>

<p><code>bash
docker run -v "$(pwd)":/data --name mongo -d mongo mongod --smallfiles
</code></p>

<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<p>```bash</p>

<h1>display only running containers</h1>

<p>docker ps</p>

<h1>or if you want all containers displayed</h1>

<p>docker ps -a
```</p>

<p>There are two options for connecting to your Mongo database.</p>

<p>```bash
docker run -it \</p>

<pre><code>--link mongo:mongo \
--rm mongo sh \
-c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'
</code></pre>

<h1>or on one line for easier copy-paste</h1>

<p>docker run -it &mdash;link mongo:mongo &mdash;rm mongo sh -c &lsquo;exec mongo &ldquo;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&rdquo;&rsquo;
```</p>

<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<p>```bash
docker exec -it 442c2541fe1a bash # by ID</p>

<h1>or</h1>

<p>docker exec -it mongo bash # by Name
```</p>

<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<p><code>bash
mongo
db.col.insert({"a": 4})
db.col.find().pretty()
</code></p>

<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<p><code>bash
ls -la db
</code></p>

<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<p><code>bash
mongodump --db test --out /data/test-backup
</code></p>

<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<p><code>bash
mongorestore --db test-restored /data/test-backup/test
</code></p>

<h2>Node.js</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<p><code>bash
docker pull node:latest
</code></p>

<p>To launch the NodeJS container run:</p>

<p><code>bash
docker run -it --rm node
</code></p>

<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<p><code>bash
console.log('It works!!')
</code></p>

<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<p><code>bash
docker run -it --name node -v "$(pwd)":/data --link mongo:mongo -w /data -p 8082:8082 node bash
</code></p>

<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<p>```bash</p>

<h1>execute commands in container</h1>

<p>cd hw3-2and3-3/blog
npm install
node app.js
```</p>

<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<p>```javascript
// Original connect
MongoClient.connect(&lsquo;mongodb://localhost:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using environment variables
MongoClient.connect(&lsquo;mongodb://&rsquo;+process.env.MONGO_PORT_27017_TCP_ADDR+&lsquo;:&rsquo;+process.env.MONGO_PORT_27017_TCP_PORT+&lsquo;/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using hosts entry
MongoClient.connect(&lsquo;mongodb://mongo:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});
```</p>

<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<p>```bash</p>

<h1>from host OS terminal</h1>

<p>docker run \</p>

<pre><code>--name nodeapp \
-v "$(pwd)":/data \
--link mongo:mongo \
-w /data/hw3-2and3-3/blog \
-p 8082:8082 \
-d node node app.js
</code></pre>

<h1>or on one line for easy copy-paste</h1>

<p>docker run &mdash;name nodeapp -v &ldquo;$(pwd)&rdquo;:/data &mdash;link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
```</p>

<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<p>```bash</p>

<h1>to see running containers</h1>

<p>docker ps</p>

<h1>to check output of container</h1>

<p>docker logs nodeapp</p>

<h1>to tail the output of container</h1>

<p>docker logs -f nodeapp</p>

<h1>to stop running container</h1>

<p>docker stop nodeapp
```</p>

<h2>MongoDB Course Manual Validation Tips</h2>

<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<p><code>bash
node hw3-2validate.js --db mongodb://mongo:27017/blog
</code></p>

<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Events: Require Account Information After Registration]]></title>
    <link href="http://ifdattic.com/symfony-events-require-account-information-after-registration"/>
    <updated>2014-12-03T10:04:45+02:00</updated>
    <id>http://ifdattic.com/symfony-events-require-account-information-after-registration</id>
    <content type="html"><![CDATA[<p>The user visits your application, clicks &ldquo;Sign up with Twitter&rdquo;, authorizes the application and he&rsquo;s ready to use your application with his profile data already filled. Unfortunately in this case you won&rsquo;t have a users' email address as Twitter doesn&rsquo;t share it. Or what if you require something else that might not be provided by a different social network. In this case you might want to require your user to fill mandatory information before using the application. And in Symfony it&rsquo;s easy to do using events.</p>

<p><strong>Note:</strong> the tutorial assumes that your application is using <a href="https://github.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a> for user management.  If you want to add registration/login using social networks, I recommend using <a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> (not needed for this tutorial). Application assumes what when registering a user he is disabled and he is not enabled until he provides all the required information.</p>

<p>First initialize the <code>src/Ifdattic/UserBundle/EventListener/AccountInformationListener.php</code> (change namespaces as required) with following contents:</p>

<p>```php
&lt;?php</p>

<p>namespace Ifdattic\UserBundle\EventListener;</p>

<p>use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\FOSUserEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpKernel\Event\FilterControllerEvent;</p>

<p>class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>/**
 * Route to redirect to
 *
 * @var string
 */
private $redirectRoute;

/**
 * @param string $redirectRoute Route to redirect to if conditions not met
 */
public function __construct($redirectRoute)
{
    $this-&gt;redirectRoute = $redirectRoute;
}

/**
 * {@inheritDoc}
 */
public static function getSubscribedEvents()
{
    return [
        'kernel.controller' =&gt; 'onKernelController',
        FOSUserEvents::PROFILE_EDIT_SUCCESS =&gt; 'onProfileEdit',
    ];
}
</code></pre>

<p>}
```</p>

<p>The listener is provided a route name when initializing it (via constructor argument) and it subscribes to two events: <code>kernel.controller</code> and <code>FOSUserEvents::PROFILE_EDIT_SUCCESS</code>.</p>

<p>Add the method which will be executed on <code>kernel.controller</code> event:</p>

<p>```php
class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>// ...

/**
 * If user is not enabled (haven't provided all information) make him to
 * finish it before using the application.
 *
 * @param  FilterControllerEvent $event
 * @return mixed
 */
public function onKernelController(FilterControllerEvent $event)
{
    if ($this-&gt;redirectRoute === $event-&gt;getRequest()-&gt;attributes-&gt;get('_route')) {
        return;
    }

    $controller = $event-&gt;getController();

    if (!is_array($controller) || !method_exists($controller[0], 'get')) {
        return;
    }

    $security = $controller[0]-&gt;get('security.context');

    if (!$security-&gt;isGranted('IS_AUTHENTICATED_REMEMBERED')) {
        return;
    }

    $user = $security-&gt;getToken()-&gt;getUser();

    if ($user-&gt;isEnabled()) {
        return;
    }

    $redirectUrl = $controller[0]-&gt;generateUrl($this-&gt;redirectRoute);
    $event-&gt;setController(function () use ($redirectUrl) {
        return new RedirectResponse($redirectUrl);
    });
}
</code></pre>

<p>}
```</p>

<p>The method first checks what redirect route and controller is provided. Then using <code>security.context</code> service make sure the user is authenticated before continuing. If user is authenticated, but he is not enabled a URL is generated and controller is replaced with an anonymous function which returns a redirect response.</p>

<p>Some might be wondering how much of an overhead this will add. Don&rsquo;t worry, it will probably won&rsquo;t even show on your profiler (if threshold is set to >0ms).</p>

<p>It should be possible to enable a user when he provides all the required information. Add a method to execute on profile edit:</p>

<p>```php
class AccountInformationListener implements EventSubscriberInterface
{</p>

<pre><code>// ...

/**
 * Enable user after he filled all the required account information.
 *
 * @param  FormEvent $event
 * @return void
 */
public function onProfileEdit(FormEvent $event)
{
    $user = $event-&gt;getForm()-&gt;getData();

    if (false === $user-&gt;isEnabled()) {
        $user-&gt;setEnabled(true);
    }
}
</code></pre>

<p>}
```</p>

<p>This will return a user after successful form submit (after validation, etc.) and enable him if he was not enabled before. This point is a great place to collect some metrics to help you track activated users, how long it takes to activate, etc. It can be done simply by sending another event (event dispatcher can be returned from current event using <code>getDispatcher()</code> method).</p>

<p>To enable the listener add it as a service (<code>src/Ifdattic/UserBundle/Resources/config/services.yml</code>):</p>

<p>```yaml
services:</p>

<pre><code>ifdattic_user.account_information.listener:
    class: Ifdattic\UserBundle\EventListener\AccountInformationListener
    arguments: ["fos_user_profile_edit"]
    tags:
        - { name: kernel.event_subscriber }
</code></pre>

<p>```</p>

<p>Now if you visited the application with a user which is not enabled, he should be redirected to a profile edit page. If a new field which is required for using the application is added, you could disable a user to make sure he provides that information before continuing. If you want to send a user to a different page (e.g., profile edit page has a lot of optional fields and you want to display only required fields) just change the first argument for the listener.</p>

<p>This is optional, but to help users understand the next step add some visuals.</p>

<p>```yaml</p>

<h1>in app/Resources/FOSUserBundle/translations/FOSUserBundle.en.yml</h1>

<p>profile:</p>

<pre><code>edit:
    message_for_disabled_user:
        header: Required account information
        message: Please provide the required information before using the application
</code></pre>

<p>```</p>

<p>
```jinja
{# in src/Ifdattic/UserBundle/Resources/views/Profile/_disabled_user_message.html.twig #}
{% trans_default_domain &lsquo;FOSUserBundle&rsquo; %}</p>

<p>{% if app.user.isEnabled == false %}</p>

<pre><code>&lt;div&gt;
    &lt;h3&gt;{{ 'profile.edit.message_for_disabled_user.header'|trans }}&lt;/h3&gt;
    &lt;p&gt;{{ 'profile.edit.message_for_disabled_user.message'|trans }}&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>{% endif %}
```
</p>

<p>
<code>jinja
{# in src/Ifdattic/UserBundle/Resources/views/Profile/edit_content.html.twig #}
{% include "IfdatticUserBundle:Profile:_disabled_user_message.html.twig" %}
</code>
</p>

<p>Requiring account information was very easy to implement with a simple listener and now it can be extended by adding more logic and actions to it.</p>

<p>Source files are available as a <a href="https://gist.github.com/ifdattic/21a0575dc4878633430e">gist</a>.</p>

<p>Do you have any suggestions, ideas, questions? Please share them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating DataDog &amp; logstash on AWS EC2]]></title>
    <link href="http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2"/>
    <updated>2014-11-26T15:36:49+02:00</updated>
    <id>http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2</id>
    <content type="html"><![CDATA[<p>If you have an application you should collect metrics and data about it to be able to improve your application. There is multiple solutions for collecting stats, but I chose <a href="http://www.datadoghq.com/">DataDog</a> for my application. Below you will find how to integrate DataDog agent on EC2 server using ElasticBeanstalk and how to send Apache logs to DataDog using logstash.</p>

<p><strong>Note:</strong> The tutorial assumes that you&rsquo;re <a href="/how-to-deploy-symfony-application-to-aws-elasticbeanstalk">deploying a Symfony application using AWS ElasticBeanstalk</a> (the link points to an article on how to do it). If you&rsquo;re deploying a different application or don&rsquo;t want to use EB, you will need to make some changes (which will be left as an exercise for the reader).</p>

<h2>Add DataDog Config</h2>

<p>To install and configure the DataDog agent create <code>.ebextensions/02-datadog.config</code> file with following contents:</p>

<p>```yaml
packages:</p>

<pre><code>yum:
    datadog-agent: []
rpm:
    datadog: http://yum.datadoghq.com/rpm/x86_64/datadog-agent-5.1.0-539.x86_64.rpm
</code></pre>

<p>container_commands:</p>

<pre><code>100-copy-config:
    command: "source .ebextensions/bin/copy-datadog-config.sh"
200-restart-agent:
    command: "/etc/init.d/datadog-agent restart"
    test: "[ $SYMFONY__ENV__DATADOG__API__KEY ]"
250-stop-agent:
    command: "/etc/init.d/datadog-agent stop"
    test: "[ ! $SYMFONY__ENV__DATADOG__API__KEY ]"
</code></pre>

<p>```</p>

<p>And <code>.ebextensions/bin/copy-datadog-config.sh</code> file:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>sed &rsquo;s/api_key:.*/api_key: &lsquo;&ldquo;$SYMFONY<strong>ENV</strong>DATADOG<strong>API</strong>KEY&rdquo;&rsquo;/&lsquo; /etc/dd-agent/datadog.conf.example > /etc/dd-agent/datadog.conf
```</p>

<p>If you will deploy an application with these configuration files, EB will install DataDog agent and run the configuration script to update the API key. The API key should be set as an environment variable for the hosts you want to measure. When if <code>SYMFONY__ENV__DATADOG__API__KEY</code> environment variable is set on the host it will restart the DataDog agent to reload the configuration and give a deployment event in DataDog application. If the environment variable is not set (for example you don&rsquo;t want to track a host anymore) it would stop the agent.</p>

<p>This is enough to start receiving some metrics about your hosts on DataDog application, but more can be done.</p>

<h2>Apache Rewrite For Symfony</h2>

<p>Apache has a <code>server-status</code> handler which provides some statistics about current server status. The Symfony application configuration blocks this route, add the following condition in your <code>.htaccess</code> or Apache configuration file (will depend on your project) before queries are rewritten to front controller:</p>

<p>```apache</p>

<h1>Allow internal requests</h1>

<p>RewriteCond %{REQUEST_URI} !^/internal/.+$
```</p>

<p>This will allow requests to <code>/internal</code> URLS (in case you need to add more locations reachable by URL).</p>

<h2>DataDog Apache Integration</h2>

<p>To send server statistics first create internal server status location in your Apache configuration:</p>

<p>```apache</p>

<h1>Enable server-status for internal IP</h1>

<p><Location /internal/server-status>
   SetHandler server-status
   Order Deny,Allow
   Deny from all
   Allow from 127.0.0.1
</Location>
```</p>

<p>This will allow to get server statistics locally (when connected to a host or from the host).</p>

<p>Next update <code>.ebextensions/02-datadog.config</code> file and add:</p>

<p>```yaml
files:</p>

<pre><code>/etc/dd-agent/conf.d/apache.yaml:
    mode: "000644"
    owner: dd-agent
    group: root
    content: |
        init_config:

        instances:
            -   apache_status_url: http://127.0.0.1/internal/server-status?auto
</code></pre>

<p>```</p>

<p>This will create Apache configuration file for DataDog agent pointing it to an URL where it can get server statistics. After deployment you should start receiving metrics about your current server status.</p>

<h2>Install &amp; logstash</h2>

<p><a href="http://logstash.net/">logstash</a> is a tool for managing events and logs.</p>

<p>To install logstash (optional: contrib plugin is installed only once, if you don&rsquo;t use it you can remove the <code>200-install-contrib-plugin</code> command) on deployment create <code>.ebextensions/02-logstash.config</code> file with following contents:</p>

<p>```yaml
files:</p>

<pre><code>/etc/yum.repos.d/logstash.repo:
    mode: "000644"
    owner: root
    group: root
    content: |
        [logstash-1.4]
        name=logstash repository for 1.4.x packages
        baseurl=http://packages.elasticsearch.org/logstash/1.4/centos
        gpgcheck=1
        gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch
        enabled=1
</code></pre>

<p>commands:</p>

<pre><code>100-install-logstash:
    command: "yum -y install logstash-1.4.2"
200-install-contrib-plugin:
    command: "wget -O /tmp/logstash-contrib-1.4.2.tar.gz http://download.elasticsearch.org/logstash/logstash/logstash-contrib-1.4.2.tar.gz &amp;&amp; tar zxf /tmp/logstash-contrib-1.4.2.tar.gz -C /opt/logstash --strip 1 &amp;&amp; touch /tmp/logstash-contrib-installed"
    test: "[ ! -f /tmp/logstash-contrib-installed ]"
</code></pre>

<p>```</p>

<h2>Parse Apache Logs</h2>

<p>To start parsing Apache logs the logstash first has to be configured. Add the contents bellow to <code>.ebextensions/02-logstash.config</code> file. You will notice what command <code>300-restart-service</code> is commented out, why will be explained shortly.</p>

<p>```yaml
container_commands:</p>

<pre><code>100-delete-configs:
    command: "rm -f /etc/logstash/conf.d/*"
200-copy-configs:
    command: "cp .ebextensions/logstash/* /etc/logstash/conf.d/"
# 300-restart-service:
#     command: "service logstash restart"
</code></pre>

<p>```</p>

<p>Add the following to Apache configuration to have more information in Apache logs:</p>

<p>```apache
<IfModule log_config_module></p>

<pre><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\" %D %T" combined
</code></pre>

<p></IfModule>
```</p>

<p>Create logstash configuration for parsing Apache logs in <code>.ebextensions/logstash/apache.conf</code>:</p>

<p>```
input {
  file {</p>

<pre><code>exclude =&gt; "*.gz"
path =&gt; "/var/log/httpd/*"
type =&gt; "apache-access"
</code></pre>

<p>  }
}</p>

<p>filter {
  grok {</p>

<pre><code>match =&gt; ["message", "%{COMBINEDAPACHELOG} %{NUMBER:microseconds} %{NUMBER:seconds}"]
</code></pre>

<p>  }
}</p>

<p>output {
  statsd {</p>

<pre><code>count =&gt; ["apache.count.bytes", "%{bytes}"]
increment =&gt; "apache.count.response.%{response}"
increment =&gt; "apache.count.request.%{request}"
timing =&gt; ["apache.timing.request.%{request}", "%{microseconds}"]
</code></pre>

<p>  }</p>

<p>  if [response] =~ /^2\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.2XX" }
</code></pre>

<p>  } else if [response] =~ /^3\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.3XX" }
</code></pre>

<p>  } else if [response] =~ /^4\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.4XX" }
</code></pre>

<p>  } else if [response] =~ /^5\d\d/ {</p>

<pre><code>statsd { increment =&gt; "apache.count.response.5XX" }
</code></pre>

<p>  }
}
```</p>

<p>This will process apache logs and will send metrics using statsd output. Make changes to track what you need.</p>

<p><img class="<a" src="href="https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png">https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png</a>" title="&lsquo;&rsquo; &lsquo;Chart of HTTP status responses&rsquo;" ></p>

<p>As a use case one of tracked metrics with this configuration is HTTP status responses by type. You can create a graph helping you visualize for spikes of 4xx responses (e.g., a bug was introduced in latest deployment or hackers are scanning for vulnerabilities).</p>

<p>Unfortunately I wasn&rsquo;t able to make any of logstash service scripts to work (this is why restart command was commented out). With all the scripts the logstash service is started fine, but no metrics are being output. If you have any suggestions please share. For now I&rsquo;m using the following way to run logstash.</p>

<p>Create the <code>.ebextensions/01-pre.config</code> file with following contents:</p>

<p>```yaml
commands:</p>

<pre><code>100-create-posthook-dir:
    command: "mkdir /opt/elasticbeanstalk/hooks/appdeploy/post"
    test: "[ ! -d /opt/elasticbeanstalk/hooks/appdeploy/post ]"
</code></pre>

<p>container_commands:</p>

<pre><code>100-chmod-posthooks:
    command: "chmod +x .ebextensions/hooks/appdeploy/post/*"
200-copy-posthooks:
    command: "cp .ebextensions/hooks/appdeploy/post/* /opt/elasticbeanstalk/hooks/appdeploy/post/"
</code></pre>

<p>```</p>

<p>This will create a post hooks directory for ElasticBeanstalk and copy the post hooks to it. Create the <code>.ebextensions/hooks/appdeploy/post/logstash-background-job.sh</code> script which will start logstash after deployment:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>. /opt/elasticbeanstalk/support/envvars</p>

<p>for pid in <code>ps aux | grep /etc/logstash/conf.d | grep -v grep | tr -s ' ' | cut -d ' ' -f 2</code>
do</p>

<pre><code>disown $pid
kill -9 $pid
</code></pre>

<p>done</p>

<p>export HOME=/var/lib/logstash</p>

<p>/opt/logstash/bin/logstash \</p>

<pre><code>-f /etc/logstash/conf.d \
-l /var/log/logstash/logstash.log \
&gt; /var/log/logstash/logstash.stdout \
2&gt; /var/log/logstash/logstash.err \
&amp;
</code></pre>

<p>```</p>

<p>This script will first kill all the running logstash processes (you should have only one, otherwise your metrics would be sent multiple times) and then start a new logstash process. After deployment you should start receiving metrics from processed Apache logs.</p>

<h2>Conclusion</h2>

<p>You should be receiving a lot of different metrics in your DataDog account and it&rsquo;s easy to extend to receive even more. This will allow you to measure how your application is performing and make important business decisions.</p>

<p>All files can be found in the <a href="https://gist.github.com/ifdattic/61a5b2708dff8811e7e2">gist</a>, the first line displays the full path for it and should be removed from files.</p>

<p>What about you: are you tracking how your application is performing? Or maybe you have suggestions? Please share them in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Symfony Application to AWS ElasticBeanstalk]]></title>
    <link href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk"/>
    <updated>2014-09-19T09:03:02+03:00</updated>
    <id>http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk</id>
    <content type="html"><![CDATA[<p>I while ago I started working on an application so I could learn Symfony and solve a problem I had. After it reached a minimal state where it could be deployed to &ldquo;production&rdquo; environment I chose to push it to AWS ElasticBeanstalk as I&rsquo;m quite comfortable with using it. Unfortunately (or maybe fortunately as the best way to learn something is still through practice), I bumped into a few problems while deploying. The article is split into sections explaining what and why a piece of code is added. You might not need all of them or you might need some adjustments. For this article I will use the default Symfony application and full code can be found at <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">github</a>.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,top" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#update-20141003">Update on 2014-10-03</a></li>
<li><a href="#update-20141108">Update on 2014-11-08</a></li>
<li><a href="#update-20141207">Update on 2014-12-07</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#add-awsdevtools">Add AWSDevTools to Repository</a></li>
<li><a href="#create-key-pair">Create a Key Pair (optional)</a></li>
<li><a href="#create-eb-config">Create ElasticBeanstalk environment configuration/description</a></li>
<li><a href="#add-environment-variables">Add environment variables</a></li>
<li><a href="#add-vendors-dir">Add vendors Directory to Repository</a></li>
<li><a href="#add-environment-config">Add environment configuration and Update Composer</a></li>
<li><a href="#install-mongo-extension">Install mongo extension</a></li>
<li><a href="#run-composer-install">Run Composer Install</a></li>
<li><a href="#update-cache-files">Update Cache Files</a></li>
<li><a href="#add-apache-config">Add Apache Configuration (optional)</a></li>
<li><a href="#remove-dev-entry">Remove dev Entry Point (optional)</a></li>
<li><a href="#add-cron">Add Cron (optional)</a></li>
<li><a href="#add-new-relic-config">Add New Relic Configuration (optional)</a></li>
<li><a href="#install-nodejs">Install nodejs With Front-End Tools (2014-10-03)</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Update on 2014-10-03 <a name="update-20141003"></a></h2>

<p>Thanks to the <a href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk/#comment-1604895694">tip from Philipp Rieber</a> the code can be simplified by removing the environment in console applications. If your environment has <code>SYMFONY_ENV</code> and <code>SYMFONY_DEBUG</code> set, they will be automatically retrieved by console script. This will allow to remove <code>--env</code> and <code>--no-debug</code> from console commands. This will also allow you to leave scripts in <code>composer.json</code> as the correct environment will be chosen.</p>

<h2>Update on 2014-11-08 <a name="update-20141108"></a></h2>

<p>Thanks to the tip from Nicolae Darie the <code>update-cache.sh</code> script was improved to replace all occurrences of <code>ondeck</code> in <a href="#update-cache-files">cache files</a>.</p>

<h2>Update on 2014-12-07 <a name="update-20141207"></a></h2>

<p>Thanks to the tip from Sergio Marchesini the <a href="#update-cache-files">Update Cache Files</a> section is not needed anymore if you&rsquo;re using at least Symfony 2.6.1.</p>

<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>The article assumes you already have the <a href="http://aws.amazon.com">AWS account</a>, <a href="http://aws.amazon.com/cli">AWS CLI</a> configured and a project in <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">git repository</a> ready to be deployed. The application will be deployed to <code>us-east-1</code> region, so make changes accordingly if you want to deploy to a different region.</p>

<p>For deployment we will use the <code>t2.micro</code> instance type, which is a new free tier eligible instance type. This updated instance type can only be launched in VPC so you might need to create it for your account, it can be done using a <a href="https://console.aws.amazon.com/vpc/home">wizard</a>.</p>

<p>If you will be creating a single instance ElasticBeanstalk application you only need <em>&ldquo;VPC with a Single Public Subnet.&rdquo;</em> If you want to create a load balanced application you will need <em>&ldquo;VPC with Public and Private Subnets.&rdquo;</em> Just note what VPC with public and private subnets requires a NAT instance which will add additional charges. You can learn more about creating VPC at <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS Docs</a>.</p>

<p>You will also need to create the IAM role to be used for ElasticBeanstalk deployments.</p>

<p>Some of the steps can be done using the web GUI or different applications, but for the most part I will be using the terminal on OS X.</p>

<p>Check <strong><a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/tree/master/.ebextensions/misc">.ebextensions/misc/aws-cli-commands-used.md</a></strong> from demo application for more information (commands used).</p>

<h2>Add AWSDevTools to Repository <a name="add-awsdevtools"></a></h2>

<p>To be able to push your repository to the ElasticBeanstalk the repository has to be extended with <a href="http://aws.amazon.com/code/6752709412171743">AWSDevTools</a>. Download, extract and go to correct directory depending on your OS (for Linux and Mac it will be <code>AWSDevTools/Linux</code>). You need to run the <code>AWSDevTools-RepositorySetup.sh</code> from the directory which contains your repository.</p>

<p>If everything was done correctly you should get a few new commands under <code>git aws.</code> namespace. Now run the <code>git aws.config</code> command to initialize configuration required for pushing repository to ElasticBeanstalk (comments after <code>#</code>, don&rsquo;t enter them).</p>

<p><code>bash
AWS Region [default to us-east-1]: # enter your region
AWS Elastic Beanstalk Application: demo-app # enter your application name
AWS Elastic Beanstalk Environment: demo-prod-env # enter your environment name
</code></p>

<p>The command should output some explanations about how to set the AWS credentials. As I work with multiple AWS accounts I personally set the credentials in the project. The command created a <code>.elasticbeanstalk</code> directory which you should avoid adding to source control (especially if it contains credentials). The directory should have <code>config</code> and <code>aws_credential_file</code> files with contents (including a manual change for credentials):</p>

<p>```ini</p>

<h1>below is contents of .elasticbeanstalk/config</h1>

<p>[global]
ApplicationName=demo-app
DevToolsEndpoint=git.elasticbeanstalk.us-east-1.amazonaws.com
EnvironmentName=demo-prod-env
Region=us-east-1
AwsCredentialFile=.elasticbeanstalk/aws_credential_file</p>

<h1>below is contents of .elasticbeanstalk/aws_credential_file</h1>

<p>AWSAccessKeyId=your-access-key
AWSSecretKey=your-secret-key
```</p>

<p><strong>Bonus tip:</strong> One of <a href="http://youtu.be/tTJrbsu_Wzc">best IAM practices</a> is to allow users only what they need. I use the separate group and user for pushing repository to ElasticBeanstalk. Bellow is the policy you can attach to your group/user to allow only what is needed for deploying an application (modify for your own needs):</p>

<p>```json
{
  &ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
  &ldquo;Statement&rdquo;: [</p>

<pre><code>{
  "Effect": "Allow",
  "Action": [
    "elasticbeanstalk:*",
    "ec2:*",
    "elasticloadbalancing:*",
    "autoscaling:*",
    "cloudwatch:*",
    "s3:*",
    "sns:*",
    "cloudformation:*",
    "rds:*"
  ],
  "Resource": "*"
}
</code></pre>

<p>  ]
}
```</p>

<h2>Create a Key Pair (optional) <a name="create-key-pair"></a></h2>

<p>If you want to connect to your instances (e.g., to debug) you will need a key pair. You should avoid making any changes to your instances as it won&rsquo;t persist and can bring your instance to unknown state.</p>

<p>You can create a key pair by running:</p>

<p><code>bash
aws ec2 create-key-pair --key-name demoapp_prodkey &gt; demoapp_prodkey.pem
</code></p>

<p>After the command completes open the file, delete everything that is not inside <code>KeyMaterial</code> value and replace <code>\n</code> with newlines.</p>

<p>Before you start using the key pair you need to change the permissions which can be done with command:</p>

<p><code>bash
chmod 400 demoapp_prodkey.pem
</code></p>

<p>To connect to your instance you will need to know the IP address of it. So for example if it was <code>54.88.29.72</code> you could SSH to it with the following command (to connect to Amazon Linux instances the user is <code>ec2-user</code>):</p>

<p><code>bash
ssh -i demoapp_prodkey.pem ec2-user@54.88.29.72
</code></p>

<h2>Create ElasticBeanstalk environment configuration/description <a name="create-eb-config"></a></h2>

<p>To always get the ElasticBeanstalk environment in the same state all the required information should be saved inside configuration files.</p>

<p>Create a file <code>.ebextensions/env/prod-single.json</code> with the following contents:</p>

<p>```json
[</p>

<pre><code>{
    "Namespace": "aws:elasticbeanstalk:environment",
    "OptionName": "EnvironmentType",
    "Value": "SingleInstance"
},
{
    "Namespace": "aws:autoscaling:launchconfiguration",
    "OptionName": "EC2KeyName",
    "Value": "demoapp_prodkey"
},
{
    "Namespace": "aws:autoscaling:launchconfiguration",
    "OptionName": "IamInstanceProfile",
    "Value": "aws-elasticbeanstalk-ec2-role"
},
{
    "Namespace": "aws:autoscaling:launchconfiguration",
    "OptionName": "InstanceType",
    "Value": "t2.micro"
},
{
    "Namespace": "aws:ec2:vpc",
    "OptionName": "VPCId",
    "Value": ""
},
{
    "Namespace": "aws:ec2:vpc",
    "OptionName": "Subnets",
    "Value": ""
},
{
    "Namespace": "aws:ec2:vpc",
    "OptionName": "ELBSubnets",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:container:php:phpini",
    "OptionName": "memory_limit",
    "Value": "800M"
},
{
    "Namespace": "aws:elasticbeanstalk:container:php:phpini",
    "OptionName": "document_root",
    "Value": "/web"
},
{
    "Namespace": "aws:elasticbeanstalk:hostmanager",
    "OptionName": "LogPublicationControl",
    "Value": "true"
}
</code></pre>

<p>]
```</p>

<p>This configuration will create a single instance environment. For all available options and their explanations check the <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">docs</a>. If you would like to create a load balanced environment you will need to make some changes to the configuration file (you can find it all at <code>.ebextensions/env/prod-load.json</code>). In short, you should remove <code>EnvironmentType</code> option (or change to <code>LoadBalanced</code>) and add the options provided below (just know what you will need a VPC with private and public subnets if you want to use new instance types):</p>

<p>```json
[</p>

<pre><code>{
    "Namespace": "aws:autoscaling:asg",
    "OptionName": "MinSize",
    "Value": "1"
},
{
    "Namespace": "aws:autoscaling:asg",
    "OptionName": "MaxSize",
    "Value": "4"
},
{
    "Namespace": "aws:autoscaling:launchconfiguration",
    "OptionName": "SecurityGroups",
    "Value": ""
}
</code></pre>

<p>]
```</p>

<p>You will also need to fill values (will depend on application type, read <strong><a href="#prerequisites">Prerequisites</a></strong> and <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS VPC How To</a>) for <code>VPCId</code>, <code>Subnets</code>, <code>ELBSubnets</code>, <code>SecurityGroups</code> from your created VPC.</p>

<p>Run the following command to create your <code>demo-app</code> ElasticBeanstalk application (change the name or provide description if needed):</p>

<p><code>bash
aws elasticbeanstalk create-application --application-name demo-app --description ""
</code></p>

<p>Now you only need to choose the the solution stack name. All available stacks can be returned with command (we will choose the latest as of this writing 64 bit stack named <code>64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5</code>):</p>

<p><code>bash
aws elasticbeanstalk list-available-solution-stacks
</code></p>

<p>Run the command below to create the ElasticBeanstalk environment (configure the arguments if needed):</p>

<p>```bash
aws elasticbeanstalk create-environment \</p>

<pre><code>--application-name demo-app \
--environment-name demo-prod-env \
--description "" \
--option-settings file://.ebextensions/env/prod-single.json \
--solution-stack-name "64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5"
</code></pre>

<p>```</p>

<p>After a while if everything was fine the new environment for application should be up and ready.</p>

<h2>Add environment variables <a name="add-environment-variables"></a></h2>

<p>Keeping credentials and other information (API keys, passwords, connection data, etc.) in source control is a bad idea and not really scalable. Your environment should contain all the information needed to make the application on it work. You can configure your environment variables using <code>aws:elasticbeanstalk:application:environment</code> namespace. Create the <code>.ebextensions/env/prod-variables.json</code> file and put the following into it:</p>

<p>```json
[</p>

<pre><code>{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY_ENV",
    "Value": "prod"
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY_DEBUG",
    "Value": "0"
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__SECRET",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__MONGODB__SERVER",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__MONGODB__DATABASE",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__MONGODB__PASSWORD",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__MONGODB__USERNAME",
    "Value": ""
}
</code></pre>

<p>]
```</p>

<p>You should fill the <code>Value</code> key with your values (just avoid committing the values to repository). The <code>SYMFONY_ENV</code> is the variable for describing the type of environment and will be used later. As the deployment should happen automatically and you won&rsquo;t be able to enter your parameters manually they should be set automatically using the environment variables. This can be done using variables which start with <code>SYMFONY__</code> as they are automatically converted (the <code>__</code> becomes a <code>.</code>). As an example the <code>SYMFONY__ENV__MONGODB__SERVER</code> will become <code>%env.mongodb.server%</code>. The <code>parameters.yml.dist</code> has to be updated for this to work, make sure it contains the following changes:</p>

<p>```yaml
parameters:</p>

<pre><code>secret:           "%env.secret%"

mongodb_server:   "%env.mongodb.server%"
mongodb_database: "%env.mongodb.database%"
mongodb_password: "%env.mongodb.password%"
mongodb_username: "%env.mongodb.username%"
</code></pre>

<p>```</p>

<p>Run the following command to update your environment with variables:</p>

<p>```bash
aws elasticbeanstalk update-environment \</p>

<pre><code>--environment-name demo-prod-env \
--option-settings file://.ebextensions/env/prod-variables.json
</code></pre>

<p>```</p>

<h2>Add vendors Directory to Repository <a name="add-vendors-dir"></a></h2>

<p>The <code>10_composer_install.sh</code> hook on application deployment automatically runs <code>composer install</code> if it finds the <code>composer.json</code> file in the root directory. As I would like to run composer myself (and it might fail depending on your application) it can be disabled by moving <code>composer.json</code> file outside of main directory or by adding vendor directory to repository. This can be done by creating a <code>.gitkeep</code> file inside <code>vendor</code> directory and modifying <code>.gitignore</code> to contain:</p>

<p><code>text
/vendor/*
!vendor/.gitkeep
</code></p>

<p>This change will add a <code>vendor</code> directory to your repository, but everything inside it will be ignored (as it has to be installed automatically and not committed to repository).</p>

<h2>Add environment configuration and Update Composer <a name="add-environment-config"></a></h2>

<p>The ElasticBeanstalk environment can be configured by using <code>.config</code> files inside <code>.ebextensions</code> directory. You can read more about how to <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">customize EC2 intances in docs</a>. In short it reads the <code>.config</code> files from <code>.ebextensions</code> directory and runs them in alphabetical order. After the deployment <code>.ebextensions</code> directory is removed.</p>

<p>The composer by default used in environments has an old version, it&rsquo;s a good idea to have it updated. All of this can be done by creating <code>03-main.config</code> file and adding the following contents to it:</p>

<p>```yaml
commands:</p>

<pre><code>300-composer-update:
    command: "export COMPOSER_HOME=/root &amp;&amp; composer.phar self-update -n"
</code></pre>

<p>```</p>

<p>The config file starts with <code>03-</code> so we could have some breathing room if other configuration files have to be run before it. The commands are also run alphabetically so it&rsquo;s a good idea to start with a hundred based number as it will give you enough space for 99 commands before you will need to modify the order of them.</p>

<p>Now you could push your application to the environment (it still won&rsquo;t work as additional steps are required) by running:</p>

<p><code>bash
git aws.push
</code></p>

<h2>Install mongo extension <a name="install-mongo-extension"></a></h2>

<p>Our project uses the MongoDB and the required PHP mongo extension is not available by default on created environment. This can be easily taken care of by adding a command to install it.</p>

<p>```yaml
commands:</p>

<pre><code>200-install-mongo-ext:
    command: "yes '' | pecl install mongo"
    ignoreErrors: true
</code></pre>

<p>```</p>

<p>The <code>ignoreErrors</code> is required as it would be thrown if the extension is already installed. This way if extension is already installed, it just skips this step. If for some reason the extension failed to install, your deployment would still fail on composer install step as it won&rsquo;t have the required extension.</p>

<h2>Run Composer Install <a name="run-composer-install"></a></h2>

<p>The next step would be to run the composer install. This can be done by adding <code>container_command</code> which runs after the application and web server have been set up, but before the application version is deployed. Add the following to <code>03-main.config</code>:</p>

<p>```yaml
container_commands:</p>

<pre><code>300-run-composer:
    command: "composer.phar install --no-dev --optimize-autoloader --prefer-dist --no-interaction"
</code></pre>

<p>```</p>

<p>This will run composer install without <code>require-dev</code> packages (in production we don&rsquo;t need them), optimize the autoloader (performance improvements), preferring distribution packages (performance improvement) and without any interaction (as the deployment is being done automatically).</p>

<h2>Update Cache Files <a name="update-cache-files"></a></h2>

<p><strong>Important:</strong> If you&rsquo;re using at least <a href="http://symfony.com/blog/symfony-2-6-1-released">Symfony 2.6.1</a> this is not needed anymore as cache files are now relative.</p>

<p>Because all commands are being run while in <em>&ldquo;staging&rdquo;</em> area the locations are incorrect after deployment (<code>/var/app/ondeck</code> should be changed to <code>/var/app/current</code>). This can be fixed by running a <code>sed</code> command on cache files. Add the following to <code>03-main.config</code>:</p>

<p>```yaml
container_commands:</p>

<pre><code>600-update-cache:
    command: "source .ebextensions/bin/update-cache.sh"
</code></pre>

<p>```</p>

<p>Create the file <code>.ebextensions/bin/update-cache.sh</code> with contents:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>for i in $(grep -l -R &ldquo;ondeck&rdquo; /var/app/ondeck/app/cache/$SYMFONY_ENV/*); do</p>

<pre><code>sed -i -e "s/\/var\/app\/ondeck/\/var\/app\/current/g" $i
</code></pre>

<p>done
```</p>

<p>This script will replace all <code>/var/app/ondeck</code> occurrences with <code>/var/app/current</code> in cache files.</p>

<p>If you pushed your application to an environment at this moment you should have a completely functioning application. Read the following sections to improve your deployment.</p>

<h2>Add Apache Configuration (optional) <a name="add-apache-config"></a></h2>

<p>The PHP values can be changed using Apache configuration. The Apache configuration can also be updated to improve the security of your application (e.g., disallow entering hidden directories or files). Add an Apache configuration file to <code>.ebextensions/apache/zapplication.conf</code> with following contents:</p>

<p>```apache
php_value short_open_tag off</p>

<h1>&ldquo;-Indexes&rdquo; will have Apache block users from browsing folders without a</h1>

<h1>default document Usually you should leave this activated, because you</h1>

<h1>shouldn&rsquo;t allow everybody to surf through every folder on your server (which</h1>

<h1>includes rather private places like CMS system folders).</h1>

<p><IfModule mod_autoindex.c>
  Options -Indexes
</IfModule></p>

<h1>Block access to &ldquo;hidden&rdquo; directories or files whose names begin with a</h1>

<h1>period. This includes directories used by version control systems such as</h1>

<h1>Subversion or Git.</h1>

<p><IfModule mod_rewrite.c>
  RewriteCond %{SCRIPT_FILENAME} -d [OR]
  RewriteCond %{SCRIPT_FILENAME} -f
  RewriteRule &ldquo;(^|/).&rdquo; &ndash; [F]
</IfModule></p>

<h1>Block access to backup and source files. These files may be left by some</h1>

<h1>text/html editors and pose a great security danger, when anyone can access</h1>

<h1>them.</h1>

<p><FilesMatch "(\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|pem)|~)$">
  Order allow,deny
  Deny from all
  Satisfy All
</FilesMatch></p>

<h1>Block access to files &amp; directories starting with a dot</h1>

<p><FilesMatch "^\.">
  Order allow,deny
  Deny from all
</FilesMatch>
<DirectoryMatch "^\.|\/\.">
  Order allow,deny
  Deny from all
</DirectoryMatch>
```</p>

<p>This will change PHP <code>short_open_tag</code> value to <code>off</code> and make other changes to make your application more secure. The configuration file starts with letter <code>z</code> as we want to load this configuration at the end.</p>

<p>Add the container command to your <code>03-main.config</code> file to copy this configuration file:</p>

<p>```yaml
container_commands:</p>

<pre><code>200-copy-apache-config:
    command: "cp .ebextensions/apache/zapplication.conf /etc/httpd/conf.d/zapplication.conf"
</code></pre>

<p>```</p>

<h2>Remove dev Entry Point (optional) <a name="remove-dev-entry"></a></h2>

<p>As we are deploying to production, it doesn&rsquo;t make a lot of sense to keep development environment entry point (especially if you remove IP or similar checks). This entry point can be removed on deployment by adding following container command to <code>03-main.config</code>:</p>

<p>```yaml
container_commands:</p>

<pre><code>700-remove-dev-app:
    command: "rm web/app_dev.php"
</code></pre>

<p>```</p>

<h2>Add Cron (optional) <a name="add-cron"></a></h2>

<p>Your application might need to use the cron to run some tasks on schedule. Create a new file <code>.ebextensions/cron/main</code> and put your commands in it (just make sure this file ends with an empty line).</p>

<p>```bash
*/5 * * * * . /opt/elasticbeanstalk/support/envvars &amp;&amp; php /var/app/current/app/console acme:hello</p>

<p>```</p>

<p>This command will run every five minutes. Crontab runs in a minimal environment so we start with <code>. /opt/elasticbeanstalk/support/envvars</code> to make sure it has all the environment variables. After that we run the Symfony console command from our application using the environment which is set as the environment variable. Add as many commands as you need in this file.</p>

<p>Make changes to <code>03-main.config</code> to update crontab tasks:</p>

<p>```yaml
container_commands:</p>

<pre><code>800-run-cron:
    command: "crontab .ebextensions/cron/main"
</code></pre>

<p>```</p>

<p>If you decide you don&rsquo;t need to run cron tasks anymore, <strong>don&rsquo;t</strong> just delete the container command. Make sure you make this change incrementally, by first removing all the contents from <code>.ebextensions/cron/main</code> file (leave it empty or change the existing <code>800-run-cron</code> command to <code>crontab -r</code>) and deploying it to your ElasticBeanstalk environment. Only after it&rsquo;s done should you remove the container command and a file. If you just removed the container command, your existing instances will keep the commands in <code>crontab</code> from previous deployment.</p>

<h2>Add New Relic Configuration (optional) <a name="add-new-relic-config"></a></h2>

<p>In case you would like to add <a href="http://newrelic.com">New Relic</a> monitoring for your application, all the required configuration can be added to your deployment. Create a new file <code>02-newrelic.config</code> which will contain the following configuration:</p>

<p>```yaml
packages:</p>

<pre><code>yum:
    newrelic-php5: []
    newrelic-sysmond: []
rpm:
    newrelic: http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm
</code></pre>

<p>commands:</p>

<pre><code>300-install-newrelic:
    command: "newrelic-install install"
</code></pre>

<p>container_commands:</p>

<pre><code>300-update-newrelic-ini:
    command: "source .ebextensions/bin/update-newrelic-ini.sh"
400-configure-newrelic-sysmond:
    command: "nrsysmond-config --set license_key=$NEW_RELIC_LICENSE_KEY"
430-start-sysmond:
    command: "/etc/init.d/newrelic-sysmond start"
</code></pre>

<p>```</p>

<p>This will install New Relic agent and system monitoring daemon and update configuration used by them.</p>

<p>To update the configuration used by the agent create a <code>.ebextensions/bin/update-newrelic-ini.sh</code> script:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>sed -i -e &rsquo;s/newrelic.license.<em>/newrelic.license = &lsquo;&ldquo;$NEW_RELIC_LICENSE_KEY&rdquo;&rsquo;/&lsquo; /etc/php-5.5.d/newrelic.ini
sed -i -e &rsquo;s/newrelic.appname.</em>/newrelic.appname = &ldquo;&rsquo;&rdquo;$SYMFONY<strong>ENV</strong>NEW_RELIC__APPLICATION_NAME"&lsquo;&ldquo;/&rsquo; /etc/php-5.5.d/newrelic.ini
```</p>

<p>The script will set the license and application name using values from environment variables. Add the new environment variables to <code>.ebextensions/env/prod-variables.json</code> file and update your environment using AWS CLI.</p>

<p>```json
[</p>

<pre><code>...
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__NEW_RELIC__API__KEY",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "SYMFONY__ENV__NEW_RELIC__APPLICATION_NAME",
    "Value": ""
},
{
    "Namespace": "aws:elasticbeanstalk:application:environment",
    "OptionName": "NEW_RELIC_LICENSE_KEY",
    "Value": ""
}
</code></pre>

<p>]
```</p>

<p>Install <a href="https://github.com/ekino/EkinoNewRelicBundle">EkinoNewRelicBundle</a> in your Symfony application by running the following on your development environment (don&rsquo;t forget to enable the bundle in your <code>app/AppKernel.php</code>):</p>

<p><code>bash
composer require ekino/newrelic-bundle "1.2.*@dev"
</code></p>

<p>Add the following to your configuration files:</p>

<p>```yaml</p>

<h1>in app/config/config.yml</h1>

<p>ekino_new_relic:</p>

<pre><code>enabled: false
application_name: "%new_relic_application_name%"
api_key: "%new_relic_api_key%"
</code></pre>

<h1>in app/config/config_prod.yml</h1>

<p>ekino_new_relic:</p>

<pre><code>enabled: true
</code></pre>

<p>```</p>

<p>Update your <code>app/config/parameters.yml.dist</code> with new parameters:</p>

<p>```yaml
parameters:</p>

<pre><code>new_relic_application_name: "%env.new_relic.application_name%"
new_relic_api_key: "%env.new_relic.api.key%"
</code></pre>

<p>```</p>

<p>To notify about deployment add a new container command to <code>03-main.config</code>:</p>

<p>```yaml
container_commands:</p>

<pre><code>900-notify-deployment:
    command: "php app/console newrelic:notify-deployment --user=eb"
</code></pre>

<p>```</p>

<p>Push the application to your environment and if everything was done correctly you should start seeing some stats in your New Relic account.</p>

<h2>Install nodejs With Front-End Tools (2014-10-03 <a name="install-nodejs"></a></h2>

<p>If you watched a <a href="https://www.youtube.com/watch?v=R7iN5SFglMo">Ryan Weaver &ndash; Cool like Frontend Developer</a> or a similar talk you might want to add some front end goodness to your project. For this you will need to install nodejs, Grunt, Bower. Below are the steps on how to do it.</p>

<p>Create <code>.ebextensions/bin/install-nodejs.sh</code> with the contents:</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>hash_file=&ldquo;/tmp/nodejshash&rdquo;</p>

<p>check_if_npm_packages_has_to_be_installed () {</p>

<pre><code>if [ -f $hash_file ]; then
    check_if_same_hash
else
    return 0
fi
</code></pre>

<p>}</p>

<p>check_if_same_hash () {</p>

<pre><code>hash_new="$(md5sum .ebextensions/bin/install-nodejs.sh 2&gt; /dev/null | cut -d ' ' -f 1)"
hash_current="$(cat "$hash_file" 2&gt; /dev/null | cut -d ' ' -f 1)"

if [ $hash_new == $hash_current ]; then
    return 1
else
    return 0
fi
</code></pre>

<p>}</p>

<p>install_node () {</p>

<pre><code>if hash nodejs 2&gt; /dev/null; then
    echo 'nodejs install, add more processing if needed' &gt; /dev/null
else
    curl -sL https://rpm.nodesource.com/setup | bash -
    yum install -y nodejs-0.10.32
fi
</code></pre>

<p>}</p>

<p>install_npm_packages () {</p>

<pre><code>npm install -g bower
npm install -g grunt-cli
</code></pre>

<p>}</p>

<p>update_current_hash () {</p>

<pre><code>echo $hash_new &gt; $hash_file
</code></pre>

<p>}</p>

<p>install_node</p>

<p>if check_if_npm_packages_has_to_be_installed; then</p>

<pre><code>install_npm_packages
update_current_hash
</code></pre>

<p>fi
```</p>

<p>This script will install nodejs if it&rsquo;s not installed. Then it will check if npm packages have to be installed (new added or this is the first run) and install them if needed. Bower and Grunt-cli will be installed globally.</p>

<p>Add a container command to <code>03-main.config</code> to run this install script:</p>

<p>```json
container_commands:</p>

<pre><code>100-install-nodejs:
    command: "source .ebextensions/bin/install-nodejs.sh"
</code></pre>

<p>```</p>

<p>To install local npm packages, bower packages and run grunt production tasks add the following container commands (see <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/commit/1a651a94c134a80eb9895b4eb5aee99d37ad5823">repository</a> for file contents):</p>

<p>```json
container_commands:</p>

<pre><code>400-install-npm-packages:
    command: "npm install"
425-install-bower-packages:
    command: "bower install --allow-root"
450-run-grunt:
    command: "grunt production"
</code></pre>

<p>```</p>

<h2>Conclusion <a name="conclusion"></a></h2>

<p>This article might not had all the steps required for deploying your Symfony application to ElasticBeanstalk, but it should point you on the right way to deploying your application. If something was not informative enough or confusing, please let me know and I will try to clarify it. If you have any questions or ideas, leave them in the comments to start the knowledge sharing.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,bottom" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What learning to swim reminded me about life]]></title>
    <link href="http://ifdattic.com/what-learning-to-swim-reminded-me-about-life"/>
    <updated>2014-08-26T14:21:47+03:00</updated>
    <id>http://ifdattic.com/what-learning-to-swim-reminded-me-about-life</id>
    <content type="html"><![CDATA[<p>Recently I decided it would be a good idea to learn how to swim (as I like water and have a few activities planned which might lead to drowning). While doing that, it reminded me of a couple of things which might be used in life.</p>

<h2>Relax</h2>

<p>Panicking in water will lead you to drowning. Which isn&rsquo;t fun at all (I&rsquo;m a bit of an expert in drowning). In life, doing/executing decisions while panicking/stressed could lead to bad results. Try to put decisions until you have cleared your head, or if it&rsquo;s not possible, take a few deep breaths before proceeding.</p>

<h2>Focus</h2>

<p>A beach or pool might be not the easiest location to focus (damn you eyes and beautiful girls/boys), but losing focus will lead to mediocre results. Keep your focus straight to get the best results you can get. And after it&rsquo;s done, reward yourself with a little break.</p>

<h2>Self correct and improve yourself</h2>

<p>All my life I always tried to improve myself, sometimes with better results, sometimes with not so good results. It&rsquo;s a skill you have to grow. If you want to reach the end of the pool you have to improve your form. If you focus and reflect, it&rsquo;s easy to spot when you&rsquo;re not working enough with your legs, when you did something too soon, when you did something you wasn&rsquo;t supposed to do. Try to find something where you can improve, track your progress, improve the parts which doesn&rsquo;t feel right, remove steps if you can get away with it.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Pareto_principle">Pareto principle</a> (80-20 rule) states that, for many events, roughly 80% of the effects come from 20% of the causes. Try to find that 20% and work on improving it as it will get you the most results.</p>

<h2>Experiment</h2>

<p><em>&ldquo;What is the smallest amount of movement, I have to do not to drown?&rdquo;</em> or <em>&ldquo;How long can I float like a corpse before I run out of air?&rdquo;</em>. It&rsquo;s hard to experiment when you&rsquo;re afraid of breaking things or doing something wrong. As soon as you get more confidence, start experimenting. Start asking yourself questions like <em>&ldquo;What if &hellip;?&rdquo;</em>, <em>&ldquo;How about &hellip;?&rdquo;</em>, <em>&ldquo;Why &hellip;?&rdquo;</em> and just do it. Best way to learn is from practice (a bit of theory never hurts). What is the worst that can happen? Well a lot! Just most of the time the worst outcome isn&rsquo;t as bad as you think and even a bad outcome most of the time has many pros (which can outweigh the cons).</p>

<h2>Slow progress is better than no progress</h2>

<p>It would be wonderful if after your finger touched the water you will start swimming like a shark (bitting legs is optional). Without hard work you&rsquo;re rarely good at something right away. As long as you keep working, sooner or later you gonna reach your goal. Even two steps forward, one step backwards is a progress.</p>

<h2>When you stop chasing success it comes to you</h2>

<p>Was reminded of this when for the first time reached the other side of the pool (~22 meters). It happened when I stopped trying to reach the other side and decided <em>&ldquo;just do what you&rsquo;re supposed to do, who cares if you reach the other side or the middle of the pool&rdquo;.</em> I think it must have something to do with your mind stepping away from putting sticks in the wheels and your body + subconscious just doing what they know they have to do.</p>

<h2>You can&rsquo;t avoid bad days, survive them</h2>

<p>Even if you have a very positive attitude to life and everything is great, still sooner or later a bad day will come. Just one of those days were no matter how hard you try the results are never what they should be. Bad days come and go, just try to get as much from it as you can.</p>

<h2>Conclusion</h2>

<p>Most of the points are basic and yet, it&rsquo;s hardest to see that what is simple and in front of your face. Sometimes you just need a slap in the face for you mind to go <em>&ldquo;Oh right, forgot about that one.&rdquo;</em></p>

<p>How about you? Have something recently reminded you that you forgot about life?</p>
]]></content>
  </entry>
  
</feed>
