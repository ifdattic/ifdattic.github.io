<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/php/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-03-29T19:53:17+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use Composer - a PHP package manager]]></title>
    <link href="http://ifdattic.com/how-to-use-composer"/>
    <updated>2016-03-29T19:15:26+03:00</updated>
    <id>http://ifdattic.com/how-to-use-composer-a-php-package-manager</id>
    <content type="html"><![CDATA[<p>Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and helps to manage those dependencies.</p>

<p>Dependencies are managed on a per-project basis, installing them in a directory inside your project. For convenience some dependencies can be installed globally (e.g., Symfony project installer).</p>

<p>Skip to any of the sections:</p>

<ul>
<li><a href="#how-to-install-update#">How to install and update</a>

<ul>
<li><a href="#install-on-osx">Installing on OS X</a></li>
</ul>
</li>
<li><a href="#adding-dependencies">Adding dependencies</a>

<ul>
<li><a href="#adding-specific-version">Adding specific version</a></li>
</ul>
</li>
<li><a href="#removing-dependency">Removing dependency</a></li>
<li><a href="#initializing-composerjson-file">Initializing composer.json file</a></li>
<li><a href="#updating-dependency">Updating the dependency</a></li>
<li><a href="#installing-dependencies">Installing dependencies</a>

<ul>
<li><a href="#installing-dependencies-on-production">Installing dependencies on production servers</a></li>
</ul>
</li>
<li><a href="#autoloading">Autoloading</a>

<ul>
<li><a href="#psr4">PSR-4</a></li>
<li><a href="#psr0">PSR-0</a></li>
<li><a href="#classmap">Classmap</a></li>
<li><a href="#development-autoloading">Development autoloading</a></li>
</ul>
</li>
<li><a href="#creating-project">Creating a project</a></li>
<li><a href="#loading-custom-package">Loading custom package / replacing existing package</a>

<ul>
<li><a href="#adding-repository-cli">Adding / removing repository through CLI</a></li>
</ul>
</li>
<li><a href="#running-composer-globally">Running Composer globally</a></li>
<li><a href="#adding-platform-requirements">Adding platform requirements</a></li>
</ul>


<p><a name="how-to-install-update"></a></p>

<h2>How to install and update</h2>

<p>Composer can be installed by running:</p>

<p><code>bash
curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
</code></p>

<p>This will install Composer in the directory <code>/usr/local/bin</code> (which should be in your path) allowing you to run it from anywhere by using <code>composer</code> command.</p>

<p>If your installation is working correctly you should see the version and available commands:</p>

<p><code>bash
composer
</code></p>

<p>To make sure that you&rsquo;re using the latest version of Composer, constantly run the self update:</p>

<p><code>bash
composer self-update
</code></p>

<p><a name="install-on-osx"></a></p>

<h3>Installing on OS X</h3>

<p>If you use OS X you can install Composer through <a href="http://brew.sh/">Homebrew</a>:</p>

<p><code>bash
brew install homebrew/php/composer
</code></p>

<p>Check the <a href="https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx">documentation</a> if any of the installation options doesn&rsquo;t work for you (e.g., install locally or on Windows).</p>

<p><a name="adding-dependencies"></a></p>

<h2>Adding dependencies</h2>

<p>To add a dependency your project needs to use the <code>require</code> command with a package name (format <code>&lt;vendor&gt;/&lt;name&gt;</code>) command:</p>

<p>```bash
composer require monolog/monolog</p>

<h1>Signature:</h1>

<p>composer require <vendor>/<name></p>

<h1>Signature of adding multiple dependencies:</h1>

<p>composer require <vendor>/<name> <vendor2>/<name> <vendor2>/<name2>
```</p>

<p>This creates the <code>composer.json</code> file (if it doesn&rsquo;t exist), and installs the dependency (including dependencies your dependency depends on).</p>

<p><strong>Avoid changing <code>composer.json</code> file manually</strong>, most of the time the <code>require</code> command is enough to manage dependencies.</p>

<p>To add a development dependency use the <code>--dev</code> flag with <code>require</code> command:</p>

<p>```bash
composer require &mdash;dev phpspec/phpspec</p>

<h1>Signature:</h1>

<p>composer require &mdash;dev <vendor>/<name>
```</p>

<p><a name="adding-specific-version"></a></p>

<h3>Adding specific version</h3>

<p>The <code>require</code> command <strong>will automatically choose a suitable version</strong> you can use in your project. If you need to provide the specific version of dependency provide it with the package name:</p>

<p>```bash
composer require monolog/monolog:~1.17.0</p>

<h1>Signature:</h1>

<p>composer require <vendor>/<name>:<version>
```</p>

<p>Version to use can be defined in the following ways:</p>

<ul>
<li>The <code>^</code> (caret) operator means <em>any non-breaking version / until major</em> (e.g., <code>^1.2.3</code> is equivalent to <code>&gt;=1.2.3 &lt;2.0.0</code>)</li>
<li>The <code>~</code> (tilde) operator means <em>approximate / increment right most digit</em> (e.g., <code>~1.2</code> is equivalent to <code>&gt;=1.2 &lt;2.0.0</code> or <code>~1.2.3</code> is equivalent to <code>&gt;=1.2.3 &lt;1.3.0</code>)</li>
<li>Read the <a href="https://getcomposer.org/doc/articles/versions.md">documentation</a> to learn about other version constraints (exact, range, wildcard)</li>
</ul>


<p>Versions are described using semantic versioning (SemVer) which uses the format <code>MAJOR.MINOR.PATCH</code>. Each of the numbers have a specific meaning:</p>

<ul>
<li><code>MAJOR</code> &ndash; API changes that break backwards-compatibility</li>
<li><code>MINOR</code> &ndash; new features</li>
<li><code>PATCH</code> &ndash; bug fixes</li>
</ul>


<p><a name="removing-dependency"></a></p>

<h2>Removing dependency</h2>

<p>If you don&rsquo;t need the dependency anymore use the <code>remove</code> command to remove it from the <code>composer.json</code> file and directory:</p>

<p>```bash
composer remove monolog/monolog</p>

<h1>Signature:</h1>

<p>composer remove <vendor>/<name>
```</p>

<p>To remove the development dependency add <code>--dev</code> flag to <code>remove</code> command:</p>

<p>```bash
composer remove &mdash;dev phpspec/phpspec</p>

<h1>Signature:</h1>

<p>composer remove &mdash;dev <vendor>/<name>
```</p>

<p><a name="initializing-composerjson-file"></a></p>

<h2>Initializing composer.json file</h2>

<p>If you are creating a package or want to fill a <code>composer.json</code> file interactively, use the <code>init</code> command:</p>

<p><code>bash
composer init
</code></p>

<p>This will ask you to provide information like package name, description, dependencies, etc. After you provide all the information it will generate a <code>composer.json</code> file.</p>

<p><a name="updating-dependency"></a></p>

<h2>Updating the dependency</h2>

<p>To get the latest versions of the dependencies (also updates the <code>composer.lock</code> file) use the <code>update</code> command:</p>

<p><code>bash
composer update
</code></p>

<p>If you want to update only specific packages provide them to the <code>update</code> command:</p>

<p>```bash
composer update monolog/monolog</p>

<h1>Signature:</h1>

<p>composer update <vendor>/<name></p>

<h1>Wildcard is allowed to update multiple packages (without listing them):</h1>

<p>composer update <vendor>/*
```</p>

<p><a name="installing-dependencies"></a></p>

<h2>Installing dependencies</h2>

<p>Use the <code>install</code> command to install project dependencies:</p>

<p><code>bash
composer install
</code></p>

<p>This will read the <code>composer.json</code> file and resolve your dependencies. After finishing the installation it will create a <code>composer.lock</code> file, which contains the exact versions installed. This makes sure that the same versions are installed every time the <code>install</code> command is executed.</p>

<p><strong>Commit your application&rsquo;s <code>composer.lock</code> file (along with <code>composer.json</code>) into version control</strong>.</p>

<p>By convention dependencies are installed into a <code>vendor</code> directory, which <strong>should not be committed to version control</strong>.</p>

<p><a name="installing-dependencies-on-production"></a></p>

<h3>Installing dependencies on production servers</h3>

<p>You will want to use a few flags when installing dependencies on production servers:</p>

<p><code>bash
composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
</code></p>

<p>This will optimize the dependency installation which is really useful for production servers. It will try to install distribution packages (<code>--prefer-dist</code> flag), won&rsquo;t install development dependencies (<code>--no-dev</code> flag), and generate a classmap for faster autoloader (<code>--optimize-autoloader</code> flag). The <code>--no-interaction</code> flag will make sure that no interactive questions are asked (needed for automated deployments).</p>

<p><a name="autoloading"></a></p>

<h2>Autoloading</h2>

<p>Composer generates a <code>vendor/autoload.php</code> file which automatically loads the classes your project depends on. Just include that file in your PHP script:</p>

<p><code>php
require __DIR__.'/vendor/autoload.php'
</code></p>

<p>You can change the <code>autoload</code> key in your <code>composer.json</code> file to define the mapping.</p>

<p>If you added new classes you might need to update the autoloader. Use the <code>dump-autoload</code> command to do that:</p>

<p>```bash
composer dump-autoload</p>

<h1>For production use</h1>

<p>composer dump-autoload &mdash;optimize &mdash;no-dev
```</p>

<!-- https://getcomposer.org/doc/01-basic-usage.md#autoloading -->


<p><a name="psr4"></a></p>

<h3>PSR-4</h3>

<p>Under the <code>psr-4</code> key you define a mapping from namespaces to paths, relative to the package root. The PSR-4 is the <em>recommended</em> choice for autoloading (avoids having to regenerate the autoloader after adding classes).</p>

<p><strong>Namespace prefixes must end in <code>\\</code> to avoid conflicts between similar prefixes</strong>.</p>

<p>In addition to normal mapping definition, you can define multiple directories, or define a fallback directory:</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "psr-4": {
        "Vendor\\Namespace\\Normal\\": "src/",
        "Vendor\\Namespace\\Multi\\": ["src/", "lib/"],
        "": "src/fallback/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="psr0"></a></p>

<h3>PSR-0</h3>

<p>Under the <code>psr-0</code> key you define a mapping from namespaces to paths, relative to the package root. This also supports the PEAR-style non-namespaced convention.</p>

<p><strong>Namespace prefixes should end in <code>\\</code> to avoid conflicts between similar prefixes</strong>.</p>

<p>In addition to normal mapping definition, you can define multiple directories, or define a fallback directory:</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "psr-0": {
        "Vendor\\Namespace\\Normal\\": "src/",
        "Vendor_Namespace_PEAR_": "src/",
        "Vendor\\Namespace\\Multi\\": ["src/", "lib/"],
        "": "src/fallback/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="classmap"></a></p>

<h3>Classmap</h3>

<p>For libraries that do not follow PSR-0/4 you can specify directories or files to search for classes (using the <code>classmap</code> key):</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "classmap": ["src/", "lib/", "Something.php"]
}
</code></pre>

<p>}
```</p>

<p><a name="development-autoloading"></a></p>

<h3>Development autoloading</h3>

<p>You should avoid polluting the autoloader in production with classes it doesn&rsquo;t need (like test suite). Using the <code>autoload-dev</code> key you can define classes that should be loaded only in development:</p>

<p>```json
{</p>

<pre><code>"autoload-dev": {
    "psr-4": {
        "MyLibrary\\Tests\\": "tests/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="creating-project"></a></p>

<h2>Creating a project</h2>

<p>The <code>create-project</code> command will create a new project from an existing package. It&rsquo;s the equivalent of doing a git clone followed by installation of dependencies. The command takes the package name and the directory to create it in (optional: provide the version as third parameter):</p>

<p>```bash
composer create-project symfony/framework-standard-edition my_project_name</p>

<h1>or</h1>

<p>composer create-project symfony/framework-standard-edition my_project_name 3.1.*</p>

<h1>Signature:</h1>

<p>composer create-project <vendor>/<name> <path> &lt;optional:version>
```</p>

<p><a name="loading-custom-package"></a></p>

<h2>Loading custom package / replacing existing package</h2>

<p>In some cases you might want to use a custom package. For example you fixed a bug in open source library and while waiting for PR to be merged you want to use the fixed library.</p>

<p>The branch on the forked repository should be prefixed with <code>dev-</code> (e.g., in the repository it will be <code>bugfix</code>, in the <code>composer.json</code> file it will be <code>dev-bugfix</code>). Then change the <code>repositories</code> key in <code>composer.json</code> (in example assume that I forked <code>Monolog</code> and created <code>bugfix</code> branch):</p>

<p>```json
{</p>

<pre><code>"repositories": [
    "type": "vcs",
    "url": "https://github.com/ifdattic/monolog"
],
"require": {
    "monolog/monolog": "dev-bugfix"
}
</code></pre>

<p>}
```</p>

<p>Now after updating the dependency it should replace the original package with a changed one (don&rsquo;t change the package name for override to work):</p>

<p>```bash
composer update monolog/monolog</p>

<h1>Signature</h1>

<p>composer update</p>

<h1>or</h1>

<p>composer update <vendor>/<name>
```</p>

<p>To avoid conflicts you might need to alias the branch for it to be treated as a specific version. To make in-line aliases use the <code>as</code> keyword:</p>

<p>```json
{</p>

<pre><code>"require": {
    "monolog/monolog": "dev-bugfix as 1.18.1"
}
</code></pre>

<p>}
```</p>

<!-- https://getcomposer.org/doc/articles/aliases.md -->


<p><a name="adding-repository-cli"></a></p>

<h3>Adding / removing repository through CLI</h3>

<p>If you don&rsquo;t want to manually add repository use the <code>composer config repositories</code> command:</p>

<p>```bash
composer config repositories.monolog vcs <a href="https://github.com/ifdattic/monolog">https://github.com/ifdattic/monolog</a></p>

<h1>Signature:</h1>

<p>composer config repositories.<name> <type> <url>
```</p>

<p>To remove a repository use <code>--unset</code> flag (<code>repo</code> is alias for <code>repositories</code>):</p>

<p>```bash
composer config &mdash;unset repo.monolog</p>

<h1>Signature:</h1>

<p>composer config &mdash;unset repo.<name>
```</p>

<!-- https://getcomposer.org/doc/05-repositories.md#loading-a-package-from-a-vcs-repository -->


<p><a name="running-composer-globally"></a></p>

<h2>Running Composer globally</h2>

<p>Sometimes you might want to install some CLI tools globally. Using <code>global</code> command it will allow to install them to the directory defined in <code>COMPOSER_HOME</code> environment variable:</p>

<p>```bash
composer global require fabpot/php-cs-fixer</p>

<h1>Signature:</h1>

<p>composer global <command> <vendor>/<name>
```</p>

<!-- https://getcomposer.org/doc/03-cli.md#global  -->


<p><a name="adding-platform-requirements"></a></p>

<h2>Adding platform requirements</h2>

<p>If you need to add requirements for the system you can use platform packages. They are virtual packages of the things that are installed on the system. For example the following snippet requires for PHP 7 to be available:</p>

<p>```json
{</p>

<pre><code>"require": {
    "php": "^7.0"
}
</code></pre>

<p>}
```</p>

<p>The following platform packages are available: <code>php</code>, <code>hhvm</code>, <code>ext-&lt;name&gt;</code>, <code>lib-&lt;name&gt;</code>.</p>

<p>To get a list of locally available platform packages run:</p>

<p><code>bash
composer show --platform
</code></p>

<!-- https://getcomposer.org/doc/02-libraries.md#platform-packages -->


<h2>Conclusion</h2>

<p>You can do a lot more with Composer, but this should take care of most of the use cases while developing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration of PHP Project Using Shippable]]></title>
    <link href="http://ifdattic.com/continuous-integration-php-project-using-shippable"/>
    <updated>2015-08-24T14:14:23+03:00</updated>
    <id>http://ifdattic.com/continuous-integration-of-php-project-using-shippable</id>
    <content type="html"><![CDATA[<p>Recently I started using <a href="https://app.shippable.com/">Shippable</a> as my continuous integration service. It adds a lot to peace of mind knowing that your tests are always run (even if you forget to do it on your local environment) and you have another point of failure for your application.</p>

<p>The biggest reason I chose Shippable is that it has a sane pricing. You get one concurrent build for free and this includes the private repositories. This works great for side projects which you don&rsquo;t want to make public, but want to use good tools without a lot of hassle. If the project picks up and you need more hamster power it&rsquo;s easy to ramp it up without having to sell a kidney or two. For those wanting to say that &ldquo;We need to charge that much to provide good service&rdquo; I understand that and I personally look with one eyebrow raised at software which is just free (business needs to make money to survive). Just that for simple side projects (hobby) that will probably won&rsquo;t bring even a dollar spending hundreds a month is not a best financial decision.</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#initial-config">Initial configuration</a></li>
<li><a href="#phpunit-testing">PHPUnit testing</a></li>
<li><a href="#enable-project">Enable project in Shippable</a></li>
<li><a href="#phpspec-testing">phpspec testing</a></li>
<li><a href="#behat-testing">Behat testing</a></li>
<li><a href="#environment-variables-mysql">Environment variables &amp; MySQL</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>To start using this service you just need to sign up using your GitHub or BitBucket account. If you want to test private repositories you will have to give Shippable permission to them (by default it only sees public repositories). The code used in this article is available at <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code">GitHub</a>. It&rsquo;s a Symfony project, but with small changes any PHP project could be tested.</p>

<h2>Initial configuration <a name="initial-config"></a></h2>

<p>Your project needs to have a <code>shippable.yml</code> configuration file. In it you define scripts which will be run, environment variables, language, versions to test, etc.</p>

<p>First let&rsquo;s configure Shippable to test a PHP project and do it for <code>5.5</code> &amp; <code>5.6</code> versions. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
language: php</p>

<p>php:</p>

<pre><code>- 5.5
- 5.6
</code></pre>

<p>```</p>

<p>Just in case it might be helpful to have the application log files (in case the build is failing and you&rsquo;re not sure why). You can tell shippable to save the artifacts from a build and make it available for download using the <code>archive</code> option. The <code>shippable</code> directory is a special one were all the files from build is being kept (like test coverage reports, etc.). Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
archive: true</p>

<p>after_script:</p>

<pre><code>- cp -r ./app/logs shippable/logs
</code></pre>

<p>```</p>

<p>This will create an archive for download after the build is done. The <code>after_script</code> is commands which are run after the build and they will not affect the status of the build.</p>

<p>To have our project working we need to install libraries using composer. First we update composer to have the latest version and then install all the required libraries:</p>

<p>```yml
before_script:</p>

<pre><code>  - composer self-update -n
  - composer install --prefer-dist -n
</code></pre>

<p>```</p>

<h2>PHPUnit testing <a name="phpunit-testing"></a></h2>

<p>The <code>AppBundle</code> which comes with new Symfony project has a simple PHPUnit test. Add the following to run the PHPUnit tests:</p>

<p>```yml
script:</p>

<pre><code>- phpunit -c app --log-junit shippable/testresults/junit.xml --coverage-xml shippable/codecoverage
</code></pre>

<p>```</p>

<p><a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/commit/b07abaccb788284c17901796e1849ca24fd57972">Commit the changes</a> and push it to GitHub. Now that we have the basic set-up for Shippable it&rsquo;s time to add it to a service.</p>

<h2>Enable project in Shippable <a name="enable-project"></a></h2>

<p>First choose the subscription to use and when in projects section click the big plus icon which says &ldquo;Enable Project.&rdquo;</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20815778916/in/album-72157650815525029/" title="shippable-choose-subscription"><img src="https://farm6.staticflickr.com/5824/20815778916_6d4e51a029.jpg" width="421" height="212" alt="shippable-choose-subscription"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Force a synchronization if the repository you want is not in the list. Click on key icon to enable the project.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20219448984/in/album-72157650815525029/" title="shippable-enable-project"><img src="https://farm1.staticflickr.com/577/20219448984_b17b72e6a4_c.jpg" width="800" height="738" alt="shippable-enable-project"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>After it is done you can manually start a build or it will happen automatically the next time you will push a commit.</p>

<p>After a while a build should finish and you should get the similar view.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20832499472/in/album-72157650815525029/" title="shippable-phpunit"><img src="https://farm1.staticflickr.com/696/20832499472_42578b27d8_c.jpg" width="800" height="654" alt="shippable-phpunit"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>By clicking &ldquo;Download Artifacts&rdquo; you can download the logs &amp; other files which were generated during the build.</p>

<h2>phpspec testing <a name="phpspec-testing"></a></h2>

<p>Lets expand our testing suite with <a href="http://www.phpspec.net">phpspec</a>. You can see that code was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/1">pull request</a>.</p>

<p>To run phpspec tests just add a command to <code>script</code> in your <code>shippable.yml</code> file:</p>

<p>```yml
script:</p>

<pre><code># ...
- ./bin/phpspec run -fpretty --verbose -n
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20815778566/in/album-72157650815525029/" title="shippable-phpspec"><img src="https://farm6.staticflickr.com/5699/20815778566_b826863744_c.jpg" width="800" height="632" alt="shippable-phpspec"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Behat testing <a name="behat-testing"></a></h2>

<p>Lets expand our testing suite with <a href="http://behat.org/">Behat</a>. You can see that code was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/2">pull request</a>. Please note that currently there is no tagged version of Behat (at the time of writing latest is <code>3.0.15</code>) which has <code>junit</code> formatter, for that reason a <code>dev</code> version is installed.</p>

<p>To run Behat tests we will start the built-in web server &amp; then run the tests. This can be done by adding following commands:</p>

<p>```yml
script:</p>

<pre><code># ...
- ./app/console server:start -n
- ./bin/behat --format=progress --out=std --format=junit --out=shippable/testresults -n
</code></pre>

<p>```</p>

<p>After the tests are finished, stop the built-in web server:</p>

<p>```yml
after_script:</p>

<pre><code>- ./app/console server:stop -n
</code></pre>

<p>```</p>

<p>The default XDebug nesting level is set at 100 which is very small and throws a fatal PHP error. This can be fixed by setting it at higher level in <code>php.ini</code> file. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
before_install:</p>

<pre><code>- echo "xdebug.max_nesting_level = 1000" &gt;&gt; ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20832501252/in/album-72157650815525029/" title="shippable-behat"><img src="https://farm1.staticflickr.com/603/20832501252_9f8620943e_c.jpg" width="800" height="636" alt="shippable-behat"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Environment variables &amp; MySQL <a name="environment-variables-mysql"></a></h2>

<p>You will probably be using a MySQL or something similar for the persistence in your application. It&rsquo;s very easy to include services with Shippable.</p>

<p>You don&rsquo;t want to hard code configuration variables for your application. To fix that we will use the environment variables to configure the application depending on the environment it is in. You can set the global environment variables which are the same between builds and you can set simple environment variables which are different between builds (extending your testing matrix). If you have environment variables which you don&rsquo;t want to show (like passwords) you can add it as a secure environment variable.</p>

<p>You can see the code which was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/3">pull request</a>.</p>

<p>To get the secure environment variable you need to go to project settings. It has a panel &ldquo;Encrypt Env Vars.&rdquo; You provide the environment variables in the box and after clicking &ldquo;Encrypt&rdquo; you get the snippet of code you can paste in your <code>shippable.yml</code> file.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20849195481/in/album-72157650815525029/" title="shippable-secure-environment-variable"><img src="https://farm1.staticflickr.com/757/20849195481_146797af4e_c.jpg" width="800" height="513" alt="shippable-secure-environment-variable"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Environment variables which start with <code>SYMFONY__</code> are converted to normal variables after composer finishes the install. The double underscore becomes a dot. The environment variable <code>SYMFONY__ENV__DATABASE_NAME</code> becomes <code>env.database_name</code> parameter in your application. Lets add the database configuration and a secret value:</p>

<p>```yml
env:</p>

<pre><code>global:
    - SYMFONY__ENV__DATABASE_HOST=127.0.0.1
    - SYMFONY__ENV__DATABASE_PORT=~
    - SYMFONY__ENV__DATABASE_NAME=symfony
    - SYMFONY__ENV__DATABASE_USER=shippable
    - SYMFONY__ENV__DATABASE_PASSWORD=
    # Secret parameter value
    - secure: L9Ws6Wcx1XVoJYAP/YINXd4tGJwDsdG1yj7M/dLtvhZBhS2oLUvtxir7MGWDpbV69Qc+/FWUgUchpd4NUNHqEwc80YUFGLxylJ5Z82Cqnp9cf1qoM+gtHAM6J6o4TY7/jnuYsjvK0f++G+PJKiTYaky9QvK1qb+ERRxfk2AqoM7p7J3PYQz05lIKwuGmmmONfvlelT4Sv+8RPgfWSbJ1RBEN9zPS4Psh23QZ4T/zThQwyiNDwCv0QcUyQ7Mm+SFo59Eh34901DJwttZKYXG8ruO9iJs+ow7cAMAAAZ7sqgx7PWWIodMfpUjAlut45m/AMDi3AsAeG42262/o/9hRkA==
</code></pre>

<p>```</p>

<p>The MySQL database can be created by adding the command in <code>before_script</code> option:</p>

<p>```yml
before_script:</p>

<pre><code># ...
- mysql -e "CREATE DATABASE $SYMFONY__ENV__DATABASE_NAME"
- ./app/console doctrine:schema:create -n
</code></pre>

<p>```</p>

<p>This will create the database as it&rsquo;s defined in the environment variable. After the database is created it will run the queries to create a schema for your application.</p>

<p>We&rsquo;re using built-in server for testing our application. However it has no access to environment variables. To fix that extend your <code>php.ini</code> configuration to include them (you probably won&rsquo;t need this if you&rsquo;re using Apache or different web server):</p>

<p>```yml
before_install:</p>

<pre><code># ...
- echo 'variables_order = "EGPCS"' &gt;&gt; ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20654012310/in/album-72157650815525029/" title="shippable-environment-variables-mysql"><img src="https://farm6.staticflickr.com/5681/20654012310_f41801b45a_c.jpg" width="800" height="670" alt="shippable-environment-variables-mysql"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Conclusion <a name="conclusion"></a></h2>

<p>With these small changes you should have a CI testing for your application. It will improve your code quality and give you a piece of mind knowing that the changes you made will be tested even if you forgot to run the tests on your development machine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/fake-test-double-using-prophecy"/>
    <updated>2015-07-22T09:17:53+03:00</updated>
    <id>http://ifdattic.com/fake-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Fake test double is a simplified version of a dependency. A good example is an in memory or file system repository in exchange for database repository. Fake objects implement the interface of dependency.</p>

<p>Below is the class which has a constructor dependency:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class Questioner
{</p>

<pre><code>/** @var OutputInterface */
private $output;

public function __construct(OutputInterface $output)
{
    $this-&gt;output = $output;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>The <code>OutputInterface</code> is:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>interface OutputInterface
{</p>

<pre><code>/**
 * Save the data.
 *
 * @param  array  $data
 * @param  string $name
 * @return boolean
 */
public function save(array $data, $name = null);
</code></pre>

<p>}
```</p>

<p>In production you would like to use a database output for persistence. The following object might be used:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class DatabaseOutput implements OutputInterface
{</p>

<pre><code>/** @inheritDoc */
public function save(array $data, $name = null)
{
    // call database or do other time consuming tasks
}
</code></pre>

<p>}
```</p>

<p>This will make unit testing impossible. To test the code you would need to use functional tests which would require a database. Code using the database will run much longer and the longer tests run the higher the chance they won&rsquo;t be run at all.</p>

<p>For this reason in unit testing a simpler version of dependency can be used:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class InMemoryOutput implements OutputInterface
{</p>

<pre><code>/** @inheritDoc */
public function save(array $data, $name = null)
{
    // simple, fast implementation for testing
}
</code></pre>

<p>}
```</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mock Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/mock-test-double-using-prophecy"/>
    <updated>2015-07-02T16:42:18+03:00</updated>
    <id>http://ifdattic.com/mock-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Mock is a test double which simulates behavior and we have expectations for it. You define predictions for it and later check if any of them failed.</p>

<p>```php
&lt;?php</p>

<p>namespace tests;</p>

<p>use App\Output;
use App\Questioner;
use App\Scorer;
use Prophecy\Argument;</p>

<p>class QuestionerTest extends \PHPUnit_Framework_TestCase
{</p>

<pre><code>// ...

/**
 * @test
 */
function questioner_is_saved()
{
    $outputMock = $this-&gt;prophesize(Output::CLASS);
    $outputMock-&gt;save([], Argument::type('string'))-&gt;shouldBeCalled();
    $questioner = new Questioner($outputMock-&gt;reveal());

    $questioner-&gt;saveAs('any name');
}
</code></pre>

<p>}
```</p>

<p>Some of the predictions you can make:</p>

<ul>
<li><code>CallPrediction</code> or <code>shouldBeCalled()</code> &ndash; checks that method was called 1 or more times</li>
<li><code>NoCallsPrediction</code> or <code>shouldNotBeCalled()</code> &ndash; checks that method was not called</li>
<li><code>CallTimesPrediction</code> or <code>shouldBeCalledTimes($count)</code> &ndash; checks that method was called a specified number of times</li>
<li><code>CallbackPrediction</code> or <code>should($callback)</code> &ndash; checks method against custom callback</li>
</ul>


<p>Custom predictions can be created by implementing <code>PredictionInterface</code>.</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spy Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/spy-test-double-using-prophecy"/>
    <updated>2015-05-20T13:47:25+03:00</updated>
    <id>http://ifdattic.com/spy-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Spy is a test double which records its actions. After code execution you can check if interaction is as expected. You use it to make sure the method(s) was called.</p>

<p>Below is the class which has an optional dependency which is called:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class Questioner
{</p>

<pre><code>private $output;
private $questions = [];
private $scorer;

public function __construct(OutputInterface $output, ScorerInterface $scorer = null)
{
    $this-&gt;output = $output;
    $this-&gt;scorer = $scorer;
}

/** @return int */
public function getQuestionsCount()
{
    return 0;
}

/**
 * Save under a new name.
 *
 * @param  string $name
 * @return boolean
 */
public function saveAs($name)
{
    $saved = $this-&gt;output-&gt;save($this-&gt;questions, $name);

    if ($saved &amp;&amp; $this-&gt;scorer) {
        $this-&gt;scorer-&gt;update();
    }

    return $saved;
}
</code></pre>

<p>}
```</p>

<p>To check that the <code>update()</code> method on <code>Scorer</code> is called use the following spy test double:</p>

<p>```php
&lt;?php</p>

<p>namespace tests;</p>

<p>use App\Output;
use App\Questioner;
use App\Scorer;
use Prophecy\Argument;</p>

<p>class QuestionerTest extends \PHPUnit_Framework_TestCase
{</p>

<pre><code>// ...

/**
 * @test
 */
function score_is_updated_on_save()
{
    $outputStub = $this-&gt;prophesize(Output::CLASS);
    $outputStub-&gt;save([], Argument::type('string'))-&gt;willReturn(true);
    $scorerSpy = $this-&gt;prophesize(Scorer::CLASS);
    $questioner = new Questioner($outputStub-&gt;reveal(), $scorerSpy-&gt;reveal());

    $questioner-&gt;saveAs('any name');

    $scorerSpy-&gt;update()-&gt;shouldHaveBeenCalled();
}
</code></pre>

<p>}
```</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
</feed>
