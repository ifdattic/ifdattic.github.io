<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/technical/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2015-07-22T09:27:12+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fake Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/fake-test-double-using-prophecy"/>
    <updated>2015-07-22T09:17:53+03:00</updated>
    <id>http://ifdattic.com/fake-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Fake test double is a simplified version of a dependency. A good example is an in memory or file system repository in exchange for database repository. Fake objects implement the interface of dependency.</p>

<p>Below is the class which has a constructor dependency:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class Questioner
{</p>

<pre><code>/** @var OutputInterface */
private $output;

public function __construct(OutputInterface $output)
{
    $this-&gt;output = $output;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>The <code>OutputInterface</code> is:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>interface OutputInterface
{</p>

<pre><code>/**
 * Save the data.
 *
 * @param  array  $data
 * @param  string $name
 * @return boolean
 */
public function save(array $data, $name = null);
</code></pre>

<p>}
```</p>

<p>In production you would like to use a database output for persistence. The following object might be used:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class DatabaseOutput implements OutputInterface
{</p>

<pre><code>/** @inheritDoc */
public function save(array $data, $name = null)
{
    // call database or do other time consuming tasks
}
</code></pre>

<p>}
```</p>

<p>This will make unit testing impossible. To test the code you would need to use functional tests which would require a database. Code using the database will run much longer and the longer tests run the higher the chance they won&rsquo;t be run at all.</p>

<p>For this reason in unit testing a simpler version of dependency can be used:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class InMemoryOutput implements OutputInterface
{</p>

<pre><code>/** @inheritDoc */
public function save(array $data, $name = null)
{
    // simple, fast implementation for testing
}
</code></pre>

<p>}
```</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mock Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/mock-test-double-using-prophecy"/>
    <updated>2015-07-02T16:42:18+03:00</updated>
    <id>http://ifdattic.com/mock-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Mock is a test double which simulates behavior and we have expectations for it. You define predictions for it and later check if any of them failed.</p>

<p>```php
&lt;?php</p>

<p>namespace tests;</p>

<p>use App\Output;
use App\Questioner;
use App\Scorer;
use Prophecy\Argument;</p>

<p>class QuestionerTest extends \PHPUnit_Framework_TestCase
{</p>

<pre><code>// ...

/**
 * @test
 */
function questioner_is_saved()
{
    $outputMock = $this-&gt;prophesize(Output::CLASS);
    $outputMock-&gt;save([], Argument::type('string'))-&gt;shouldBeCalled();
    $questioner = new Questioner($outputMock-&gt;reveal());

    $questioner-&gt;saveAs('any name');
}
</code></pre>

<p>}
```</p>

<p>Some of the predictions you can make:</p>

<ul>
<li><code>CallPrediction</code> or <code>shouldBeCalled()</code> &ndash; checks that method was called 1 or more times</li>
<li><code>NoCallsPrediction</code> or <code>shouldNotBeCalled()</code> &ndash; checks that method was not called</li>
<li><code>CallTimesPrediction</code> or <code>shouldBeCalledTimes($count)</code> &ndash; checks that method was called a specified number of times</li>
<li><code>CallbackPrediction</code> or <code>should($callback)</code> &ndash; checks method against custom callback</li>
</ul>


<p>Custom predictions can be created by implementing <code>PredictionInterface</code>.</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Dutch PHP 2015 Conference]]></title>
    <link href="http://ifdattic.com/dutch-php-2015-conference-review"/>
    <updated>2015-06-29T20:51:19+03:00</updated>
    <id>http://ifdattic.com/review-of-dutch-php-2015-conference</id>
    <content type="html"><![CDATA[<p>On June of 2015 I attended the Dutch PHP conference and this is a short review of it.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19264000576" title="Dutch PHP 2015 Conference by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/408/19264000576_4272fa2fa2_z.jpg" width="640" height="303" alt="Dutch PHP 2015 Conference"></a></p>

<p>The conference was at Amsterdam RAI venue which is outside city center. Organizers provided directions how to get to it from city center and it&rsquo;s not hard to find. Depending on where you&rsquo;re staying for conference it might have been easier or harder to reach it. I heard some people that they would like it closer to their hotel as they don&rsquo;t want to figure out how to use public transport or take it for 20 minutes to get to the venue. I didn&rsquo;t had a direct route from my airbnb place to the venue, but it was not a big problem for me. For someone who likes exploring places by choosing a direction and walking in it a 45 minute walk to venue is a good way to freshen up my head.</p>

<p>Venue is big and well supported by staff. Signs make it easy to find where you need to go. The staff is always available to provide you with refreshments (tea, coffee, juice, water) and clean up. Stand up tables make it easy to discuss with other people while having a refreshment and sitting desks are comfortable if you need to do some work.</p>

<p>This might be normal for Dutch people, but I don&rsquo;t think of a bunch of cold sandwiches as a normal lunch. For someone who tries to avoid carbs it&rsquo;s nerving to think how many days will be spent feeling like crap from all that bread. I guess this is my own problem for not preparing and bringing something to eat. Still, from all my experience I personally hate Dutch food, not my cuisine.</p>

<p>On first day I was attending <a href="https://joind.in/talk/view/14190">Introduction to Event Sourcing and CQRS</a> by <a href="https://twitter.com/beausimensen">Beau D. Simensen</a> &amp; <a href="https://twitter.com/willemjanz">Willem-Jan Zijderveld</a>. Lately I&rsquo;m very into Domain Driven Design and similar ways of improving applications so this workshop gave a good introduction into CQRS. The first part of workshop was explaining all the principles. Found that trying to follow the host and do it on my own laptop wasn&rsquo;t very easy due to it going too fast and having some issues. After deciding to just follow the host found the experience much better. This allowed to focus better on that is going on rather than trying to multi-task. The second part of the workshop was doing the same things, but using Broadway library. Think the workshop was well done. It might be better if the git repository was tagged after each step, so for anyone trying to follow along if they are getting behind they could just checkout the step being currently done.</p>

<p>After the workshops anyone who wanted could attend code night. During it you could work on one of available open source projects helping to improve them. It had drinks, pizza and great people to talk &amp; work with. At the end of code night during the raffle it was possible to win some prizes. It was well organized and think the code night was a success. Watch the time lapse videos of it (<a href="https://www.youtube.com/watch?v=ShfMqa57PMM">part 1</a> &amp; <a href="https://www.youtube.com/watch?v=R4d04rImZAU">part 2</a>).</p>

<p>The conference had a lot of sponsors. You could play games, pick up swag, learn about new tools in sponsor booths. At the end of the conference it was possible to win prizes through the raffle.</p>

<p>Only the second talk was delayed by 15 minutes, but otherwise all conference run like well maintained clock. All talks were on time, none went over, good amount of breaks between tasks.</p>

<p>For each time slot 5 different talks were going at the same time. For anyone interested an un-official talks were available. The talks were very well done with all/most of the problems fixed (from the talks I attended). The talks weren&rsquo;t just about PHP so you could always choose topics which interest you most (devops, testing, JavaScript, CSS, etc.).</p>

<p>The opening keynote was <a href="https://joind.in/talk/view/14478">Hacking Foresight from Hindsight</a> by <a href="https://twitter.com/joshholmes">Josh Holmes</a>. The important point of the talk was that we shouldn&rsquo;t try to do everything ourselves and should try to find mentors who will help us grow faster professionally &amp; personally.</p>

<p>For the first talk I went to <a href="https://joind.in/talk/view/14208">Get some hypermedia up in your API</a> by <a href="https://twitter.com/victorwelling">Victor Welling</a>. During it he explained how to solve problems like documentation, versioning, visibility of your API by extending with with HAL.</p>

<p>I&rsquo;m a tall guy and ergonomically it&rsquo;s more comfortable to stay farther away from the screen. At that moment decided to experiment with sitting in the front rows. You don&rsquo;t need to spend all the time looking at the screen and found that I enjoyed having a closer proximity/relationship with a speaker much more than being able to see the screen all the time.</p>

<p>The second talk I chose was <a href="https://joind.in/talk/view/14211">Automation made simple with Ansible</a> by <a href="https://twitter.com/erikaheidi">Erika Heidi</a>. I played a little with Ansible before. Repetition helps with retaining information. The talk gradually explains what is possible with Ansible and after it you should be in a good position to play around with it in your projects. After talking with Erika between talks, I think now I know how my phone feels when I plug it to charge the batteries. She is a very positive girl and talking with her you can feel your own batteries charging.</p>

<p>Had a hard choice for third talk as Mathias Verraes &amp; Matthias Noback was talking at the same slot. Chose to go to <a href="https://joind.in/talk/view/14214">Towards Modelling Processes</a> by <a href="https://twitter.com/mathiasverraes">Mathias Verraes</a>. Talk had a simulated event storming and the main point of talk was explaining how to think in temporal model, not just structural.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18667538394" title="DPC15 - Towards Modelling Processes by Mathias Verraes by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/256/18667538394_8203dbba5e_z.jpg" width="640" height="480" alt="DPC15 - Towards Modelling Processes by Mathias Verraes"></a></p>

<p>Was a little late for <a href="https://joind.in/talk/view/14219">Command Bus to Awesome Town</a> by <a href="https://twitter.com/rosstuck">Ross Tuck</a> talk. The speaker was lively with enough jokes between the slides. The talk explained what is command bus &amp; why/how you might want to use one in your project.</p>

<p>During the conference I went to enough talks about event sourcing and similar topics, but going to <a href="https://joind.in/talk/view/14226">Let&rsquo;s Write Some History!</a> by <a href="https://twitter.com/willemjanz">Willem-Jan Zijderveld</a> helped me to understand a few more concepts I was missing/confused.</p>

<p>For last first day talk I chose <a href="https://joind.in/talk/view/14231">Journey into your Lizard Brain</a> by <a href="https://twitter.com/rdohms">Rafael Dohms</a>. During it he shared a personal story, explained how developers think &amp; gave tips on how to become a better developer. One of the most important points in my opinion would be to focus on the current moment. I think conferences could have more of &ldquo;soft&rdquo; talks as I find them refreshing when mixed with technical talks.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18667539664" title="DPC15 - Journey into your Lizard Brain by Rafael Dohms by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/469/18667539664_38611826a4_z.jpg" width="640" height="480" alt="DPC15 - Journey into your Lizard Brain by Rafael Dohms"></a></p>

<p>The Conference Social was at Akhnaton. Organizers provided directions how to get from venue to it. It was easy to find the bar and after arrival everyone received drink tokens. Received enough tokens to spend the rest of the evening with a bottle of water in my hand (might be a different experience depending on your drinking habits).</p>

<p>The day before I decided to skip the morning talk. Even thought woke up refreshed I&rsquo;m trying to learn to make a decision and keep with it (unless the situation changes).</p>

<p>For second talk I went to <a href="https://joind.in/talk/view/14238">Hexagonal architecture &ndash; message-oriented software design</a> by <a href="https://twitter.com/matthiasnoback">Matthias Noback</a>. The talk was well paced, explaining how to improve your applications by focusing on messages.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19293946821" title="DPC15 - Hexagonal architecture - message-oriented software design by Matthias Noback by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/445/19293946821_426765221f_z.jpg" width="640" height="480" alt="DPC15 - Hexagonal architecture - message-oriented software design by Matthias Noback"></a></p>

<p>I think the composer is a wonderful tool making my life much easier. I think I know enough of it to do what is needed and advise others of best practices (like using CLI and not editing JSON file). It never hurts to make sure so I went to <a href="https://joind.in/talk/view/14245">Composer The Right Way</a> by <a href="https://twitter.com/rdohms">Rafael Dohms</a>. The talk explained some parts which you might not use so often &amp; how to use composer better. If you don&rsquo;t use composer (or know what it is) stop making your life harder!</p>

<p>For the fourth talk was thinking about going to <a href="https://joind.in/talk/view/14248">Implement Single Sign On easily with Symfony</a> by <a href="https://twitter.com/Saro0h">Sarah Khalil</a>. When considered that can&rsquo;t think of anything were I would need to implement it in the near future and need to mix a less technical talk for better ratio. Went to <a href="https://joind.in/talk/view/14249">Software architecture in an agile age</a> by <a href="https://twitter.com/harrieverveer">Harrie Verveer</a>. Maybe it&rsquo;s the trauma from college when had to do a lot of UML diagrams or maybe being sleepy after lunch, but expected a little more from the talk. It was still a good talk explaining how to work better on your projects. I agree with most important idea what no matter which format you use it&rsquo;s good to make at least few notes/diagrams before you start building things.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19284034222" title="DPC15 - Software architecture in an agile age by Harrie Verveer by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/357/19284034222_5f5d050fb2_z.jpg" width="640" height="480" alt="DPC15 - Software architecture in an agile age by Harrie Verveer"></a></p>

<p>For last talk chose to go to <a href="https://joind.in/talk/view/14253">Adding 1.21 Gigawatts to Application with RabbitMQ</a> by <a href="https://twitter.com/asgrim">James Titcumb</a>. The talk is very technical with code examples and at some points it can feel a little dry. We talked with a speaker about how it can be improved. The talk explains very well how to use RabbitMQ in your projects, including pitfalls to avoid.</p>

<p>The closing keynote <a href="https://joind.in/talk/view/14639">Behind the Scenes of Maintaining an Open Source Project</a> was done by <a href="https://twitter.com/seldaek">Jordi Boggiano</a> about how open source project looks behind the scenes. He went through different stages of it (maintenance, anger, etc.) including anecdotes and personal stories. Staying behind the screen we often forget about the world behind our backs and that open source is only possible thanks to the community and people who spend their energy &amp; time.</p>

<p>I enjoyed the conference a lot and really happy about attending it. It&rsquo;s was nice to put Twitter/GitHub profiles with real people. Would like to thank the organizers, speakers, audience for three great days of new experiences &amp; sharing knowledge. In the end I would like to borrow (in other words steal) the quote from <a href="https://twitter.com/michellesanver">Michelle Sanver</a> which summarizes what is a conference very well &ndash; &ldquo;<em><a href="https://blog.liip.ch/archive/2015/02/10/conferences-that-are-parties-with-talks-phpbenelux-and-sunshinephp.html">A conference is a party with talks</a></em>&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure phpspec for DDD]]></title>
    <link href="http://ifdattic.com/configure-phpspec-for-ddd"/>
    <updated>2015-06-24T08:16:35+03:00</updated>
    <id>http://ifdattic.com/configure-phpspec-for-ddd</id>
    <content type="html"><![CDATA[<p>A lot of my architecture for DDD is taken from <a href="http://programmingarehard.com/">David Adams</a>, <a href="http://verraes.net/">Mathias Verraes</a>, <a href="http://williamdurand.fr/">William Durand</a> &amp; other smart people.</p>

<p>While developing an application I try to keep the code separated. I also love testing and one wonderful tool which helps me produce good quality code is <a href="http://www.phpspec.net/">phpspec</a>. The issue is what by default it keeps all the tests in the root directory.</p>

<p>phpspec requires some configuration to keep the tests where they belong. You might notice that I&rsquo;m using Symfony framework for my application. When you do DDD development the framework used isn&rsquo;t that important. My domain login is kept in <code>src/Domain</code> directory &amp; infrastructure code is kept as bundles in <code>src</code> directory.</p>

<p>The following configuration is required to make phpspec work correctly (finding specs, creating/updating specs, running specs):</p>

<p>```yml
suites:</p>

<pre><code>core_suite:
    namespace: Domain\Core
    psr4_prefix: Domain\Core
    spec_path: src/Domain/Core
    src_path: src/Domain/Core
    spec_prefix: Spec

user_infrastructure_suite:
    namespace: UserBundle
    psr4_prefix: UserBundle
    spec_path: src/UserBundle
    src_path: src/UserBundle
    spec_prefix: Spec

user_suite:
    namespace: Domain\User
    psr4_prefix: Domain\User
    spec_path: src/Domain/User
    src_path: src/Domain/User
    spec_prefix: Spec
</code></pre>

<p>```</p>

<p>Save the file as <code>phpspec.yml</code> in root directory.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18485964273" title="Configure phpspec for DDD by Andrew Marcinkevičius, on Flickr"><img src="https://c4.staticflickr.com/4/3898/18485964273_ac0e4e5e5b_z.jpg" width="640" height="296" alt="Configure phpspec for DDD"></a></p>

<p>If you would run:</p>

<p><code>bash
phpspec describe Domain/User/ValueObject/UserName
</code></p>

<p>It should create a file <code>UserNameSpec.php</code> in <code>src/Domain/User/Spec/ValueObject</code>.</p>

<p>Some lines in suites might look like duplication, but I found that you have to set all the options. Otherwise there are issues with file creation/updating. You could skip <code>spec_prefix</code> option if you don&rsquo;t mind specifications directory in lowercase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spy Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/spy-test-double-using-prophecy"/>
    <updated>2015-05-20T13:47:25+03:00</updated>
    <id>http://ifdattic.com/spy-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Spy is a test double which records its actions. After code execution you can check if interaction is as expected. You use it to make sure the method(s) was called.</p>

<p>Below is the class which has an optional dependency which is called:</p>

<p>```php
&lt;?php</p>

<p>namespace App;</p>

<p>class Questioner
{</p>

<pre><code>private $output;
private $questions = [];
private $scorer;

public function __construct(OutputInterface $output, ScorerInterface $scorer = null)
{
    $this-&gt;output = $output;
    $this-&gt;scorer = $scorer;
}

/** @return int */
public function getQuestionsCount()
{
    return 0;
}

/**
 * Save under a new name.
 *
 * @param  string $name
 * @return boolean
 */
public function saveAs($name)
{
    $saved = $this-&gt;output-&gt;save($this-&gt;questions, $name);

    if ($saved &amp;&amp; $this-&gt;scorer) {
        $this-&gt;scorer-&gt;update();
    }

    return $saved;
}
</code></pre>

<p>}
```</p>

<p>To check that the <code>update()</code> method on <code>Scorer</code> is called use the following spy test double:</p>

<p>```php
&lt;?php</p>

<p>namespace tests;</p>

<p>use App\Output;
use App\Questioner;
use App\Scorer;
use Prophecy\Argument;</p>

<p>class QuestionerTest extends \PHPUnit_Framework_TestCase
{</p>

<pre><code>// ...

/**
 * @test
 */
function score_is_updated_on_save()
{
    $outputStub = $this-&gt;prophesize(Output::CLASS);
    $outputStub-&gt;save([], Argument::type('string'))-&gt;willReturn(true);
    $scorerSpy = $this-&gt;prophesize(Scorer::CLASS);
    $questioner = new Questioner($outputStub-&gt;reveal(), $scorerSpy-&gt;reveal());

    $questioner-&gt;saveAs('any name');

    $scorerSpy-&gt;update()-&gt;shouldHaveBeenCalled();
}
</code></pre>

<p>}
```</p>

<p>This article is from the **Test doubles using Prophecy** series which is made from following articles:

* [Dummy Test Double Using Prophecy](/dummy-test-double-using-prophecy)
* [Stub Test Double Using Prophecy](/stub-test-double-using-prophecy)
* [Spy Test Double Using Prophecy](/spy-test-double-using-prophecy)
* [Mock Test Double Using Prophecy](/mock-test-double-using-prophecy)
* [Fake Test Double Using Prophecy](/fake-test-double-using-prophecy)
</p>
]]></content>
  </entry>
  
</feed>
