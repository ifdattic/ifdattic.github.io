<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/technical/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-01-27T16:51:48+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top 11 AWS IAM Best Practices]]></title>
    <link href="http://ifdattic.com/top-11-aws-iam-best-practices"/>
    <updated>2016-01-27T15:37:51+02:00</updated>
    <id>http://ifdattic.com/top-11-aws-iam-best-practices</id>
    <content type="html"><![CDATA[<p>AWS Identity and Access Management (IAM) enables you to control access to AWS services and resources. Following few best practices makes sure that your account is secure and easy to manage.</p>

<h2>1. Users &ndash; Create individual users</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Unique credentials</li>
<li>Individual credential rotation</li>
<li>Individual permissions</li>
</ul>


<h2>2. Groups &ndash; Manage permissions with groups</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Easier to assign the same permissions to multiple users</li>
<li>Simpler to re-assign permissions based on change in responsibilities</li>
<li>Only one change to update permissions for multiple users</li>
</ul>


<h2>3. Permissions &ndash; Grant least privilege</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>More granular control</li>
<li>Less chance of people making mistakes</li>
<li>Easier to relax than to tighten up</li>
</ul>


<h2>4. Auditing &ndash; Enable AWS CloudTrail to get logs of API calls</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Visibility into your user activity by recording AWS API calls to an Amazon S3 bucket</li>
</ul>


<h2>5. Passwords &ndash; Configure a strong password policy</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Ensures your users and your data are protected</li>
</ul>


<h2>6. MFA &ndash; Enable MFA for privileged users</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Supplements username and password to require a one-time code during authentication</li>
</ul>


<h2>7. Roles &ndash; Use IAM roles for EC2 instances</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Easy to manage access keys on EC2 instances</li>
<li>Automatic key rotation</li>
<li>Assign least privilege to the application</li>
<li>AWS SDKs fully integrated</li>
</ul>


<h2>8. Sharing &ndash; Use IAM roles to share access</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>No need for security credentials</li>
<li>Easy to break sharing relationship</li>
<li>Use cases (cross-account access, intra-account delegation, federation)</li>
</ul>


<h2>9. Rotation &ndash; Rotate security credentials regularly</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Normal best practice</li>
</ul>


<h2>10. Conditions &ndash; Restrict privileged access further with conditions</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Additional granularity when defining permissions</li>
<li>Can be enabled for any AWS service API</li>
<li>Minimizes accidentally performing privileged actions</li>
</ul>


<h2>11. Root &ndash; Reduce/remove use of root</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Reduce potential for misuse of credentials</li>
</ul>


<p>You can get all of them as a check list at this <a href="https://trello.com/c/9cW2qarm/2-top-11-aws-iam-best-practices">public Trello card</a>.</p>

<p>This is the reference post from the <a href="https://www.youtube.com/watch?v=tTJrbsu_Wzc">https://www.youtube.com/watch?v=tTJrbsu_Wzc</a> and <a href="https://www.youtube.com/watch?v=ZhvXW-ILyPs">https://www.youtube.com/watch?v=ZhvXW-ILyPs</a> videos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a Tunnel to Local Machine with ngrok]]></title>
    <link href="http://ifdattic.com/how-to-create-tunnel-with-ngrok"/>
    <updated>2015-12-23T08:15:17+02:00</updated>
    <id>http://ifdattic.com/how-to-create-a-tunnel-to-local-machine-with-ngrok</id>
    <content type="html"><![CDATA[<p>When developing applications sometimes you need to access your current application using external sources. For example you want to test an application using a mobile device or how your application responds to a webhook. You could deploy your application on the publicly accessible server, but it will make development slow, having to deploy on each change.</p>

<p>The solution would be to create a tunnel to a local server on your machine. This way you could test your application on the mobile devices, show it to the clients, test webhooks. All of this can be achieved with <a href="https://ngrok.com/">ngrok</a>.</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#sample-application">Sample application</a></li>
<li><a href="#installing">Installing ngrok</a></li>
<li><a href="#http-tunnel">Creating local HTTP tunnel</a></li>
<li><a href="#tcp-tunnel">Creating local TCP tunnel</a></li>
<li><a href="#configuring">Configuring ngrok</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>


<p><a name="sample-application"></a></p>

<h2>Sample application</h2>

<p>You can create a tunnel for any web server.</p>

<p>For this article the simple Express.js application will be used. It has two routes for receiving <code>GET</code> and <code>POST</code> requests. You can find the code on <a href="https://github.com/ifdattic/ngrok-article-code">GitHub</a></p>

<p>```javascript
&lsquo;use strict&rsquo;;</p>

<p>const express = require(&lsquo;express&rsquo;);
const bodyParser = require(&lsquo;body-parser&rsquo;);
const app = express();</p>

<p>app.use(bodyParser.urlencoded({extended: false}));</p>

<p>app.get(&lsquo;/&rsquo;, function (request, response) {</p>

<pre><code>response.send('Hello');
</code></pre>

<p>});</p>

<p>app.post(&lsquo;/&rsquo;, function (request, response) {</p>

<pre><code>response.send(request.body);
</code></pre>

<p>});</p>

<p>app.listen(3000);</p>

<p>console.log(&lsquo;Open: <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a>&rsquo;);
```</p>

<p>To launch the server execute the following command (<a href="https://nodejs.org">Node.js</a> is required):</p>

<p><code>bash
node server.js
</code></p>

<p><a name="installing"></a></p>

<h2>Installing ngrok</h2>

<p>ngrok is easy to install and works on all major platforms. <a href="https://ngrok.com/download">Download</a> the archive, unzip it, and run it. If you want to run it from any location move it to a directory which is in your <code>PATH</code> (e.g., <code>/usr/local/bin</code>).</p>

<p>Run <code>ngrok -h</code> to make sure it works and to get the documentation on how to use it.</p>

<p><a name="http-tunnel"></a></p>

<h2>Creating local HTTP tunnel</h2>

<p>To expose the web server simply provide the port number it is running on:</p>

<p><code>bash
ngrok http 3000
</code></p>

<p>It will give you the URL to your tunnel and statistics.</p>

<p>If you will make a request to an URL you should get the response (replace the URL with one you got).</p>

<p>```bash
curl <a href="http://7711dd0d.ngrok.io">http://7711dd0d.ngrok.io</a></p>

<p>curl <a href="http://7711dd0d.ngrok.io">http://7711dd0d.ngrok.io</a> -d name=Andrew
```</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23840463581/in/dateposted-public/" title="ngrok-http-tunnel"><img src="https://farm6.staticflickr.com/5705/23840463581_2e6551dcb3_o.gif" width="1082" height="300" alt="ngrok-http-tunnel"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>ngrok provides the real-time web UI from which you can inspect the HTTP traffic for the tunnel. Open the URL provided by the created tunnel. From this web interface you can see all the information about requests and responses made.</p>

<p>One great feature which will be very handy when integrating webhooks is an ability to replay requests. This way you don&rsquo;t need to do anything to trigger the webhook; you could just replay the request after making changes.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23840462921/in/dateposted-public/" title="ngrok-replay-request"><img src="https://farm6.staticflickr.com/5797/23840462921_0ff96d97f3_o.gif" width="1160" height="580" alt="ngrok-replay-request"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>If you would like to add some basic protection to avoid anyone accessing your web server you can add an HTTP Basic Authentication:</p>

<p><code>bash
ngrok http -auth="username:password" 3000
</code></p>

<p>Replace the <code>username</code> and <code>password</code> with credentials you want.</p>

<p>If you want to use advanced features of ngrok (like having custom subdomain or running from your domain) you will need an ngrok account and a paid plan.</p>

<p><a name="tcp-tunnel"></a></p>

<h2>Creating local TCP tunnel</h2>

<p>With ngrok you can expose SSH, database or some other service which runs over TCP. For example you could expose the MongoDB database running on your machine:</p>

<p><code>bash
ngrok tcp 27017
</code></p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23922941705/in/dateposted-public/" title="ngrok-tcp-tunnel"><img src="https://farm2.staticflickr.com/1534/23922941705_f4d1692373_o.gif" width="1077" height="262" alt="ngrok-tcp-tunnel"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p><a name="configuring"></a></p>

<h2>Configuring ngrok</h2>

<p>ngrok can be configured using YAML configuration file. If no configuration file is provided the ngrok will try to load one from a default location (<code>$HOME/.ngrok2/ngrok.yml</code>).</p>

<p>By using <code>-config</code> option an explicit configuration file can be provided. It&rsquo;s possible to provide multiple configuration files and they are merged on top of each other. This way you can have global and project settings.</p>

<p><code>bash
ngrok http -config ~/.ngrok2/ngrok.yml -config project-config.yml 3000
</code></p>

<p>The most common use for configuration file is defining tunnels. Tunnels are defined under the <code>tunnels</code> property in the configuration file:</p>

<p>```yml
tunnels:</p>

<pre><code>app:
    proto: http
    addr: 3000
    bind_tls: false
app-protected:
    proto: http
    addr: 3000
    auth: "username:password"
mongo:
    proto: tcp
    addr: 27017
</code></pre>

<p>```</p>

<p>To start the tunnel provide the name of the tunnel:</p>

<p><code>bash
ngrok start -config ~/.ngrok2/ngrok.yml -config project-config.yml app-protected
</code></p>

<p>To start all the defined tunnels use <code>--all</code> switch:</p>

<p><code>bash
ngrok start -config ~/.ngrok2/ngrok.yml -config project-config.yml --all
</code></p>

<p><a name="conclusions"></a></p>

<h2>Conclusions</h2>

<p>This should be enough to take care of the most use cases you will need. ngrok probably won&rsquo;t be the tool you will be using everyday (depends on what you work on). For those days when you need to test a webhook or from another device you will be great for having ngrok in your toolbox.</p>

<p>Do you have a story of when a local tunnel helped / would have helped to solve your problem?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration of Node.js Project Using Shippable]]></title>
    <link href="http://ifdattic.com/continuous-integration-nodejs-project-using-shippable"/>
    <updated>2015-12-08T11:02:05+02:00</updated>
    <id>http://ifdattic.com/continuous-integration-of-node-dot-js-project-using-shippable</id>
    <content type="html"><![CDATA[<p>A while ago I wrote an article <a href="/continuous-integration-php-project-using-shippable">how to use Shippable as continuous integration service for PHP project</a>. This is similar article except that it is for a Node.js project.</p>

<p>One of the biggest benefits of Shippable is that you are able to test private repository before needing to pay for it (good for hobby projects which you don&rsquo;t know there they might lead).</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#initial-config">Initial configuration</a></li>
<li><a href="#environment-variables-mongodb">Environment variables &amp; MongoDB</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#update-nodejs-version">Update Node.js version</a></li>
<li><a href="#enable-project">Enable project in Shippable</a></li>
<li><a href="#code-coverage">Code coverage</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>To start using this service you just need to sign up using your GitHub or BitBucket account. If you want to test private repositories you will have to give Shippable permission to them (by default it only sees public repositories). The code used in this article is available at <a href="https://github.com/ifdattic/javascript-shippable-ci-article-code">GitHub</a>. It&rsquo;s an Express.js project, but with small changes any Node.js project could be tested.</p>

<h2>Initial configuration <a name="initial-config"></a></h2>

<p>Your project needs to have a <code>shippable.yml</code> configuration file. In it you define scripts which will be run, environment variables, language, versions to test, etc.</p>

<p>First let&rsquo;s configure Shippable to test a Node.js project and do it for <code>5.1.1</code> version. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
language: node_js</p>

<p>node_js:</p>

<pre><code>- 5.1.1
</code></pre>

<p>```</p>

<p>To have our project working we need to install modules using <code>npm</code>:</p>

<p>```yml
before_script:</p>

<pre><code>- npm install
</code></pre>

<p>```</p>

<h2>Environment variables &amp; MongoDB <a name="environment-variables-mongodb"></a></h2>

<p>The application uses MongoDB for persistence. It&rsquo;s very easy to include services with Shippable.</p>

<p>You don&rsquo;t want to hard code configuration variables for your application. To fix that we will use the environment variables to configure the application depending on the environment it is in. You can set the global environment variables which are the same between builds and you can set simple environment variables which are different between builds (extending your testing matrix). If you have environment variables which you don&rsquo;t want to show (like passwords) you can add it as a secure environment variable.</p>

<p>To get the secure environment variable you need to go to project settings. It has a panel &ldquo;Encrypt.&rdquo; You provide the environment variables in the box and after clicking &ldquo;Encrypt&rdquo; you get the snippet of code you can paste in your <code>shippable.yml</code> file.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23308845230/in/dateposted-public/" title="shippable-secure-environment-variable"><img src="https://farm1.staticflickr.com/677/23308845230_5b6041b93f_c.jpg" width="800" height="530" alt="shippable-secure-environment-variable"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Then add the environment variable and MongoDB service to <code>shippable.yml</code> file:</p>

<p>```yml
env:</p>

<pre><code>global:
    - XUNIT_FILE=shippable/testresults/result.xml
    # MongoDB URL
    - secure: lPx/1fe8RFUSPv1F1D3Fujd14afop7NPSAF6IirmO4YbfRc3MkiTHbkSuiQzniOccC5TC2kd1//hdBd9vnSOCVpS1+3Xs4ZVKj8VfnN2nEokMTnHGYuwB36tW1js/u734NKBl+R5se+140bAORjcrpxcSyQjlDDCCdgZbx00M2FvX4kDPXtZ17z9h2eViC70im5q4qoapzsu1+6U6BjAYnF+QAGoxBe1X3FOjlOgRo/G4/Z6E8nVgNMnx5jqX380ImSC8Hsy7D8MX6U0NelnhjBSc3NrWVYbCNNYVWQA4Zw8aXlZzf3gPF0zhdGt1eBUPgNmxJyXCF4rxsfQjI99zA==
</code></pre>

<p>services:</p>

<pre><code>- mongodb
</code></pre>

<p>```</p>

<p>At the moment of writing there is issues while connecting to the default MongoDB service. If you have the same issue you might need to install the MongoDB manually. To do that add the <code>installMongo.sh</code> script to your repository:</p>

<p>```bash</p>

<h1>!/bin/bash -x</h1>

<p>sudo apt-key adv &mdash;keyserver hkp://keyserver.ubuntu.com:80 &mdash;recv 7F0CEB10</p>

<p>echo &lsquo;deb <a href="http://downloads-distro.mongodb.org/repo/ubuntu-upstart">http://downloads-distro.mongodb.org/repo/ubuntu-upstart</a> dist 10gen&rsquo; | sudo tee /etc/apt/sources.list.d/mongodb.list
sudo apt-get update
sudo apt-get install -y mongodb-org=2.6.11 mongodb-org-server=2.6.11 mongodb-org-shell=2.6.11 mongodb-org-mongos=2.6.11 mongodb-org-tools=2.6.11</p>

<p>sudo mkdir -p /data/db</p>

<h1>Pin the current version</h1>

<p>sudo echo &ldquo;mongodb-org hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-server hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-shell hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-mongos hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-tools hold&rdquo; | sudo dpkg &mdash;set-selections</p>

<h1>replace closed port &amp; bing IP</h1>

<p>sudo sed -i &rsquo;s/#port = 27017/port = 27017/&lsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/bind_ip = 127.0.0.1/bind_ip = 0.0.0.0/&rsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/# nojournal = true/nojournal = true/&lsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/#noprealloc = true/noprealloc = true/&rsquo; /etc/mongod.conf
```</p>

<p>And extend your <code>shippable.yml</code> with:</p>

<p>```yml
install:</p>

<pre><code>- . installMongo.sh
- sudo mongod --smallfiles &gt; /dev/null &amp;
</code></pre>

<p>```</p>

<h2>Testing <a name="testing"></a></h2>

<p>The tests are run through custom <code>npm</code> script. Add the following to run the tests:</p>

<p>```yml
script:</p>

<pre><code>- npm run shippable
</code></pre>

<p>```</p>

<h2>Update Node.js version <a name="update-nodejs-version"></a></h2>

<p>At the time of writing Shippable doesn&rsquo;t provide Node.js versions 4 or higher. To fix that add the following which will update and NVM and install the correct Node.js version.</p>

<p>```yml
build_image: shippableimages/ubuntu1404_nodejs</p>

<p>before_install:</p>

<pre><code>- sudo apt-get install -y --force-yes build-essential
- curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.27.1/install.sh | bash
- source ~/.nvm/nvm.sh &amp;&amp; nvm install $SHIPPABLE_NODE_VERSION
- node --version
</code></pre>

<p>```</p>

<h2>Enable project in Shippable <a name="enable-project"></a></h2>

<p>First choose the subscription to use and when in projects section click the big plus icon which says &ldquo;Enable Project.&rdquo;</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23495966402/in/dateposted-public/" title="shippable-choose-subscription"><img src="https://farm1.staticflickr.com/628/23495966402_66458459ef_o.png" width="311" height="85" alt="shippable-choose-subscription"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Force a synchronization if the repository you want is not in the list. Click on key icon to enable the project.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23495966152/in/dateposted-public/" title="shippable-enable-project"><img src="https://farm6.staticflickr.com/5693/23495966152_b074facd7d_c.jpg" width="800" height="744" alt="shippable-enable-project"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>After it is done you can manually start a build or it will happen automatically the next time you will push a commit.</p>

<p>After a while a build should finish and you should get the similar view.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23236632269/in/dateposted-public/" title="shippable-build"><img src="https://farm6.staticflickr.com/5810/23236632269_6400f9a983_c.jpg" width="800" height="509" alt="shippable-build"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Code coverage <a name="code-coverage"></a></h2>

<p>If you need code coverage for your code you can do it with Istanbul. Replace the <code>shippable</code> script in <code>package.json</code> with:</p>

<p><code>
./node_modules/.bin/istanbul cover _mocha --dir shippable/codecoverage --report cobertura -- -R xunit-file
</code></p>

<h2>Conclusion <a name="conclusion"></a></h2>

<p>With these small changes you should have a CI testing for your application. It will improve your code quality and give you a piece of mind knowing that the changes you made will be tested even if you forgot to run the tests on your development machine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm Shortcut Keys]]></title>
    <link href="http://ifdattic.com/iterm-shortcut-keys"/>
    <updated>2015-11-04T17:26:09+02:00</updated>
    <id>http://ifdattic.com/iterm-shortcut-keys</id>
    <content type="html"><![CDATA[<p>If you use Mac OSX and do a lot of work in terminal the <a href="https://www.iterm2.com">iTerm</a> application will become your friend fast. It&rsquo;s a great terminal application and it would be hard to imagine my days without it.</p>

<p>Once you learn a few shortcut keys and develop your personal work flow you would hardly want to leave that black (differs) window.</p>

<p>Below is some of the shortcut keys I use.</p>

<h2>Working with multiple terminals</h2>

<p>It&rsquo;s rare occasion having only one terminal open as often I&rsquo;m working with multiple projects / tools at the same time. Sometimes even if I&rsquo;m not using something at the moment (or in the last few days / weeks) the terminal windows are left as is (often to avoid going to the needed directory). And sometimes you just need to try something fast and close it. Following shortcuts allow me to open new terminals, move between them, close once I&rsquo;m done with it.</p>

<blockquote><p>New Tab <code>⌘T</code></p>

<p>Previous Tab <code>⌘←</code></p>

<p>Next Tab <code>⌘→</code></p>

<p>Close tab <code>⌘w</code></p></blockquote>

<p>You could move the tabs around using the following shortcut keys, but I rarely use them.</p>

<blockquote><p>Move Tab Right <code>⇧⌘→</code></p>

<p>Move Tab Left <code>⇧⌘←</code></p></blockquote>

<h2>Working with multiple terminals in same tab</h2>

<p>Opening a new tab takes care of the most use cases, but sometimes there&rsquo;s a need to see multiple terminals at the same time. The splitting the tab shortcut keys are the lifesaver in those moments. You can go crazy with splitting the current tab (if you need to)!</p>

<blockquote><p>Split Vertically with Current Profile <code>⌘D</code></p>

<p>Split Horizontally with Current Profile <code>⇧⌘D</code></p></blockquote>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22596362330/in/dateposted-public/" title="iterm-split-windows-go-crazy"><img src="https://farm6.staticflickr.com/5658/22596362330_9a8d2fabed_c.jpg" width="733" height="800" alt="iterm-split-windows-go-crazy"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Your performance would suffer a lot if you had to use the mouse to use any of those terminals. For that problem the shortcut keys to move between the panes solve it.</p>

<blockquote><p>Next Pane <code>⌘]</code></p>

<p>Previous Pane <code>⌘[</code></p></blockquote>

<p>You can also move between panes directionally. Most of the time I can&rsquo;t remember the shortcut keys for it, previous/next pane works great, rarely have more than 2 panes at the time.</p>

<blockquote><p>Select Pane Above <code>⌥⌘↑</code></p>

<p>Select Pane Below <code>⌥⌘↓</code></p>

<p>Select Pane Left <code>⌥⌘←</code></p>

<p>Select Pane Right <code>⌥⌘→</code></p></blockquote>

<h2>Interacting with the terminal</h2>

<p>The following shortcut keys are not used that often (sometimes due to failing personal memory). They do come in handy from time to time when you need to do something with the output which is in terminal.</p>

<blockquote><p>Clear Buffer <code>⌘K</code></p>

<p>Scroll Up <code>⇧Page Up</code></p>

<p>Scroll Down <code>⇧Page Down</code></p>

<p>Find&hellip; <code>⌘F</code></p></blockquote>

<h2>Changing font size</h2>

<p>The iTerm on my machine is configured to my liking and works for almost all the use cases. For that reason it&rsquo;s rare to change the font size. If you&rsquo;re making a presentation, recording screen cast or your eyes are tired shortcut keys for changing font size solves that problem.</p>

<blockquote><p>Make Text Bigger <code>⌘+</code></p>

<p>Make Text Normal Size <code>⌘0</code></p>

<p>Make Text Smaller <code>⌘-</code></p></blockquote>

<h2>Custom shortcuts keys</h2>

<p>You can change global shortcut keys from profile preferences <code>Keys</code> tab. One shortcut key I find useful is deleting the last word. It uses the <code>⌘←Delete</code> as keyboard shortcut and sends the <code>0x1B 0x08</code> hex code (action).</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/22841825873/in/dateposted-public/" title="iterm-custom-shortcut-key"><img src="https://farm1.staticflickr.com/597/22841825873_9521a2502d_c.jpg" width="800" height="464" alt="iterm-custom-shortcut-key"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Conclusion</h2>

<p>These are the shortcut keys I use daily with iTerm. Learning shortcut keys for any application can move you to a power user level and improve your productivity a lot. The problem is remembering all of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration of PHP Project Using Shippable]]></title>
    <link href="http://ifdattic.com/continuous-integration-php-project-using-shippable"/>
    <updated>2015-08-24T14:14:23+03:00</updated>
    <id>http://ifdattic.com/continuous-integration-of-php-project-using-shippable</id>
    <content type="html"><![CDATA[<p>Recently I started using <a href="https://app.shippable.com/">Shippable</a> as my continuous integration service. It adds a lot to peace of mind knowing that your tests are always run (even if you forget to do it on your local environment) and you have another point of failure for your application.</p>

<p>The biggest reason I chose Shippable is that it has a sane pricing. You get one concurrent build for free and this includes the private repositories. This works great for side projects which you don&rsquo;t want to make public, but want to use good tools without a lot of hassle. If the project picks up and you need more hamster power it&rsquo;s easy to ramp it up without having to sell a kidney or two. For those wanting to say that &ldquo;We need to charge that much to provide good service&rdquo; I understand that and I personally look with one eyebrow raised at software which is just free (business needs to make money to survive). Just that for simple side projects (hobby) that will probably won&rsquo;t bring even a dollar spending hundreds a month is not a best financial decision.</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#initial-config">Initial configuration</a></li>
<li><a href="#phpunit-testing">PHPUnit testing</a></li>
<li><a href="#enable-project">Enable project in Shippable</a></li>
<li><a href="#phpspec-testing">phpspec testing</a></li>
<li><a href="#behat-testing">Behat testing</a></li>
<li><a href="#environment-variables-mysql">Environment variables &amp; MySQL</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>To start using this service you just need to sign up using your GitHub or BitBucket account. If you want to test private repositories you will have to give Shippable permission to them (by default it only sees public repositories). The code used in this article is available at <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code">GitHub</a>. It&rsquo;s a Symfony project, but with small changes any PHP project could be tested.</p>

<h2>Initial configuration <a name="initial-config"></a></h2>

<p>Your project needs to have a <code>shippable.yml</code> configuration file. In it you define scripts which will be run, environment variables, language, versions to test, etc.</p>

<p>First let&rsquo;s configure Shippable to test a PHP project and do it for <code>5.5</code> &amp; <code>5.6</code> versions. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
language: php</p>

<p>php:</p>

<pre><code>- 5.5
- 5.6
</code></pre>

<p>```</p>

<p>Just in case it might be helpful to have the application log files (in case the build is failing and you&rsquo;re not sure why). You can tell shippable to save the artifacts from a build and make it available for download using the <code>archive</code> option. The <code>shippable</code> directory is a special one were all the files from build is being kept (like test coverage reports, etc.). Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
archive: true</p>

<p>after_script:</p>

<pre><code>- cp -r ./app/logs shippable/logs
</code></pre>

<p>```</p>

<p>This will create an archive for download after the build is done. The <code>after_script</code> is commands which are run after the build and they will not affect the status of the build.</p>

<p>To have our project working we need to install libraries using composer. First we update composer to have the latest version and then install all the required libraries:</p>

<p>```yml
before_script:</p>

<pre><code>  - composer self-update -n
  - composer install --prefer-dist -n
</code></pre>

<p>```</p>

<h2>PHPUnit testing <a name="phpunit-testing"></a></h2>

<p>The <code>AppBundle</code> which comes with new Symfony project has a simple PHPUnit test. Add the following to run the PHPUnit tests:</p>

<p>```yml
script:</p>

<pre><code>- phpunit -c app --log-junit shippable/testresults/junit.xml --coverage-xml shippable/codecoverage
</code></pre>

<p>```</p>

<p><a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/commit/b07abaccb788284c17901796e1849ca24fd57972">Commit the changes</a> and push it to GitHub. Now that we have the basic set-up for Shippable it&rsquo;s time to add it to a service.</p>

<h2>Enable project in Shippable <a name="enable-project"></a></h2>

<p>First choose the subscription to use and when in projects section click the big plus icon which says &ldquo;Enable Project.&rdquo;</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20815778916/in/album-72157650815525029/" title="shippable-choose-subscription"><img src="https://farm6.staticflickr.com/5824/20815778916_6d4e51a029.jpg" width="421" height="212" alt="shippable-choose-subscription"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Force a synchronization if the repository you want is not in the list. Click on key icon to enable the project.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20219448984/in/album-72157650815525029/" title="shippable-enable-project"><img src="https://farm1.staticflickr.com/577/20219448984_b17b72e6a4_c.jpg" width="800" height="738" alt="shippable-enable-project"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>After it is done you can manually start a build or it will happen automatically the next time you will push a commit.</p>

<p>After a while a build should finish and you should get the similar view.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20832499472/in/album-72157650815525029/" title="shippable-phpunit"><img src="https://farm1.staticflickr.com/696/20832499472_42578b27d8_c.jpg" width="800" height="654" alt="shippable-phpunit"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>By clicking &ldquo;Download Artifacts&rdquo; you can download the logs &amp; other files which were generated during the build.</p>

<h2>phpspec testing <a name="phpspec-testing"></a></h2>

<p>Lets expand our testing suite with <a href="http://www.phpspec.net">phpspec</a>. You can see that code was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/1">pull request</a>.</p>

<p>To run phpspec tests just add a command to <code>script</code> in your <code>shippable.yml</code> file:</p>

<p>```yml
script:</p>

<pre><code># ...
- ./bin/phpspec run -fpretty --verbose -n
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20815778566/in/album-72157650815525029/" title="shippable-phpspec"><img src="https://farm6.staticflickr.com/5699/20815778566_b826863744_c.jpg" width="800" height="632" alt="shippable-phpspec"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Behat testing <a name="behat-testing"></a></h2>

<p>Lets expand our testing suite with <a href="http://behat.org/">Behat</a>. You can see that code was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/2">pull request</a>. Please note that currently there is no tagged version of Behat (at the time of writing latest is <code>3.0.15</code>) which has <code>junit</code> formatter, for that reason a <code>dev</code> version is installed.</p>

<p>To run Behat tests we will start the built-in web server &amp; then run the tests. This can be done by adding following commands:</p>

<p>```yml
script:</p>

<pre><code># ...
- ./app/console server:start -n
- ./bin/behat --format=progress --out=std --format=junit --out=shippable/testresults -n
</code></pre>

<p>```</p>

<p>After the tests are finished, stop the built-in web server:</p>

<p>```yml
after_script:</p>

<pre><code>- ./app/console server:stop -n
</code></pre>

<p>```</p>

<p>The default XDebug nesting level is set at 100 which is very small and throws a fatal PHP error. This can be fixed by setting it at higher level in <code>php.ini</code> file. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
before_install:</p>

<pre><code>- echo "xdebug.max_nesting_level = 1000" &gt;&gt; ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20832501252/in/album-72157650815525029/" title="shippable-behat"><img src="https://farm1.staticflickr.com/603/20832501252_9f8620943e_c.jpg" width="800" height="636" alt="shippable-behat"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Environment variables &amp; MySQL <a name="environment-variables-mysql"></a></h2>

<p>You will probably be using a MySQL or something similar for the persistence in your application. It&rsquo;s very easy to include services with Shippable.</p>

<p>You don&rsquo;t want to hard code configuration variables for your application. To fix that we will use the environment variables to configure the application depending on the environment it is in. You can set the global environment variables which are the same between builds and you can set simple environment variables which are different between builds (extending your testing matrix). If you have environment variables which you don&rsquo;t want to show (like passwords) you can add it as a secure environment variable.</p>

<p>You can see the code which was added in this <a href="https://github.com/ifdattic/symfony-shippable-ci-article-code/pull/3">pull request</a>.</p>

<p>To get the secure environment variable you need to go to project settings. It has a panel &ldquo;Encrypt Env Vars.&rdquo; You provide the environment variables in the box and after clicking &ldquo;Encrypt&rdquo; you get the snippet of code you can paste in your <code>shippable.yml</code> file.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20849195481/in/album-72157650815525029/" title="shippable-secure-environment-variable"><img src="https://farm1.staticflickr.com/757/20849195481_146797af4e_c.jpg" width="800" height="513" alt="shippable-secure-environment-variable"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Environment variables which start with <code>SYMFONY__</code> are converted to normal variables after composer finishes the install. The double underscore becomes a dot. The environment variable <code>SYMFONY__ENV__DATABASE_NAME</code> becomes <code>env.database_name</code> parameter in your application. Lets add the database configuration and a secret value:</p>

<p>```yml
env:</p>

<pre><code>global:
    - SYMFONY__ENV__DATABASE_HOST=127.0.0.1
    - SYMFONY__ENV__DATABASE_PORT=~
    - SYMFONY__ENV__DATABASE_NAME=symfony
    - SYMFONY__ENV__DATABASE_USER=shippable
    - SYMFONY__ENV__DATABASE_PASSWORD=
    # Secret parameter value
    - secure: L9Ws6Wcx1XVoJYAP/YINXd4tGJwDsdG1yj7M/dLtvhZBhS2oLUvtxir7MGWDpbV69Qc+/FWUgUchpd4NUNHqEwc80YUFGLxylJ5Z82Cqnp9cf1qoM+gtHAM6J6o4TY7/jnuYsjvK0f++G+PJKiTYaky9QvK1qb+ERRxfk2AqoM7p7J3PYQz05lIKwuGmmmONfvlelT4Sv+8RPgfWSbJ1RBEN9zPS4Psh23QZ4T/zThQwyiNDwCv0QcUyQ7Mm+SFo59Eh34901DJwttZKYXG8ruO9iJs+ow7cAMAAAZ7sqgx7PWWIodMfpUjAlut45m/AMDi3AsAeG42262/o/9hRkA==
</code></pre>

<p>```</p>

<p>The MySQL database can be created by adding the command in <code>before_script</code> option:</p>

<p>```yml
before_script:</p>

<pre><code># ...
- mysql -e "CREATE DATABASE $SYMFONY__ENV__DATABASE_NAME"
- ./app/console doctrine:schema:create -n
</code></pre>

<p>```</p>

<p>This will create the database as it&rsquo;s defined in the environment variable. After the database is created it will run the queries to create a schema for your application.</p>

<p>We&rsquo;re using built-in server for testing our application. However it has no access to environment variables. To fix that extend your <code>php.ini</code> configuration to include them (you probably won&rsquo;t need this if you&rsquo;re using Apache or different web server):</p>

<p>```yml
before_install:</p>

<pre><code># ...
- echo 'variables_order = "EGPCS"' &gt;&gt; ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
</code></pre>

<p>```</p>

<p>You should be able to see similar view if everything was correct.</p>

<p><a data-flickr-embed="true" data-header="false" data-footer="false" data-context="false"  href="https://www.flickr.com/photos/ifdattic/20654012310/in/album-72157650815525029/" title="shippable-environment-variables-mysql"><img src="https://farm6.staticflickr.com/5681/20654012310_f41801b45a_c.jpg" width="800" height="670" alt="shippable-environment-variables-mysql"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Conclusion <a name="conclusion"></a></h2>

<p>With these small changes you should have a CI testing for your application. It will improve your code quality and give you a piece of mind knowing that the changes you made will be tested even if you forgot to run the tests on your development machine.</p>
]]></content>
  </entry>
  
</feed>
