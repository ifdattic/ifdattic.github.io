<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/technical/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-05-03T13:51:31+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keyboard Shortcuts I Found Useful While Recording a Video Course]]></title>
    <link href="http://ifdattic.com/useful-keyboard-shortcuts-recording-video-course"/>
    <updated>2016-05-03T11:51:43+03:00</updated>
    <id>http://ifdattic.com/keyboard-shortcuts-i-found-useful-while-recording-a-video-course</id>
    <content type="html"><![CDATA[<p>While recording a video course you constantly need to put your environment in the same state and you often repeat the same action. Having a few keyboard shortcuts up your sleeve can make your life a lot easier. Here is some keyboard shortcuts that I found useful while recording the <a href="https://www.packtpub.com/web-development/web-development-nodejs-and-mongodb-video">Web Development with Node.JS and MongoDB</a> video course.</p>

<p>Please keep in mind that my local environment is OSX, so shortcuts and applications are based for it. Not all shortcuts are set by default (for example I set them myself for Screenflow).</p>

<p>Skip to any of the sections or continue reading:</p>

<ul>
<li><a href="#full-screen">Full screen</a></li>
<li><a href="#screenshots">Screenshots</a></li>
<li><a href="#finder">Finder</a></li>
<li><a href="#chrome">Chrome</a></li>
<li><a href="#sublime-text">Sublime Text</a></li>
<li><a href="#iterm">iTerm</a></li>
<li><a href="#screenflow">Screenflow</a></li>
<li><a href="#resolution">Recording resolution</a></li>
<li><a href="#display-mirroring">Quick display mirroring</a></li>
</ul>


<p><a name="full-screen"></a></p>

<h2>Full screen</h2>

<p>Note that for most of applications <code>⌃⌘F</code> will put them in full screen mode.</p>

<p><a name="screenshots"></a></p>

<h2>Screenshots</h2>

<p>The <code>⇧⌘3</code> (<em>whole screen</em>) and <code>⇧⌘4</code> (<em>selected area</em>) was really helpful for taking screenshots. The screenshots were later used inside the scripts, slides, or videos. <strong>Use the mouse</strong> when taking area screenshots for the scripts. If you don&rsquo;t have one, spend a few bucks for a cheap one. It will be much faster and less painful.</p>

<p><a name="finder"></a></p>

<h2>Finder</h2>

<p>You will probably end managing a lot of files. Finder might not be the best application for managing files, but it&rsquo;s perfectly fine once I learned how to do <strong>copy/paste</strong>. This was a life saver and saved me from using the mouse for file manipulations.</p>

<p><code>⌘C</code> => Cut</p>

<p><code>⌥⌘V</code> => Paste</p>

<p>It&rsquo;s mostly fine to use the default Finder. Though, depending on your set up you might want to make a few changes.</p>

<p><code>⌥⌘P</code> => Hide path bar</p>

<p><code>⌥⌘S</code> => Hide sidebar</p>

<p><code>⌥⌘T</code> => Hide toolbar</p>

<p><a name="chrome"></a></p>

<h2>Chrome</h2>

<p>For my most day to day I use FireFox. Chrome is used for additional testing and video watching (plays most videos without needing Flash). I chose Chrome as my default browser for the course for a single reason. <em>FireFox doesn&rsquo;t have a shortcut to hide bookmarks toolbar</em>. Just didn&rsquo;t feel like constantly going through menus using a mouse to hide/show it.</p>

<p><code>⇧⌘B</code> => Hide bookmarks bar</p>

<p>While doing another video experiment started to notice how problematic bookmarks toolbar is on FireFox, but found one solution for easy hiding. By using <a href="http://www.packal.org/workflow/menu-bar-search">Menu Bar Search Workflow for Alfred</a>, it&rsquo;s possible to hide/show it using only the keyboard. Still not as easy as using a shortcut.</p>

<p><a name="sublime-text"></a></p>

<h2>Sublime Text</h2>

<p>If you do other work with the editor while recording, keeping the font size at <code>16px</code> is not the best choice (depends on preference / quality of eyes). You will want to constantly change the font size depending on the work you do.</p>

<p><code>⌘+</code> => Increase font size</p>

<p><code>⌘-</code> => Decrease font size</p>

<p><a name="iterm"></a></p>

<h2>iTerm</h2>

<p>For the course related terminal I had a new window that run a dedicated profile on a few tabs. That way they didn&rsquo;t get in the way, and didn&rsquo;t need any changes (like making font size bigger).</p>

<p>The iTerm has a different shortcut for a full screen (<code>⌘⏎</code>).</p>

<p>Sometimes something messed up and the terminal was not recorded. In that case turning full screen off and on fixed the problem. This mostly happened on the next day (after a lot of putting laptop to sleep and similar activities).</p>

<p>Another very useful shortcut was <code>⌃L</code> for clearing the terminal window. Unlike <code>⌘K</code> (clear buffer) shortcut, this command re-loads the prompt too.</p>

<p>If you want to learn more useful iTerm shortcuts read <a href="/iterm-shortcut-keys">iTerm Shortcut Keys</a> article.</p>

<p><a name="screenflow"></a></p>

<h2>Screenflow</h2>

<p>Screenflow is a great application for recording and editing your videos. It takes some time to get used to. After a while you make your own workflow and get good at it.</p>

<p><code>⌃⌥⌘R</code> => Record; for starting new a recording and stopping an existing one</p>

<p><code>⌃⌥⌘P</code> => Pause; for pausing a recording, didn&rsquo;t use often as most of recordings was done in short clips (also very long recording are harder to manage/edit)</p>

<p><code>⌃⌥⌘M</code> => Mark; for adding a marker on the recording. Useful for longer recordings. Comes in handy to mark the places you need to edit (like to cut out a part of it)</p>

<p><code>⌥⌘N</code> => Nest clips; would depend on your chosen workflow. As I chose to do everything in small clips (slides), each of them was made from multiple videos/images/audio, and then nested into a single clip for easier maintenance.</p>

<p><a name="resolution"></a></p>

<h2>Recording resolution</h2>

<p>When recording your videos you might want to set your screen resolution to <code>1280x720</code> or an equivalent of it (e.g., at <code>2560x1440</code> for retina display). That way you get a nice HD quality videos without any cropping or similar artifacts (an would guess that exporting is faster).</p>

<p>To change the resolution I used the <a href="https://github.com/ramiroaraujo/alfred-set-resolution-workflow">Set Resolution Workflow for Alfred</a>. Press <code>⌥SPACE</code> (my preference for opening Alfred), enter <code>setresolution</code> (using tab key autocomplete it after a few letters), enter <code>720</code>, and choose the resolution you want. After finishing switch back.</p>

<p><a name="display-mirroring"></a></p>

<h2>Quick display mirroring</h2>

<p>I use the external monitor in my daily life. Normally the laptop is in front (for keyboard and touchpad), with mirroring turned on, and laptop brightness all the way down (only single display used). For recording, having two displays is very useful. You can record on one and have all the notes on another.</p>

<p>Normally it would mean going to <code>System Preferences -&gt; Displays -&gt; Arrangement -&gt; Mirror Displays</code>. That takes a lot of time and a lot of mouse maneuvering.</p>

<p>Oh, how happy I was then I found you can do this with <code>⌘F1</code> (actually it&rsquo;s <code>⌘BrightnessDown</code>). This will turn display mirroring on and off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Video Course - Behind the Scenes]]></title>
    <link href="http://ifdattic.com/making-video-course-reflection"/>
    <updated>2016-04-12T12:53:48+03:00</updated>
    <id>http://ifdattic.com/making-a-video-course-behind-the-scenes</id>
    <content type="html"><![CDATA[<p>This post is my reflection on creating a video course. It contains personal thoughts, processes used &amp; possible improvements for them. This might be helpful if you&rsquo;re thinking about creating a video course and not sure that it might require or where to start. And if you want to learn how to convert your ideas to web applications you can check the <a href="https://www.packtpub.com/web-development/web-development-nodejs-and-mongodb-video">course</a> itself.</p>

<p>First when I got an offer to produce a video course my reaction was to do what I often do &ndash; run &amp; hide (something called impostor syndrome).</p>

<blockquote><p>Impostor syndrome is a term referring to high-achieving individuals marked by an inability to internalize their accomplishments and a persistent fear of being exposed as a &ldquo;fraud&rdquo;. Despite external evidence of their competence, those exhibiting the syndrome remain convinced that they are frauds and do not deserve the success they have achieved. Proof of success is dismissed as luck, timing, or as a result of deceiving others into thinking they are more intelligent and competent than they believe themselves to be.</p>

<p>Source: <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">Wikipedia</a></p></blockquote>

<p>Of course you start making excuses for it &mdash; I don&rsquo;t know enough, I don&rsquo;t have time, etc. &mdash; in the end they are still only excuses. No one ever did something great just by making excuses. By remembering a saying <em>&ldquo;Experts are experts because they started before they knew enough&rdquo;</em> &amp; confirming that it&rsquo;s something I can do (even if it will require banging the head against a wall once in a while).</p>

<p>So, what do you do when you have a project with the deadline &amp; have no idea how long it will take? You procrastinate of course! Like by making a calendar with inner deadlines, and then making a second version as you notice an issue. It&rsquo;s easy to avoid work when you don&rsquo;t know anything about it. The issue with that is that you took the challenge, and sooner or later it will start staring you in the eyes. The question is whose ass kicking will commence.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26115403990/in/dateposted-public/" title="01 - procrastinating, deadline calendar"><img src="https://farm2.staticflickr.com/1714/26115403990_b194e22121_c.jpg" width="672" height="800" alt="01 - procrastinating, deadline calendar"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p><strong>The secret is inertia</strong>. No matter how scary the task is you can endure it for half an hour. After half an hour you know more about it &amp; another half an hour doesn&rsquo;t sound so bad. In a few days you get a better idea of that it will require from you and you get high from being an ass kicker.</p>

<p>I always enjoyed learning something &amp; teaching it to others. The issue with that is that it requires a lot of reading and experimenting. Kept noticing myself falling in the trap of &ldquo;just one more page&rdquo;, which is bottomless. At some point you have to stomp down your foot &amp; say &ldquo;enough!&rdquo; It gets easier after a while as you start time-boxing it &amp; cutting down research (at least initial) to few hours.</p>

<p>After the research comes the writing. You stare at the cursor on the empty display &amp; have no idea what to write about. 500-700 words looks like Mount Everest as you stare at the excitedly blinking cursor at its starting position.</p>

<p>At this point you go back to inertia. Using the structure from a provided template you try to write down the problem, the solution, and three steps to move between them. This gives you a few anchor points &amp; keyboard starts getting some exercise. After a little bit you look at the word count &amp; swear. You went past 700 words, by a lot. And you still have a bunch to write about.</p>

<p>It might be fine in un-official atmosphere (especially with a drink in hand), but <strong>the secret is quality, not quantity</strong>. You just reached a point most creative people dread &ndash; killing your babies. You spent a lot of time &amp; energy making it, you can&rsquo;t just get rid of it. It would be wrong! Wrong, I say! This is where you have to <strong>punch your ego to the face</strong>. You have to understand that you are doing this to help others, not to make yourself feel better. As the ego runs away with the tail between its legs &amp; you start deleting words, the smile comes to your face as you notice that the message you are trying to convey is becoming easier to understand (and yes I noticed that this sentence goes on forever).</p>

<p>After a while <strong>you get better at writing</strong>. Most of the time you still start with a blinking cursor on an empty page, stumble around till you find the direction you want to go, and try to avoid ending in a ditch too often.</p>

<p>The challenge might have been a lot harder if I was at it alone (and quality wouldn&rsquo;t be as good). By getting support from other people (reviewers, editors, etc.), it&rsquo;s much easier to notice that can be improved or what to do next. The process wasn&rsquo;t always going smoothly as you would like. It doesn&rsquo;t help being an old grumpy man who runs on logic &amp; works in software development. It is only so many times you can fill same information in different format documents before you shout &ldquo;this needs to be an application!&rdquo; Some decisions logically didn&rsquo;t make sense to me. Like asking if I have no days off planned so we could finish the course sooner (answer No). Then after a week of silence (during which I couldn&rsquo;t continue without feedback on existing work) getting a reply about getting back from holidays. Even if multiple people work on the course the distance between them feels enormous. You get feedback on your work, but getting repeated feedback on some point (e.g., elaborating on the comment) feels like dredging through the pitch black silence. And like everywhere there&rsquo;s always some issues with payments. They were trivial, but still I find it strange, as in my opinion finances are the thing you take care right away so you could go back to doing the business which brings in the money.</p>

<p>In the beginning it took a while to get myself rolling. So that calendar with the deadlines came in handy. You could of course just mark the dates on digital calendar, but for me personally it doesn&rsquo;t work as well as taking a deliberate action and getting feedback (like crossing the date and seeing that tomorrow is the deadline). At points, I remembered the words from <em>The Shinning &ldquo;&hellip; All work and no play makes &mdash;&ndash; a dull boy &hellip;&rdquo;</em> My roommates probably wouldn&rsquo;t have liked that scenario. At other times it reminded me of school/college &ndash; doing some assignment for which I will be graded. Can&rsquo;t say I liked that feeling. Mostly, because I didn&rsquo;t like school/college as they interfered with me learning things.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26115405600/in/dateposted-public/" title="05 - being chased by the deadline"><img src="https://farm2.staticflickr.com/1692/26115405600_a0fd711a92_c.jpg" width="592" height="800" alt="05 - being chased by the deadline"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>I did start making great progress once I got myself rolling. Batching the tasks helped a lot. During writing I kept to focusing on a single topic at a time. Which sounds like a smart decision in theory, but didn&rsquo;t work well in practice. It might be hard to notice, but context switching does take its toll. Once I <strong>started taking hours/days for same tasks</strong> (research, writing, editing, recording, video editing) <strong>time savings became noticeable</strong>.</p>

<p>Trello was used for project management &amp; it worked well. This is kind of DIY project management. But that works well for one project might not be good for another one. All that you really need is to note some tasks, know in which state they are and keep some relevant info.</p>

<p>Doing a video in a single swoop isn&rsquo;t for me &amp; it often ends in a big mess. For that reason, I chose to split everything in smallest possible pieces &amp; then glue them together for the final result. It made batching tasks, recording &amp; editing a lot easier. Of course, the final result is not as natural, and sometimes can feel &ldquo;robotic.&rdquo; The process was kept simple &ndash; scripts in text files under version control, moved to word templates with screenshots, audio in many files, lots of screenshot images, single screenflow recording for each topic (if doing again would probably use many recordings).</p>

<p>One of big parts of making a video course is audio. With my current housing situation it wasn&rsquo;t easy to do. First, for good quality you need good set-up (good microphone, unobstructed lungs, good sound isolation, not being ill, etc.). It&rsquo;s not easy to keep up your cool when dogs start to bark and people start walking around just as soon as you start recording. Good thing that it was decided to add voice over &amp; my audio was only needed for reference, so quality wasn&rsquo;t as important. Another issue with audio recording is that English is not my native language, and I&rsquo;m not a big user of my voice. If it&rsquo;s one of the days where I don&rsquo;t feel like wasting my voice, I can easily spend whole day around people doing chores/errands without saying a single letter (sometimes for fun I just challenge myself with this to see how creative I will get). It was a good practice even if some days the tongue wasn&rsquo;t cooperating. An iodine spray (or something similar) helps a lot as your throat will hurt when recording for long periods. The sentences with a lot of &ldquo;s&rdquo; letters was fun as I started to sound like a snake :D</p>

<p>One thing worth deciding while/before writing scripts is how the commands will be spelled. It&rsquo;s not a problem with simple single word commands, but once they contain dashes/colons, or you start using flags/options, it can be very awkward to convert them to audio. I think, for the next time I will go with making them sound as human as possible (without dashes or anything fancy), and would mention them as little as possible. Maybe say it for the first time or explain a new option when it&rsquo;s used, but otherwise leave it to the video to show the command. Using &ldquo;execute the following command&rdquo; doesn&rsquo;t work as well as you would think &amp; in my opinion worth to avoid using. <strong>Avoid using exact numbers</strong> (like <code>13 ms</code> or version <code>3.3.10</code>). Might be fine in some cases, but you want to avoid running tests multiple times just to hit that 13 ms execution time which is used in the script &amp; audio. If you want to make it specific try to <em>use less / greater than with a good margin</em> (e.g., less than a second).</p>

<p>After learning that a voice over will be used felt hurt for a moment; starting to get angry macho voices inside. This is where you have to punch your ego in the face again. Once you do that you realize that this is being done to help as much people as possible, not for stroking your ego.</p>

<p>By this time had a script with screenshots, so recording was easier. You always have to <strong>remember to put everything in the recording state</strong> &ndash; set resolution to one which translates to <code>720p</code>, put everything in full-screen, hide that you don&rsquo;t need, etc. It&rsquo;s not fun to record for a while &amp; notice that something is not right. <strong>Make a checklist you go over before recording</strong>. <em>Two screens help</em> a lot as one contains the recording &amp; another the script. You go through each script step planning how the end result will look like &amp; then recording it. Still, can get frustrating when you mess something up or for example get &ldquo;connection lost&rdquo; in the middle of display as bluetooth mouse decided to save batteries. Then you have to go back to known state (which sometimes can be hard), and repeat again, and somehow mess up again. Took a lot of screenshots, before &amp; after each step. The pace of the video is dictated by the audio and you often need video to stay in place. It can be done by using freeze frames from a video, but found it a lot easier to use an image.</p>

<p>Google Drive was used for storing &amp; sharing the files. Found the whole experience terrible. It works well for storage, but just making the damn thing work takes forever. Never ending loading &amp; refreshes until it finally decides &ldquo;OK, now I will work, you can upload&rdquo; (sometimes taking up to half an hour). Lost any will to use Google Drive again.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/26362331236/in/dateposted-public/" title="07 - editing videos"><img src="https://farm2.staticflickr.com/1704/26362331236_589d19162e_c.jpg" width="800" height="450" alt="07 - editing videos"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>The last part is editing, which by this time is easy as all the work was done before hand. So you wake up half past six in the morning, get a cup of tea with a butter, put on the headphones,and start editing. You throw in the audio, add the video accordingly &amp; make improvements often taking a gut guess. Two monitors are very helpful as you do editing on one &amp; script is on another. The only change I would probably do is to batch the export (like before going for lunch). Exporting takes a long time (at least couple minutes for 5 minute video). After the export you need to watch the video to make sure it&rsquo;s correct and make adjustments. By batching those tasks I could do the export while eating and watch them at the end of the day when already tired.</p>

<p>You could go on forever improving &amp; polishing everything, but in the end you have to remember to just fucking ship it.</p>

<p>So, would I do it again? I don&rsquo;t know. I&rsquo;m really glad I took this challenge. Learned a lot during those months &amp; it feels awesome being able to help others. But at least right away I don&rsquo;t feel like taking a similar challenge. It&rsquo;s the direction I wouldn&rsquo;t mind going, but first, should experiment with it in small scale to see exactly where to go.</p>

<p>I would like to thank the people who helped me on this journey. Especially Sigita Mikuckytė, who encouraged me to take this challenge by reminding me that I&rsquo;m trying to hide behind the impostor syndrome.</p>

<p>Have you ever created a similar product? What was your experience? Share it in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Composer - a PHP package manager]]></title>
    <link href="http://ifdattic.com/how-to-use-composer"/>
    <updated>2016-03-29T19:15:26+03:00</updated>
    <id>http://ifdattic.com/how-to-use-composer-a-php-package-manager</id>
    <content type="html"><![CDATA[<p>Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and helps to manage those dependencies.</p>

<p>Dependencies are managed on a per-project basis, installing them in a directory inside your project. For convenience some dependencies can be installed globally (e.g., Symfony project installer).</p>

<p>Skip to any of the sections:</p>

<ul>
<li><a href="#how-to-install-update#">How to install and update</a>

<ul>
<li><a href="#install-on-osx">Installing on OS X</a></li>
</ul>
</li>
<li><a href="#adding-dependencies">Adding dependencies</a>

<ul>
<li><a href="#adding-specific-version">Adding specific version</a></li>
</ul>
</li>
<li><a href="#removing-dependency">Removing dependency</a></li>
<li><a href="#initializing-composerjson-file">Initializing composer.json file</a></li>
<li><a href="#updating-dependency">Updating the dependency</a></li>
<li><a href="#installing-dependencies">Installing dependencies</a>

<ul>
<li><a href="#installing-dependencies-on-production">Installing dependencies on production servers</a></li>
</ul>
</li>
<li><a href="#autoloading">Autoloading</a>

<ul>
<li><a href="#psr4">PSR-4</a></li>
<li><a href="#psr0">PSR-0</a></li>
<li><a href="#classmap">Classmap</a></li>
<li><a href="#development-autoloading">Development autoloading</a></li>
</ul>
</li>
<li><a href="#creating-project">Creating a project</a></li>
<li><a href="#loading-custom-package">Loading custom package / replacing existing package</a>

<ul>
<li><a href="#adding-repository-cli">Adding / removing repository through CLI</a></li>
</ul>
</li>
<li><a href="#running-composer-globally">Running Composer globally</a></li>
<li><a href="#adding-platform-requirements">Adding platform requirements</a></li>
<li><a href="#speed-up-install">Speed up installation of dependencies</a></li>
</ul>


<p><a name="how-to-install-update"></a></p>

<h2>How to install and update</h2>

<p>Composer can be installed by running:</p>

<p><code>bash
curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
</code></p>

<p>This will install Composer in the directory <code>/usr/local/bin</code> (which should be in your path) allowing you to run it from anywhere by using <code>composer</code> command.</p>

<p>If your installation is working correctly you should see the version and available commands:</p>

<p><code>bash
composer
</code></p>

<p>To make sure that you&rsquo;re using the latest version of Composer, constantly run the self update:</p>

<p><code>bash
composer self-update
</code></p>

<p><a name="install-on-osx"></a></p>

<h3>Installing on OS X</h3>

<p>If you use OS X you can install Composer through <a href="http://brew.sh/">Homebrew</a>:</p>

<p><code>bash
brew install homebrew/php/composer
</code></p>

<p>Check the <a href="https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx">documentation</a> if any of the installation options doesn&rsquo;t work for you (e.g., install locally or on Windows).</p>

<p><a name="adding-dependencies"></a></p>

<h2>Adding dependencies</h2>

<p>To add a dependency your project needs to use the <code>require</code> command with a package name (format <code>&lt;vendor&gt;/&lt;name&gt;</code>) command:</p>

<p>```bash
composer require monolog/monolog</p>

<h1>Signature:</h1>

<p>composer require <vendor>/<name></p>

<h1>Signature of adding multiple dependencies:</h1>

<p>composer require <vendor>/<name> <vendor2>/<name> <vendor2>/<name2>
```</p>

<p>This creates the <code>composer.json</code> file (if it doesn&rsquo;t exist), and installs the dependency (including dependencies your dependency depends on).</p>

<p><strong>Avoid changing <code>composer.json</code> file manually</strong>, most of the time the <code>require</code> command is enough to manage dependencies.</p>

<p>To add a development dependency use the <code>--dev</code> flag with <code>require</code> command:</p>

<p>```bash
composer require &mdash;dev phpspec/phpspec</p>

<h1>Signature:</h1>

<p>composer require &mdash;dev <vendor>/<name>
```</p>

<p><a name="adding-specific-version"></a></p>

<h3>Adding specific version</h3>

<p>The <code>require</code> command <strong>will automatically choose a suitable version</strong> you can use in your project. If you need to provide the specific version of dependency provide it with the package name:</p>

<p>```bash
composer require monolog/monolog:~1.17.0</p>

<h1>Signature:</h1>

<p>composer require <vendor>/<name>:<version>
```</p>

<p>Version to use can be defined in the following ways:</p>

<ul>
<li>The <code>^</code> (caret) operator means <em>any non-breaking version / until major</em> (e.g., <code>^1.2.3</code> is equivalent to <code>&gt;=1.2.3 &lt;2.0.0</code>)</li>
<li>The <code>~</code> (tilde) operator means <em>approximate / increment right most digit</em> (e.g., <code>~1.2</code> is equivalent to <code>&gt;=1.2 &lt;2.0.0</code> or <code>~1.2.3</code> is equivalent to <code>&gt;=1.2.3 &lt;1.3.0</code>)</li>
<li>Read the <a href="https://getcomposer.org/doc/articles/versions.md">documentation</a> to learn about other version constraints (exact, range, wildcard)</li>
</ul>


<p>Versions are described using semantic versioning (SemVer) which uses the format <code>MAJOR.MINOR.PATCH</code>. Each of the numbers have a specific meaning:</p>

<ul>
<li><code>MAJOR</code> &ndash; API changes that break backwards-compatibility</li>
<li><code>MINOR</code> &ndash; new features</li>
<li><code>PATCH</code> &ndash; bug fixes</li>
</ul>


<p><a name="removing-dependency"></a></p>

<h2>Removing dependency</h2>

<p>If you don&rsquo;t need the dependency anymore use the <code>remove</code> command to remove it from the <code>composer.json</code> file and directory:</p>

<p>```bash
composer remove monolog/monolog</p>

<h1>Signature:</h1>

<p>composer remove <vendor>/<name>
```</p>

<p>To remove the development dependency add <code>--dev</code> flag to <code>remove</code> command:</p>

<p>```bash
composer remove &mdash;dev phpspec/phpspec</p>

<h1>Signature:</h1>

<p>composer remove &mdash;dev <vendor>/<name>
```</p>

<p><a name="initializing-composerjson-file"></a></p>

<h2>Initializing composer.json file</h2>

<p>If you are creating a package or want to fill a <code>composer.json</code> file interactively, use the <code>init</code> command:</p>

<p><code>bash
composer init
</code></p>

<p>This will ask you to provide information like package name, description, dependencies, etc. After you provide all the information it will generate a <code>composer.json</code> file.</p>

<p><a name="updating-dependency"></a></p>

<h2>Updating the dependency</h2>

<p>To get the latest versions of the dependencies (also updates the <code>composer.lock</code> file) use the <code>update</code> command:</p>

<p><code>bash
composer update
</code></p>

<p>If you want to update only specific packages provide them to the <code>update</code> command:</p>

<p>```bash
composer update monolog/monolog</p>

<h1>Signature:</h1>

<p>composer update <vendor>/<name></p>

<h1>Wildcard is allowed to update multiple packages (without listing them):</h1>

<p>composer update <vendor>/*
```</p>

<p><a name="installing-dependencies"></a></p>

<h2>Installing dependencies</h2>

<p>Use the <code>install</code> command to install project dependencies:</p>

<p><code>bash
composer install
</code></p>

<p>This will read the <code>composer.json</code> file and resolve your dependencies. After finishing the installation it will create a <code>composer.lock</code> file, which contains the exact versions installed. This makes sure that the same versions are installed every time the <code>install</code> command is executed.</p>

<p><strong>Commit your application&rsquo;s <code>composer.lock</code> file (along with <code>composer.json</code>) into version control</strong>.</p>

<p>By convention dependencies are installed into a <code>vendor</code> directory, which <strong>should not be committed to version control</strong>.</p>

<p><a name="installing-dependencies-on-production"></a></p>

<h3>Installing dependencies on production servers</h3>

<p>You will want to use a few flags when installing dependencies on production servers:</p>

<p><code>bash
composer install --prefer-dist --no-dev --optimize-autoloader --no-interaction
</code></p>

<p>This will optimize the dependency installation which is really useful for production servers. It will try to install distribution packages (<code>--prefer-dist</code> flag), won&rsquo;t install development dependencies (<code>--no-dev</code> flag), and generate a classmap for faster autoloader (<code>--optimize-autoloader</code> flag). The <code>--no-interaction</code> flag will make sure that no interactive questions are asked (needed for automated deployments).</p>

<p><a name="autoloading"></a></p>

<h2>Autoloading</h2>

<p>Composer generates a <code>vendor/autoload.php</code> file which automatically loads the classes your project depends on. Just include that file in your PHP script:</p>

<p><code>php
require __DIR__.'/vendor/autoload.php'
</code></p>

<p>You can change the <code>autoload</code> key in your <code>composer.json</code> file to define the mapping.</p>

<p>If you added new classes you might need to update the autoloader. Use the <code>dump-autoload</code> command to do that:</p>

<p>```bash
composer dump-autoload</p>

<h1>For production use</h1>

<p>composer dump-autoload &mdash;optimize &mdash;no-dev
```</p>

<!-- https://getcomposer.org/doc/01-basic-usage.md#autoloading -->


<p><a name="psr4"></a></p>

<h3>PSR-4</h3>

<p>Under the <code>psr-4</code> key you define a mapping from namespaces to paths, relative to the package root. The PSR-4 is the <em>recommended</em> choice for autoloading (avoids having to regenerate the autoloader after adding classes).</p>

<p><strong>Namespace prefixes must end in <code>\\</code> to avoid conflicts between similar prefixes</strong>.</p>

<p>In addition to normal mapping definition, you can define multiple directories, or define a fallback directory:</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "psr-4": {
        "Vendor\\Namespace\\Normal\\": "src/",
        "Vendor\\Namespace\\Multi\\": ["src/", "lib/"],
        "": "src/fallback/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="psr0"></a></p>

<h3>PSR-0</h3>

<p>Under the <code>psr-0</code> key you define a mapping from namespaces to paths, relative to the package root. This also supports the PEAR-style non-namespaced convention.</p>

<p><strong>Namespace prefixes should end in <code>\\</code> to avoid conflicts between similar prefixes</strong>.</p>

<p>In addition to normal mapping definition, you can define multiple directories, or define a fallback directory:</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "psr-0": {
        "Vendor\\Namespace\\Normal\\": "src/",
        "Vendor_Namespace_PEAR_": "src/",
        "Vendor\\Namespace\\Multi\\": ["src/", "lib/"],
        "": "src/fallback/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="classmap"></a></p>

<h3>Classmap</h3>

<p>For libraries that do not follow PSR-0/4 you can specify directories or files to search for classes (using the <code>classmap</code> key):</p>

<p>```json
{</p>

<pre><code>"autoload": {
    "classmap": ["src/", "lib/", "Something.php"]
}
</code></pre>

<p>}
```</p>

<p><a name="development-autoloading"></a></p>

<h3>Development autoloading</h3>

<p>You should avoid polluting the autoloader in production with classes it doesn&rsquo;t need (like test suite). Using the <code>autoload-dev</code> key you can define classes that should be loaded only in development:</p>

<p>```json
{</p>

<pre><code>"autoload-dev": {
    "psr-4": {
        "MyLibrary\\Tests\\": "tests/"
    }
}
</code></pre>

<p>}
```</p>

<p><a name="creating-project"></a></p>

<h2>Creating a project</h2>

<p>The <code>create-project</code> command will create a new project from an existing package. It&rsquo;s the equivalent of doing a git clone followed by installation of dependencies. The command takes the package name and the directory to create it in (optional: provide the version as third parameter):</p>

<p>```bash
composer create-project symfony/framework-standard-edition my_project_name</p>

<h1>or</h1>

<p>composer create-project symfony/framework-standard-edition my_project_name 3.1.*</p>

<h1>Signature:</h1>

<p>composer create-project <vendor>/<name> <path> &lt;optional:version>
```</p>

<p><a name="loading-custom-package"></a></p>

<h2>Loading custom package / replacing existing package</h2>

<p>In some cases you might want to use a custom package. For example you fixed a bug in open source library and while waiting for PR to be merged you want to use the fixed library.</p>

<p>The branch on the forked repository should be prefixed with <code>dev-</code> (e.g., in the repository it will be <code>bugfix</code>, in the <code>composer.json</code> file it will be <code>dev-bugfix</code>). Then change the <code>repositories</code> key in <code>composer.json</code> (in example assume that I forked <code>Monolog</code> and created <code>bugfix</code> branch):</p>

<p>```json
{</p>

<pre><code>"repositories": [
    "type": "vcs",
    "url": "https://github.com/ifdattic/monolog"
],
"require": {
    "monolog/monolog": "dev-bugfix"
}
</code></pre>

<p>}
```</p>

<p>Now after updating the dependency it should replace the original package with a changed one (don&rsquo;t change the package name for override to work):</p>

<p>```bash
composer update monolog/monolog</p>

<h1>Signature</h1>

<p>composer update</p>

<h1>or</h1>

<p>composer update <vendor>/<name>
```</p>

<p>To avoid conflicts you might need to alias the branch for it to be treated as a specific version. To make in-line aliases use the <code>as</code> keyword:</p>

<p>```json
{</p>

<pre><code>"require": {
    "monolog/monolog": "dev-bugfix as 1.18.1"
}
</code></pre>

<p>}
```</p>

<!-- https://getcomposer.org/doc/articles/aliases.md -->


<p><a name="adding-repository-cli"></a></p>

<h3>Adding / removing repository through CLI</h3>

<p>If you don&rsquo;t want to manually add repository use the <code>composer config repositories</code> command:</p>

<p>```bash
composer config repositories.monolog vcs <a href="https://github.com/ifdattic/monolog">https://github.com/ifdattic/monolog</a></p>

<h1>Signature:</h1>

<p>composer config repositories.<name> <type> <url>
```</p>

<p>To remove a repository use <code>--unset</code> flag (<code>repo</code> is alias for <code>repositories</code>):</p>

<p>```bash
composer config &mdash;unset repo.monolog</p>

<h1>Signature:</h1>

<p>composer config &mdash;unset repo.<name>
```</p>

<!-- https://getcomposer.org/doc/05-repositories.md#loading-a-package-from-a-vcs-repository -->


<p><a name="running-composer-globally"></a></p>

<h2>Running Composer globally</h2>

<p>Sometimes you might want to install some CLI tools globally. Using <code>global</code> command it will allow to install them to the directory defined in <code>COMPOSER_HOME</code> environment variable:</p>

<p>```bash
composer global require fabpot/php-cs-fixer</p>

<h1>Signature:</h1>

<p>composer global <command> <vendor>/<name>
```</p>

<!-- https://getcomposer.org/doc/03-cli.md#global  -->


<p><a name="adding-platform-requirements"></a></p>

<h2>Adding platform requirements</h2>

<p>If you need to add requirements for the system you can use platform packages. They are virtual packages of the things that are installed on the system. For example the following snippet requires for PHP 7 to be available:</p>

<p>```json
{</p>

<pre><code>"require": {
    "php": "^7.0"
}
</code></pre>

<p>}
```</p>

<p>The following platform packages are available: <code>php</code>, <code>hhvm</code>, <code>ext-&lt;name&gt;</code>, <code>lib-&lt;name&gt;</code>.</p>

<p>To get a list of locally available platform packages run:</p>

<p><code>bash
composer show --platform
</code></p>

<!-- https://getcomposer.org/doc/02-libraries.md#platform-packages -->


<p><a name="speed-up-install"></a></p>

<h2>Speed up installation of dependencies</h2>

<p>If your project has a lot of dependencies, it can take a long time for them to install. You can speed up the installation by installing dependencies in parallel.</p>

<p>To achieve this install <a href="https://github.com/hirak/prestissimo">prestissimo composer plugin</a>:</p>

<p><code>bash
composer global require hirak/prestissimo
</code></p>

<p>It might not make a difference if you&rsquo;re updating a single dependency for your project (it might still use only a single connection). It does improve the speed when installing a lot of dependencies (like when starting a new project or deploying to production).</p>

<h2>Conclusion</h2>

<p>You can do a lot more with Composer, but this should take care of most of the use cases while developing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 11 AWS IAM Best Practices]]></title>
    <link href="http://ifdattic.com/top-11-aws-iam-best-practices"/>
    <updated>2016-01-27T15:37:51+02:00</updated>
    <id>http://ifdattic.com/top-11-aws-iam-best-practices</id>
    <content type="html"><![CDATA[<p>AWS Identity and Access Management (IAM) enables you to control access to AWS services and resources. Following few best practices makes sure that your account is secure and easy to manage.</p>

<h2>1. Users &ndash; Create individual users</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Unique credentials</li>
<li>Individual credential rotation</li>
<li>Individual permissions</li>
</ul>


<h2>2. Groups &ndash; Manage permissions with groups</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Easier to assign the same permissions to multiple users</li>
<li>Simpler to re-assign permissions based on change in responsibilities</li>
<li>Only one change to update permissions for multiple users</li>
</ul>


<h2>3. Permissions &ndash; Grant least privilege</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>More granular control</li>
<li>Less chance of people making mistakes</li>
<li>Easier to relax than to tighten up</li>
</ul>


<h2>4. Auditing &ndash; Enable AWS CloudTrail to get logs of API calls</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Visibility into your user activity by recording AWS API calls to an Amazon S3 bucket</li>
</ul>


<h2>5. Passwords &ndash; Configure a strong password policy</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Ensures your users and your data are protected</li>
</ul>


<h2>6. MFA &ndash; Enable MFA for privileged users</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Supplements username and password to require a one-time code during authentication</li>
</ul>


<h2>7. Roles &ndash; Use IAM roles for EC2 instances</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Easy to manage access keys on EC2 instances</li>
<li>Automatic key rotation</li>
<li>Assign least privilege to the application</li>
<li>AWS SDKs fully integrated</li>
</ul>


<h2>8. Sharing &ndash; Use IAM roles to share access</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>No need for security credentials</li>
<li>Easy to break sharing relationship</li>
<li>Use cases (cross-account access, intra-account delegation, federation)</li>
</ul>


<h2>9. Rotation &ndash; Rotate security credentials regularly</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Normal best practice</li>
</ul>


<h2>10. Conditions &ndash; Restrict privileged access further with conditions</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Additional granularity when defining permissions</li>
<li>Can be enabled for any AWS service API</li>
<li>Minimizes accidentally performing privileged actions</li>
</ul>


<h2>11. Root &ndash; Reduce/remove use of root</h2>

<p>Benefits of the practice are:</p>

<ul>
<li>Reduce potential for misuse of credentials</li>
</ul>


<p>You can get all of them as a check list at this <a href="https://trello.com/c/9cW2qarm/2-top-11-aws-iam-best-practices">public Trello card</a>.</p>

<p>This is the reference post from the <a href="https://www.youtube.com/watch?v=tTJrbsu_Wzc">https://www.youtube.com/watch?v=tTJrbsu_Wzc</a> and <a href="https://www.youtube.com/watch?v=ZhvXW-ILyPs">https://www.youtube.com/watch?v=ZhvXW-ILyPs</a> videos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create a Tunnel to Local Machine with ngrok]]></title>
    <link href="http://ifdattic.com/how-to-create-tunnel-with-ngrok"/>
    <updated>2015-12-23T08:15:17+02:00</updated>
    <id>http://ifdattic.com/how-to-create-a-tunnel-to-local-machine-with-ngrok</id>
    <content type="html"><![CDATA[<p>When developing applications sometimes you need to access your current application using external sources. For example you want to test an application using a mobile device or how your application responds to a webhook. You could deploy your application on the publicly accessible server, but it will make development slow, having to deploy on each change.</p>

<p>The solution would be to create a tunnel to a local server on your machine. This way you could test your application on the mobile devices, show it to the clients, test webhooks. All of this can be achieved with <a href="https://ngrok.com/">ngrok</a>.</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#sample-application">Sample application</a></li>
<li><a href="#installing">Installing ngrok</a></li>
<li><a href="#http-tunnel">Creating local HTTP tunnel</a></li>
<li><a href="#tcp-tunnel">Creating local TCP tunnel</a></li>
<li><a href="#configuring">Configuring ngrok</a></li>
<li><a href="#conclusions">Conclusions</a></li>
</ul>


<p><a name="sample-application"></a></p>

<h2>Sample application</h2>

<p>You can create a tunnel for any web server.</p>

<p>For this article the simple Express.js application will be used. It has two routes for receiving <code>GET</code> and <code>POST</code> requests. You can find the code on <a href="https://github.com/ifdattic/ngrok-article-code">GitHub</a></p>

<p>```javascript
&lsquo;use strict&rsquo;;</p>

<p>const express = require(&lsquo;express&rsquo;);
const bodyParser = require(&lsquo;body-parser&rsquo;);
const app = express();</p>

<p>app.use(bodyParser.urlencoded({extended: false}));</p>

<p>app.get(&lsquo;/&rsquo;, function (request, response) {</p>

<pre><code>response.send('Hello');
</code></pre>

<p>});</p>

<p>app.post(&lsquo;/&rsquo;, function (request, response) {</p>

<pre><code>response.send(request.body);
</code></pre>

<p>});</p>

<p>app.listen(3000);</p>

<p>console.log(&lsquo;Open: <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a>&rsquo;);
```</p>

<p>To launch the server execute the following command (<a href="https://nodejs.org">Node.js</a> is required):</p>

<p><code>bash
node server.js
</code></p>

<p><a name="installing"></a></p>

<h2>Installing ngrok</h2>

<p>ngrok is easy to install and works on all major platforms. <a href="https://ngrok.com/download">Download</a> the archive, unzip it, and run it. If you want to run it from any location move it to a directory which is in your <code>PATH</code> (e.g., <code>/usr/local/bin</code>).</p>

<p>Run <code>ngrok -h</code> to make sure it works and to get the documentation on how to use it.</p>

<p><a name="http-tunnel"></a></p>

<h2>Creating local HTTP tunnel</h2>

<p>To expose the web server simply provide the port number it is running on:</p>

<p><code>bash
ngrok http 3000
</code></p>

<p>It will give you the URL to your tunnel and statistics.</p>

<p>If you will make a request to an URL you should get the response (replace the URL with one you got).</p>

<p>```bash
curl <a href="http://7711dd0d.ngrok.io">http://7711dd0d.ngrok.io</a></p>

<p>curl <a href="http://7711dd0d.ngrok.io">http://7711dd0d.ngrok.io</a> -d name=Andrew
```</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23840463581/in/dateposted-public/" title="ngrok-http-tunnel"><img src="https://farm6.staticflickr.com/5705/23840463581_2e6551dcb3_o.gif" width="1082" height="300" alt="ngrok-http-tunnel"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>ngrok provides the real-time web UI from which you can inspect the HTTP traffic for the tunnel. Open the URL provided by the created tunnel. From this web interface you can see all the information about requests and responses made.</p>

<p>One great feature which will be very handy when integrating webhooks is an ability to replay requests. This way you don&rsquo;t need to do anything to trigger the webhook; you could just replay the request after making changes.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23840462921/in/dateposted-public/" title="ngrok-replay-request"><img src="https://farm6.staticflickr.com/5797/23840462921_0ff96d97f3_o.gif" width="1160" height="580" alt="ngrok-replay-request"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>If you would like to add some basic protection to avoid anyone accessing your web server you can add an HTTP Basic Authentication:</p>

<p><code>bash
ngrok http -auth="username:password" 3000
</code></p>

<p>Replace the <code>username</code> and <code>password</code> with credentials you want.</p>

<p>If you want to use advanced features of ngrok (like having custom subdomain or running from your domain) you will need an ngrok account and a paid plan.</p>

<p><a name="tcp-tunnel"></a></p>

<h2>Creating local TCP tunnel</h2>

<p>With ngrok you can expose SSH, database or some other service which runs over TCP. For example you could expose the MongoDB database running on your machine:</p>

<p><code>bash
ngrok tcp 27017
</code></p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23922941705/in/dateposted-public/" title="ngrok-tcp-tunnel"><img src="https://farm2.staticflickr.com/1534/23922941705_f4d1692373_o.gif" width="1077" height="262" alt="ngrok-tcp-tunnel"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p><a name="configuring"></a></p>

<h2>Configuring ngrok</h2>

<p>ngrok can be configured using YAML configuration file. If no configuration file is provided the ngrok will try to load one from a default location (<code>$HOME/.ngrok2/ngrok.yml</code>).</p>

<p>By using <code>-config</code> option an explicit configuration file can be provided. It&rsquo;s possible to provide multiple configuration files and they are merged on top of each other. This way you can have global and project settings.</p>

<p><code>bash
ngrok http -config ~/.ngrok2/ngrok.yml -config project-config.yml 3000
</code></p>

<p>The most common use for configuration file is defining tunnels. Tunnels are defined under the <code>tunnels</code> property in the configuration file:</p>

<p>```yml
tunnels:</p>

<pre><code>app:
    proto: http
    addr: 3000
    bind_tls: false
app-protected:
    proto: http
    addr: 3000
    auth: "username:password"
mongo:
    proto: tcp
    addr: 27017
</code></pre>

<p>```</p>

<p>To start the tunnel provide the name of the tunnel:</p>

<p><code>bash
ngrok start -config ~/.ngrok2/ngrok.yml -config project-config.yml app-protected
</code></p>

<p>To start all the defined tunnels use <code>--all</code> switch:</p>

<p><code>bash
ngrok start -config ~/.ngrok2/ngrok.yml -config project-config.yml --all
</code></p>

<p><a name="conclusions"></a></p>

<h2>Conclusions</h2>

<p>This should be enough to take care of the most use cases you will need. ngrok probably won&rsquo;t be the tool you will be using everyday (depends on what you work on). For those days when you need to test a webhook or from another device you will be great for having ngrok in your toolbox.</p>

<p>Do you have a story of when a local tunnel helped / would have helped to solve your problem?</p>
]]></content>
  </entry>
  
</feed>
