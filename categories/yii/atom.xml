<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Yii | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/yii/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-04-12T15:57:09+03:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create Yii Extension by Example - EPrism]]></title>
    <link href="http://ifdattic.com/create-yii-extension-by-example-eprism"/>
    <updated>2014-03-05T21:46:37+02:00</updated>
    <id>http://ifdattic.com/create-yii-extension-by-example-eprism</id>
    <content type="html"><![CDATA[<p>This is the tutorial about how to make a simple <a href="http://www.yiiframework.com/">Yii</a> extension. It would be most useful to people who are just starting with Yii framework. The tutorial is step-by-step guide using an <a href="http://www.yiiframework.com/extension/eprism">EPrism</a> extension as a base. This would be really helpful if for example you found a nice JavaScript plugin and want to use it as a part of framework rather than just adding it statically in your application.</p>

<h2>1. Set up</h2>

<p>Everything needs to start from something, so do the following steps to have a base on which you can build your extension:</p>

<ul>
<li>Create a folder <code>EPrism</code> for extension</li>
<li>Create an extension file name <code>EPrism.php</code> inside the folder</li>
<li>Create a class <code>EPrism</code> which extends a framework class of <code>CWidget</code> in the <code>EPrism.php</code> file</li>
<li>Add <code>init()</code> and <code>run()</code> methods</li>
</ul>


<p><a href="http://www.yiiframework.com/doc/api/1.1/CWidget/"><code>CWidget</code> class</a> is a base class for widgets. You can think of a widget as a self-contained component that may generate presentation based on model data.</p>

<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CWidget#init-detail"><code>init()</code> method</a> initializes the widget.</p>

<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CWidget#run-detail"><code>run()</code> method</a> executes the widget.</p>

<h4>Step results</h4>

<p>By now your folder structure should be:</p>

<p><code>bash Folder structure after first step
EPrism/
└── EPrism.php
</code></p>

<p>The contents of <code>EPrism.php</code> file should be:</p>

<p>```php Extension contents after first step
class EPrism extends CWidget
{</p>

<pre><code>public function init()
{
    return parent::init();
}

public function run()
{
}
</code></pre>

<p>}
```</p>

<h2>2. Add extension assets</h2>

<p>To be able to use the extension <em>out of the box</em>, you need to add the assets for it. Start by creating a folder <code>assets</code> which will contain the extension assets.</p>

<p>Now go to the <a href="http://prismjs.com/download.html">Prism download page</a>, generate the wanted configuration, and download provided code. Save JavaScript code as <code>prism.js</code> in <code>assets</code> folder, and CSS code as <code>prism.css</code> in the same folder.</p>

<p>To use the downloaded assets you will need to add the code to <code>run()</code> method.</p>

<p>First you want to <a href="http://www.yiiframework.com/doc/api/1.1/CAssetManager/#publish-detail">publish your assets</a> to a web accessible directory:</p>

<p><code>php Publish assets to a web accessible directory
$assets = Yii::app()-&gt;getAssetManager()-&gt;publish(dirname(__FILE__) . '/assets');
</code></p>

<p>Also get <em>ClientScript</em> component to help you with registering your assets:</p>

<p><code>php Get &amp; assign ClientScript component to a variable
$cs = Yii::app()-&gt;getClientScript();
</code></p>

<p>Because <em>Prism</em> only needs the asset files added to page for it to run, all that is left is to register the assets:</p>

<p>```php Register assets to the page
$cs->registerCssFile($assets . &lsquo;/prism.css&rsquo;);</p>

<p>$cs->registerScriptFile($assets . &lsquo;/prism.js&rsquo;);
```</p>

<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerCssFile-detail"><code>registerCssFile()</code></a> and <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerScriptFile-detail"><code>registerScriptFile()</code></a> adds the CSS and JavaScript files to the rendered page. If you needed to run some JavaScript code to run the plugin then you will need to add a call to <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerScript-detail"><code>registerScript()</code></a> method which will add your JavaScript code to the page.</p>

<p>And this is it. You only need this much code to create a simple Yii extension. But of course it can be improved so continue reading if you want to get some ideas how to improve your extensions after having the minimal needed code.</p>

<h4>Step results</h4>

<p>By now your folder structure should be:</p>

<p>```bash Folder structure after second step (minimal working extension)
EPrism/
├── EPrism.php
└── assets</p>

<pre><code>├── prism.css
└── prism.js
</code></pre>

<p>```</p>

<p>The contents of <code>EPrism.php</code> file should be:</p>

<p>```php Extension contents after second step (minimal working extension)
class EPrism extends CWidget
{</p>

<pre><code>public function init()
{
    return parent::init();
}

public function run()
{
    $assets = Yii::app()-&gt;getAssetManager()-&gt;publish(dirname(__FILE__) . '/assets');

    $cs = Yii::app()-&gt;getClientScript();

    $cs-&gt;registerCssFile($assets . '/prism.css');

    $cs-&gt;registerScriptFile($assets . '/prism.js');
}
</code></pre>

<p>}
```</p>

<h2>3. Add customizations for script</h2>

<p>The extension currently does what it&rsquo;s supposed to do, but how about adding a couple of customizations like allowing to change the position of where script is inserted and disabling automatic highlighting.</p>

<h3>Change script position</h3>

<p>First add the class variable which will tell where JavaScript files should be inserted:</p>

<p><code>php Add variable to hold script position
public $scriptPosition;
</code></p>

<p>Then add the following code at the start of <code>init()</code> method:</p>

<p>```php Set to default position if none provided
if (is_null($this->scriptPosition)) {</p>

<pre><code>$this-&gt;scriptPosition = Yii::app()-&gt;clientScript-&gt;defaultScriptFilePosition;
</code></pre>

<p>}
```</p>

<p>It will make sure that if you don&rsquo;t set a custom script position for the extension, the default position for all script files will be used.</p>

<p>To finish it off just set the position then registering script file in <code>run()</code> method:</p>

<p><code>php Set the position of script through second parameter
$cs-&gt;registerScriptFile($assets . '/prism.js', $this-&gt;scriptPosition);
</code></p>

<p>Now if for example you need to have some script loaded in the <code>&lt;head&gt;</code> element while your application is configured to add all scripts before closing <code>&lt;body&gt;</code> it is very simple to do in a widget configuration.</p>

<h3>Disable automatic highlighting</h3>

<p><em>Prism</em> automatically highlights the code in your page, but you can turn it off by adding <code>data-manual</code> attribute to the <code>&lt;script&gt;</code> element which loads the plugin.</p>

<p>You will need to add two variables, one for holding all the options for script and another as a flag for manual highlighting:</p>

<p>```php Add variables to allow script customization
private $scriptOptions = [];</p>

<p>public $manualHighlight = false;
```</p>

<p>The <code>$scriptOptions</code> variable is private because you don&rsquo;t want anyone changing it (the widget will populate it with needed values). To make sure it happens add the following code in the <code>init()</code> method before returning parent method:</p>

<p>```php Populate script options from public variables
if ($this->manualHighlight) {</p>

<pre><code>$this-&gt;scriptOptions['data-manual'] = true;
</code></pre>

<p>}
```</p>

<p>And then add options then registering your script file:</p>

<p>```php Customize registered script with 3rd parameter
$cs->registerScriptFile(</p>

<pre><code>$assets . '/prism.js',
$this-&gt;scriptPosition,
$this-&gt;scriptOptions
</code></pre>

<p>);
```</p>

<p>Now you can disable the automatic highlighting when you call the widget just by setting <code>manualHighlight</code> attribute to <code>true</code>.</p>

<h3>Allow to use custom asset files</h3>

<p>To make extension re-usable and easy to use we added the JavaScript and CSS assets to it, but in some cases you might not want to use them. Maybe you only need to use a small portion of highlighter or maybe you have all the needed code in another file. To take care of those cases lets make asset files configurable using the following rules:</p>

<ul>
<li>If value is <code>false</code> don&rsquo;t register asset</li>
<li>If value is <code>null</code> register default asset</li>
<li>If value is <code>string</code> register the provided value</li>
</ul>


<p>To allow for this configuration first add the following class variables:</p>

<p>```php Add variables for asset files customization
public $cssFile</p>

<p>public $scriptFile
```</p>

<p>And then change the asset registration lines with extended logic:</p>

<p>```php Extend the asset registration
if ($this->cssFile !== false) {</p>

<pre><code>$cs-&gt;registerCssFile(
    $this-&gt;cssFile ? $this-&gt;cssFile : $assets . '/prism.css'
);
</code></pre>

<p>}</p>

<p>if ($this->scriptFile !== false) {</p>

<pre><code>$cs-&gt;registerScriptFile(
    $this-&gt;scriptFile ? $this-&gt;scriptFile : $assets . '/prism.js',
    $this-&gt;scriptPosition,
    $this-&gt;scriptOptions
);
</code></pre>

<p>}
```</p>

<p>This simple change allows you to be much more flexible with widget usage.</p>

<h4>Step results</h4>

<p>You folder structure hasn&rsquo;t changed so it will be the same as before.</p>

<p>The contents of <code>EPrism.php</code> file should be:</p>

<p>```php Extension contents with all improvements
class EPrism extends CWidget
{</p>

<pre><code>private $scriptOptions = [];

public $manualHighlight = false;

public $scriptPosition;

public $cssFile;

public $scriptFile;

public function init()
{
    if (is_null($this-&gt;scriptPosition)) {
        $this-&gt;scriptPosition = Yii::app()-&gt;clientScript-&gt;defaultScriptFilePosition;
    }

    if ($this-&gt;manualHighlight) {
        $this-&gt;scriptOptions['data-manual'] = true;
    }

    return parent::init();
}

public function run()
{
    $assets = Yii::app()-&gt;getAssetManager()-&gt;publish(dirname(__FILE__) . '/assets');

    $cs = Yii::app()-&gt;getClientScript();

    if ($this-&gt;cssFile !== false) {
        $cs-&gt;registerCssFile(
            $this-&gt;cssFile ? $this-&gt;cssFile : $assets . '/prism.css'
        );
    }

    if ($this-&gt;scriptFile !== false) {
        $cs-&gt;registerScriptFile(
            $this-&gt;scriptFile ? $this-&gt;scriptFile : $assets . '/prism.js',
            $this-&gt;scriptPosition,
            $this-&gt;scriptOptions
        );
    }
}
</code></pre>

<p>}
```</p>

<h2>Bonus points: Sharing is caring</h2>

<p>At this point you have a working, customizable extension which will kick ass in your project. But how about sharing it with your fellow programmers?</p>

<p>Simply add <strong>readme</strong> explaining how to use your extension and some comments in the code explaining what is what. Even if you&rsquo;re not going to share the extension with others, you will thank yourself later when the time comes to improve it. Include the <code>composer.json</code> file to make it possible to use your extension through <a href="https://getcomposer.org/">Composer</a> and just share it on <a href="https://github.com/">GitHub</a> or somewhere else for everyone to enjoy.</p>

<h2>Conclussion</h2>

<p>Now you can relax and take a well deserved cup of tea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EPrism Extension]]></title>
    <link href="http://ifdattic.com/eprism-extension"/>
    <updated>2014-01-02T16:44:58+02:00</updated>
    <id>http://ifdattic.com/eprism-extension</id>
    <content type="html"><![CDATA[<p>EPrism is an extension for Yii framework.</p>

<p>This extension is a wrapper for <a href="http://prismjs.com">Prism</a> by <a href="http://lea.verou.me">Lea Verou</a> (I only wrote the extension, not the syntax highlighter). <em>Prism</em> is a lightweight, extensible syntax highlighter, built with modern web standards in mind. This extension adds this great syntax highlighter using a <code>widget()</code> method.</p>

<!-- more -->


<h2>Features</h2>

<p>Here&rsquo;s some of the features provided by extension:</p>

<ul>
<li>easy to install and use;</li>
<li>simple configuration to better suit your needs;</li>
<li>adds a great JavaScript syntax highlighter.</li>
</ul>


<p>You can find more information and source code at <a href="https://github.com/ifdattic/EPrism">GitHub repository</a> or <a href="http://www.yiiframework.com/extension/eprism">Yii Framework website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Yii Application Development Cookbook SE book]]></title>
    <link href="http://ifdattic.com/review-of-yii-application-development-cookbook-se-book"/>
    <updated>2013-06-02T23:53:41+03:00</updated>
    <id>http://ifdattic.com/review-of-yii-application-development-cookbook-se-book</id>
    <content type="html"><![CDATA[<p>This is the review of <strong>Yii Application Development Cookbook (Second Edition)</strong> book by <strong><a href="http://rmcreative.ru/author">Alexander Makarov</a></strong>. The cookbook covers practical Yii application development tips which will help you develop better applications, and it also has recipes for important Yii features which are very useful to know.</p>

<!-- more -->


<p>This isn&rsquo;t the first time I read Yii Application Development Cookbook. The first time I read it was then it was still in per-order (the first edition), and because it was such a good book I was already thinking about reading it for the second time after I finish reading <a href="http://yii.larryullman.com/index.php">The Yii Book by Larry Ullman</a> (which by the way you should pre-order, at the end of the review I will explain why). So when I found that a second edition is coming out and got my hands of a review copy I was quite happy.</p>

<p>The book is written by Alexander Makarov who is an experienced engineer from Russia and has been a Yii framework core team member since 2010. He also was the technical reviewer for three other books related to Yii, so you can be sure the cookbook is written by someone who knows inner workings of Yii framework.</p>

<p>The cookbook has a similar format to other PacktPub cookbooks and is easy to follow, but you should have at least a basic understanding on how Yii framework works before starting with recipes (<a href="http://www.yiiframework.com/doc/guide">The Definitive Guide to Yii</a> is a good place to start). The recipes are split into 13 chapters that will show you how to use Yii efficiently.</p>

<p>Every recipe is split into smaller sections (depending on the recipe some sections might be missing):</p>

<ul>
<li><em>Introduction</em> &ndash; explanation about the recipe, what it solves or any other information that might be needed.</li>
<li><em>Getting ready</em> &ndash; contains instructions how to make this recipe work (e.g., setting up new application or database tables needed for a recipe).</li>
<li><em>How to do it</em> &ndash; is a step by step instructions of recipe code.</li>
<li><em>How it works</em> &ndash; gives a fuller explanation of the recipe code and how it works.</li>
<li><em>There&rsquo;s more</em> &ndash; instructions about how the recipe can be improved or expanded. It also contains URLs for further information about the subject.</li>
<li><em>See also</em> &ndash; a list of similar recipes about the topic.</li>
</ul>


<p>The cookbook contains 90 recipes (if my finger counting is correct) and covers a wide range of topics. Recipes could be categorized in: simple recipes (you&rsquo;re probably already using them), advanced (or good to know) recipes, complex recipes (which will need more fiddling around to completely understand how they work) and recipes which will make you question yourself &ldquo;Why the hell I&rsquo;m not using this in my application?&rdquo;. Some recipes will feel like a duplicates because the topic was more or less covered in another recipe. I also think that a couple more recipes would have made the book a lot more &ldquo;stronger&rdquo; (like a dedicated recipe for caching just a part of your application).</p>

<p>Below is the list of the chapters in a cookbook:</p>

<ol>
<li><strong>Under the Hood</strong> provides information about the most interesting Yii features. Even if you already have some experience with Yii framework you might not know about them or might not be sure how exactly they work. A couple of features covered in this chapter: events, import, autoloading, exceptions, components, widget configuration.</li>
<li><strong>Router, Controller, and Views</strong> is about how to connect different parts of the framework to make a good application. Recipes will explain how to use pretty URLs, how to write reusable actions, views and other handy things.</li>
<li><strong>AJAX and jQuery</strong> focuses on adding jQuery and JavaScript functionality to your application. The chapter is about Yii specific tricks and will explain how to render the content on the client side, manage assets and a couple more useful things.</li>
<li><strong>Working with Forms</strong> shows how Yii works with forms which is a big part of any application. The chapter will explain how to write custom validators, handle file uploads and create custom input widgets.</li>
<li><strong>Testing Your Application</strong> covers unit testing, functional testing and code coverage reports. Recipes follow a test-driven development approach and will explain how to set your environment and start writing your own tests. This is a very important chapter because as soon as your application starts to grow the chance of breaking something is rising, and it can lead to a lot of problems.</li>
<li><strong>Database, Active Record, and Model Tricks</strong> is about working with databases efficiently. It will explain how to get data from the database using Active Record, query builder and SQL. It will explain which method is best used for which scenario. The chapter also has recipes for how to connect to more than one database, how to use scopes, create complex queries along with a few more tricks.</li>
<li><strong>Using Zii Components</strong> covers the default Yii framework widgets which help you work with your data.</li>
<li><strong>Extending Yii</strong> shows how to create widgets, actions, modules, filters, commands which would be useful for your applications and community (if you decide to share them).</li>
<li><strong>Error Handling, Debugging, and Logging</strong> explains how to configure your application to help you as much as possible when the time comes to catch and fix some nasty bug.</li>
<li><strong>Security</strong> provides information how to make your application follow security principle &ldquo;filter input, escape output&rdquo;. Recipes will explain how to use filters, how to use role-based access control, prevent XSS, CSRF, and SQL injections.</li>
<li><strong>Performance Tuning</strong> will show how to make your application run smoothly until you start getting very high loads.</li>
<li><strong>Using External Code</strong> will explain how to use third-party code in you applications. It&rsquo;s very easy to use third-party stand-alone libraries or libraries from other frameworks and the recipes in this chapter will show different ways how to do it.</li>
<li><strong>Deployment</strong> gives various tips that are useful for then you&rsquo;re ready to deploy your application.</li>
</ol>


<p>The book takes about 13 hours to finish. This of course will depend on your reading speed, how long you will play with the code and a couple more things.</p>

<p>If you&rsquo;re serious about learning Yii framework you should definitely buy this book. Even if you already have a good understanding of Yii framework I&rsquo;m sure you will find recipes which will make you even better. Of course if you&rsquo;re just thinking about learning Yii framework you shouldn&rsquo;t start with this book. Here&rsquo;s my suggestion I always give for anyone wanting to learn Yii framework. You should start with <a href="http://www.yiiframework.com/doc/guide">The Definitive Guide to Yii</a> (if you don&rsquo;t feel like investing into a book before you&rsquo;re sure Yii framework is for you) or <a href="http://www.amazon.com/gp/product/B00A9TUK8E/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00A9TUK8E&amp;amp;linkCode=as2&amp;amp;tag=if015-20">Web Application Development with Yii and PHP by Jeffrey Winesett</a> or <a href="http://yii.larryullman.com/index.php">The Yii Book by Larry Ullman</a>. I would definitely suggest to get &ldquo;<em>The Yii Book</em>&rdquo; because it&rsquo;s a great book for newcomers to Yii framework. The book is still in pre-order but so far from that I read it&rsquo;s a great book. And a big plus is that your book will be upgraded after it will be updated for Yii 2 version, so you get two rabbits with one stone (because birds are too small for a nice meal). After that you should already have a good understanding about Yii framework and be able to develop applications with it, but to make them really great and get a better understanding of Yii you should read <a href="http://www.amazon.com/gp/product/B00BKZHDGS/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00BKZHDGS&amp;amp;linkCode=as2&amp;amp;tag=if015-20">Yii Application Development Cookbook by Alexander Makarov</a>. Or if you still don&rsquo;t feel like investing into your future as a web developer then you can go start reading wiki articles, documentation and dissecting Yii source code. There is also a <a href="http://www.amazon.com/gp/product/B00ATYE3WI/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00ATYE3WI&amp;amp;linkCode=as2&amp;amp;tag=if015-20">Yii Rapid Application Development Hotshot</a> book, which I personally haven&rsquo;t read, but my logic puts it as an optional book if you&rsquo;re still not confident enough about starting to develop great applications using Yii framework. Also, Yii framework has a great and friendly community so even if you get stuck somewhere, someone will help you out.</p>

<p>You can buy this book from <a href="http://www.amazon.com/gp/product/B00BKZHDGS/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00BKZHDGS&amp;amp;linkCode=as2&amp;amp;tag=if015-20">Amazon</a> or <a href="http://www.packtpub.com/yii-application-development-cookbook-2nd-edition/book">PacktPub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using application on production / development environment without making changes]]></title>
    <link href="http://ifdattic.com/using-application-on-production-development-environment-without-making-changes"/>
    <updated>2011-12-19T14:28:09+02:00</updated>
    <id>http://ifdattic.com/using-application-on-production-slash-development-environment-without-making-changes</id>
    <content type="html"><![CDATA[<p>When I was trying my first application on both development and production machines, the changes I had to make on index.php and config file was really starting to get on my nerves. I like working on my local machine as it’s much faster and I get much more configuration freedom.<!-- more --> But sooner or later (hopefully sooner as projects die from old age too) the time will come then you will have to test your application on a live environment. You might get lucky and your development and production environments will be the same, but most of the time it won’t. You framework on a production machine will be camping at different location, and you will need different credentials to get into ‘Database castle’ so it starts eating a lot of time and patience to keep these small changes between different environments. And you’re lucky if it’s only two machines, what about a third server with different configurations, what about the fourth.. oh what a nightmare..</p>

<p>After reading a few wiki articles about working on different environments, a lazy mage guild in my head started having a discussion, and after a little bit of trial and error, I ended up with a solution I’m quite happy about, at least for now. With a few simple modifications, now I can work on my local machine, and then I decide how it will work in “real world” I just upload the files and that’s it. No time spent changing the database connection settings or any other differences, I can just high five myself and have a happy grin, rather that pulling a bunch of my hair. You can find the full tutorial on it at <a href="http://www.yiiframework.com/wiki/289/use-application-on-production-development-environment-without-making-changes">Yii framework wiki article</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EWYMeditor Extension]]></title>
    <link href="http://ifdattic.com/ewymeditor-extension"/>
    <updated>2011-10-18T20:07:53+03:00</updated>
    <id>http://ifdattic.com/ewymeditor-extension</id>
    <content type="html"><![CDATA[<p>EWYMeditor is an extension for Yii framework.</p>

<p>This extension is a wrapper for <a href="http://www.wymeditor.org">WYMeditor</a> (I only wrote the extension and modifications, not the editor) which is a web-based WYSIWYM (What You See Is What You Mean) XHTML editor (not WYSIWYG).</p>

<!-- more -->


<h2>Features</h2>

<p>Here&rsquo;s some of the features provided by extension:</p>

<ul>
<li>different ways for adding editor to your forms;</li>
<li>easy to add plugins;</li>
<li>powerful and simple XHTML editor.</li>
</ul>


<p>You can find more information and source code at <a href="https://github.com/ifdattic/EWYMeditor">GitHub repository</a> or <a href="http://www.yiiframework.com/extension/ewymeditor">Yii Framework website</a>.</p>
]]></content>
  </entry>
  
</feed>
