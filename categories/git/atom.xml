<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/git/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2016-01-06T18:20:03+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to move changes between repositories (git cherry-pick)]]></title>
    <link href="http://ifdattic.com/how-to-move-changes-between-repositories-git-cherry-pick"/>
    <updated>2013-12-29T21:21:07+02:00</updated>
    <id>http://ifdattic.com/how-to-move-changes-between-repositories-git-cherry-pick</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently refactoring a project which has a lot of similar copies with some slight (most often) differences between them. A difference can be from a simple value to a complete feature. Of course the best way would be to move everything to be modular and configurable, but unfortunately in real life this doesn&rsquo;t always happen instantly (you can always dream about it).</p>

<!-- more -->


<p>So to save myself from doing any copy-paste I started playing around with different ideas how to do it using <em>git</em> (at least I would be able to play around with a terminal). At first experimentation started using <code>rebase</code>, but unfortunately after some bigger changes it began to mess the history. So then I started experimenting with a <code>cherry-pick</code> command. This gives me quite a good control of what commits to pick up and keeps the history clean. It just adds a little bit more typing.</p>

<p>If you feel confident in <em>git</em>, then check a &ldquo;<a href="https://gist.github.com/ifdattic/8174883#file-git-cherry-pick-between-repositories-sh">summary</a>&rdquo; of commands to get the idea.</p>

<p>Otherwise the step by step tutorial is available below (I tried my best to make it, but it can be improved a lot, suggestions are welcome). It doesn&rsquo;t contain any images as I don&rsquo;t think they are needed. Tutorial can be easily typed in the terminal, the only difference will be file system changes depending on operating system you are using.</p>

<h2>Step-by-step tutorial</h2>

<p>The set up for a tutorial is simple:</p>

<ul>
<li>The <strong>repoone</strong> directory contains <strong>README.md</strong> files with the line <em>This line will be the same between both repositories</em>.</li>
<li><strong>repoone</strong> directory is a <em>git</em> repository.</li>
<li>The <strong>repotwo</strong> directory is a copy of <strong>repoone</strong>.</li>
</ul>


<p>Now make a change in <strong>repoone</strong>:</p>

<p><code>bash
echo -e "\n\nThis will be moved from one repository to another\n\n" &gt;&gt; README.md
</code></p>

<p>And then commit the changes:</p>

<p><code>bash
git add README.md
git commit -m "Add line about moving"
</code></p>

<p>Now add another change which is only for <strong>repoone</strong>:</p>

<p><code>bash
echo "This is only for repoone" &gt; repoone.config
</code></p>

<p>And then commit the changes:</p>

<p><code>bash
git add repoone.config
git commit -m "Add repoone configuration"
</code></p>

<p>This should start feeling similar. Add one more change and commit it:</p>

<p>``` bash
echo &ldquo;<strong>*.config</strong> files contain the configuration values&rdquo; >> README.md</p>

<p>git add README.md
git commit -m &ldquo;Add explanation about .config files&rdquo;
```</p>

<p>For the next part of tutorial move to the second repository by executing: <code>cd ../repotwo</code>.</p>

<p>To start moving changes between the repositories first we need to add it as a remote and download objects and refs from it.</p>

<p><strong>Important:</strong> Note that I&rsquo;m using <em>Windows</em> for the code example so you should escape the <code>\</code>. The <code>D:\\gitcherrybetweenrepos\\repoone</code> will be different depending on your OS and/or file organization, replace as needed.</p>

<p><code>bash
git remote add repoone D:\\gitcherrybetweenrepos\\repoone
git fetch --progress --prune repoone
</code></p>

<p>Now when running the following command (<em>tip:</em> add it as an alias to your <code>.gitconfig</code>):</p>

<p><code>bash
git log --graph --decorate --pretty=oneline --abbrev-commit --all
</code></p>

<p>It will output the following results (<em>commit id</em>s might be different on your run, replace as needed):</p>

<p><code>bash
* f761364 (repoone/master) Add explanation about .config files
* 80a8db4 Add repoone configuration
* 2ac430f Add line about moving
* 5745330 (HEAD, master) Initial commit
</code></p>

<p>So we want to add <strong>2ac430f</strong> &amp; <strong>f761364</strong> commits to this repository. The <code>cherry-pick</code> command can be used for that:</p>

<p><code>bash
git cherry-pick 2ac430f
git cherry-pick f761364
</code></p>

<p>[<strong>Optional</strong>] Let&rsquo;s try it with a branch:</p>

<p>``` bash</p>

<h1>go back to the first repository</h1>

<p>cd ../repoone</p>

<h1>create a branch</h1>

<p>git checkout -b add-branch-example</p>

<h1>add some changes and commits</h1>

<p>touch branch-example.md</p>

<p>git add branch-example.md
git commit -m &ldquo;Initial commit&rdquo;</p>

<p>echo -e &ldquo;\n\nThis line only for repoone\n\n&rdquo; >> README.md
git add README.md
git commit -m &ldquo;Add repoone specific commit&rdquo;</p>

<p>date >> branch-example.md
git add branch-example.md
git commit -m &ldquo;Add current date value&rdquo;
```</p>

<p>Leave <strong>repoone</strong> here and return to <strong>repotwo</strong> (also at the same time retrieve the data from <strong>repoone</strong>):</p>

<p>``` bash
cd ../repotwo</p>

<h1>check the branches of repoone</h1>

<p>git remote show repoone</p>

<h1>imagine we got a lot of stuff going on in the remote repository</h1>

<h1>so just get back one branch and no tags</h1>

<p>git fetch &mdash;progress -n repoone refs/heads/add-branch-example:refs/remotes/repoone/add-branch-example</p>

<h1>check the git log</h1>

<p>git log &mdash;graph &mdash;decorate &mdash;pretty=oneline &mdash;abbrev-commit &mdash;all
* 13b1080 (repoone/add-branch-example) Add current date value
* 94b5a67 Add repoone specific commit
* 240ae14 Initial commit
* f761364 (repoone/master) Add explanation about .config files
* 80a8db4 Add repoone configuration
* 2ac430f Add line about moving
| * 78427ed (HEAD, master) Add explanation about .config files
| * 54bd60b Add line about moving
|/
* 5745330 Initial commit
```</p>

<p>Now get the changes what are needed from the branch and merge it back to the master:</p>

<p>``` bash
git checkout -b add-branch-example</p>

<p>git cherry-pick 240ae14
git cherry-pick 13b1080</p>

<p>git checkout master
git merge &mdash;no-ff add-branch-example
```</p>

<p>And because we&rsquo;re done the branch and remote can be removed (cleanup time):</p>

<p><code>bash
git branch -d add-branch-example
git remote rm repoone
</code></p>

<h2>Conclusion</h2>

<p>You probably won&rsquo;t use this trick in your everyday projects, but it can definitely come in handy in case you will get into similar situation like me (refactoring a lot of copies of similar project).</p>

<p>What tricks you&rsquo;re using for similar situations?</p>
]]></content>
  </entry>
  
</feed>
