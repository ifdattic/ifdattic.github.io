<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | ifdattic]]></title>
  <link href="http://ifdattic.com/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2015-12-08T12:13:42+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Integration of Node.js Project Using Shippable]]></title>
    <link href="http://ifdattic.com/continuous-integration-nodejs-project-using-shippable"/>
    <updated>2015-12-08T11:02:05+02:00</updated>
    <id>http://ifdattic.com/continuous-integration-of-node-dot-js-project-using-shippable</id>
    <content type="html"><![CDATA[<p>A while ago I wrote an article <a href="/continuous-integration-php-project-using-shippable">how to use Shippable as continuous integration service for PHP project</a>. This is similar article except that it is for a Node.js project.</p>

<p>One of the biggest benefits of Shippable is that you are able to test private repository before needing to pay for it (good for hobby projects which you don&rsquo;t know there they might lead).</p>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#initial-config">Initial configuration</a></li>
<li><a href="#environment-variables-mongodb">Environment variables &amp; MongoDB</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#update-nodejs-version">Update Node.js version</a></li>
<li><a href="#enable-project">Enable project in Shippable</a></li>
<li><a href="#code-coverage">Cove coverage</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>To start using this service you just need to sign up using your GitHub or BitBucket account. If you want to test private repositories you will have to give Shippable permission to them (by default it only sees public repositories). The code used in this article is available at <a href="https://github.com/ifdattic/javascript-shippable-ci-article-code">GitHub</a>. It&rsquo;s an Express.js project, but with small changes any Node.js project could be tested.</p>

<h2>Initial configuration <a name="initial-config"></a></h2>

<p>Your project needs to have a <code>shippable.yml</code> configuration file. In it you define scripts which will be run, environment variables, language, versions to test, etc.</p>

<p>First let&rsquo;s configure Shippable to test a Node.js project and do it for <code>5.1.1</code> version. Add the following to your <code>shippable.yml</code> file:</p>

<p>```yml
language: node_js</p>

<p>node_js:</p>

<pre><code>- 5.1.1
</code></pre>

<p>```</p>

<p>To have our project working we need to install modules using <code>npm</code>:</p>

<p>```yml
before_script:</p>

<pre><code>- npm install
</code></pre>

<p>```</p>

<h2>Environment variables &amp; MongoDB <a name="environment-variables-mongodb"></a></h2>

<p>The application uses MongoDB for persistence. It&rsquo;s very easy to include services with Shippable.</p>

<p>You don&rsquo;t want to hard code configuration variables for your application. To fix that we will use the environment variables to configure the application depending on the environment it is in. You can set the global environment variables which are the same between builds and you can set simple environment variables which are different between builds (extending your testing matrix). If you have environment variables which you don&rsquo;t want to show (like passwords) you can add it as a secure environment variable.</p>

<p>To get the secure environment variable you need to go to project settings. It has a panel &ldquo;Encrypt.&rdquo; You provide the environment variables in the box and after clicking &ldquo;Encrypt&rdquo; you get the snippet of code you can paste in your <code>shippable.yml</code> file.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23308845230/in/dateposted-public/" title="shippable-secure-environment-variable"><img src="https://farm1.staticflickr.com/677/23308845230_5b6041b93f_c.jpg" width="800" height="530" alt="shippable-secure-environment-variable"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Then add the environment variable and MongoDB service to <code>shippable.yml</code> file:</p>

<p>```yml
env:</p>

<pre><code>global:
    - XUNIT_FILE=shippable/testresults/result.xml
    # MongoDB URL
    - secure: lPx/1fe8RFUSPv1F1D3Fujd14afop7NPSAF6IirmO4YbfRc3MkiTHbkSuiQzniOccC5TC2kd1//hdBd9vnSOCVpS1+3Xs4ZVKj8VfnN2nEokMTnHGYuwB36tW1js/u734NKBl+R5se+140bAORjcrpxcSyQjlDDCCdgZbx00M2FvX4kDPXtZ17z9h2eViC70im5q4qoapzsu1+6U6BjAYnF+QAGoxBe1X3FOjlOgRo/G4/Z6E8nVgNMnx5jqX380ImSC8Hsy7D8MX6U0NelnhjBSc3NrWVYbCNNYVWQA4Zw8aXlZzf3gPF0zhdGt1eBUPgNmxJyXCF4rxsfQjI99zA==
</code></pre>

<p>services:</p>

<pre><code>- mongodb
</code></pre>

<p>```</p>

<p>At the moment of writing there is issues while connecting to the default MongoDB service. If you have the same issue you might need to install the MongoDB manually. To do that add the <code>installMongo.sh</code> script to your repository:</p>

<p>```bash</p>

<h1>!/bin/bash -x</h1>

<p>sudo apt-key adv &mdash;keyserver hkp://keyserver.ubuntu.com:80 &mdash;recv 7F0CEB10</p>

<p>echo &lsquo;deb <a href="http://downloads-distro.mongodb.org/repo/ubuntu-upstart">http://downloads-distro.mongodb.org/repo/ubuntu-upstart</a> dist 10gen&rsquo; | sudo tee /etc/apt/sources.list.d/mongodb.list
sudo apt-get update
sudo apt-get install -y mongodb-org=2.6.11 mongodb-org-server=2.6.11 mongodb-org-shell=2.6.11 mongodb-org-mongos=2.6.11 mongodb-org-tools=2.6.11</p>

<p>sudo mkdir -p /data/db</p>

<h1>Pin the current version</h1>

<p>sudo echo &ldquo;mongodb-org hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-server hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-shell hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-mongos hold&rdquo; | sudo dpkg &mdash;set-selections
sudo echo &ldquo;mongodb-org-tools hold&rdquo; | sudo dpkg &mdash;set-selections</p>

<h1>replace closed port &amp; bing IP</h1>

<p>sudo sed -i &rsquo;s/#port = 27017/port = 27017/&lsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/bind_ip = 127.0.0.1/bind_ip = 0.0.0.0/&rsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/# nojournal = true/nojournal = true/&lsquo; /etc/mongod.conf
sudo sed -i &rsquo;s/#noprealloc = true/noprealloc = true/&rsquo; /etc/mongod.conf
```</p>

<p>And extend your <code>shippable.yml</code> with:</p>

<p>```yml
install:</p>

<pre><code>- . installMongo.sh
- sudo mongod --smallfiles &gt; /dev/null &amp;
</code></pre>

<p>```</p>

<h2>Testing <a name="testing"></a></h2>

<p>The tests are run through custom <code>npm</code> script. Add the following to run the tests:</p>

<p>```yml
script:</p>

<pre><code>- npm run shippable
</code></pre>

<p>```</p>

<h2>Update Node.js version <a name="update-nodejs-version"></a></h2>

<p>At the time of writing Shippable doesn&rsquo;t provide Node.js versions 4 or higher. To fix that add the following which will update and NVM and install the correct Node.js version.</p>

<p>```yml
build_image: shippableimages/ubuntu1404_nodejs</p>

<p>before_install:</p>

<pre><code>- sudo apt-get install -y --force-yes build-essential
- curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.27.1/install.sh | bash
- source ~/.nvm/nvm.sh &amp;&amp; nvm install $SHIPPABLE_NODE_VERSION
- node --version
</code></pre>

<p>```</p>

<h2>Enable project in Shippable <a name="enable-project"></a></h2>

<p>First choose the subscription to use and when in projects section click the big plus icon which says &ldquo;Enable Project.&rdquo;</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23495966402/in/dateposted-public/" title="shippable-choose-subscription"><img src="https://farm1.staticflickr.com/628/23495966402_66458459ef_o.png" width="311" height="85" alt="shippable-choose-subscription"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>Force a synchronization if the repository you want is not in the list. Click on key icon to enable the project.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23495966152/in/dateposted-public/" title="shippable-enable-project"><img src="https://farm6.staticflickr.com/5693/23495966152_b074facd7d_c.jpg" width="800" height="744" alt="shippable-enable-project"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<p>After it is done you can manually start a build or it will happen automatically the next time you will push a commit.</p>

<p>After a while a build should finish and you should get the similar view.</p>

<p><a data-flickr-embed="true"  href="https://www.flickr.com/photos/ifdattic/23236632269/in/dateposted-public/" title="shippable-build"><img src="https://farm6.staticflickr.com/5810/23236632269_6400f9a983_c.jpg" width="800" height="509" alt="shippable-build"></a><script async src="http://ifdattic.com//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p>

<h2>Cove coverage <a name="code-coverage"></a></h2>

<p>If you need code coverage for your code you can do it with Istanbul. Replace the <code>shippable</code> script in <code>package.json</code> with:</p>

<p><code>
./node_modules/.bin/istanbul cover _mocha --dir shippable/codecoverage --report cobertura -- -R xunit-file
</code></p>

<h2>Conclusion <a name="conclusion"></a></h2>

<p>With these small changes you should have a CI testing for your application. It will improve your code quality and give you a piece of mind knowing that the changes you made will be tested even if you forgot to run the tests on your development machine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T19:29:10+02:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/axt6O6myUvs?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<p><code>bash
docker pull mongo:latest
</code></p>

<p>And when launch your MongoDB container:</p>

<p><code>bash
docker run -v "$(pwd)":/data --name mongo -d mongo mongod --smallfiles
</code></p>

<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<p>```bash</p>

<h1>display only running containers</h1>

<p>docker ps</p>

<h1>or if you want all containers displayed</h1>

<p>docker ps -a
```</p>

<p>There are two options for connecting to your Mongo database.</p>

<p>```bash
docker run -it \</p>

<pre><code>--link mongo:mongo \
--rm mongo sh \
-c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'
</code></pre>

<h1>or on one line for easier copy-paste</h1>

<p>docker run -it &mdash;link mongo:mongo &mdash;rm mongo sh -c &lsquo;exec mongo &ldquo;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&rdquo;&rsquo;
```</p>

<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<p>```bash
docker exec -it 442c2541fe1a bash # by ID</p>

<h1>or</h1>

<p>docker exec -it mongo bash # by Name
```</p>

<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<p><code>bash
mongo
db.col.insert({"a": 4})
db.col.find().pretty()
</code></p>

<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<iframe width="732" height="412" src="https://www.youtube.com/embed/bZFXxhkrD44?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<p><code>bash
ls -la db
</code></p>

<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<p><code>bash
mongodump --db test --out /data/test-backup
</code></p>

<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<p><code>bash
mongorestore --db test-restored /data/test-backup/test
</code></p>

<h2>Node.js</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/0frJFB9toFQ?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<p><code>bash
docker pull node:latest
</code></p>

<p>To launch the NodeJS container run:</p>

<p><code>bash
docker run -it --rm node
</code></p>

<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<p><code>bash
console.log('It works!!')
</code></p>

<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<p><code>bash
docker run -it --name node -v "$(pwd)":/data --link mongo:mongo -w /data -p 8082:8082 node bash
</code></p>

<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<p>```bash</p>

<h1>execute commands in container</h1>

<p>cd hw3-2and3-3/blog
npm install
node app.js
```</p>

<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<p>```javascript
// Original connect
MongoClient.connect(&lsquo;mongodb://localhost:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using environment variables
MongoClient.connect(&lsquo;mongodb://&rsquo;+process.env.MONGO_PORT_27017_TCP_ADDR+&lsquo;:&rsquo;+process.env.MONGO_PORT_27017_TCP_PORT+&lsquo;/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});</p>

<p>// Connect using hosts entry
MongoClient.connect(&lsquo;mongodb://mongo:27017/blog&rsquo;, function(err, db) {</p>

<pre><code>// ...
</code></pre>

<p>});
```</p>

<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<p>```bash</p>

<h1>from host OS terminal</h1>

<p>docker run \</p>

<pre><code>--name nodeapp \
-v "$(pwd)":/data \
--link mongo:mongo \
-w /data/hw3-2and3-3/blog \
-p 8082:8082 \
-d node node app.js
</code></pre>

<h1>or on one line for easy copy-paste</h1>

<p>docker run &mdash;name nodeapp -v &ldquo;$(pwd)&rdquo;:/data &mdash;link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
```</p>

<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<p>```bash</p>

<h1>to see running containers</h1>

<p>docker ps</p>

<h1>to check output of container</h1>

<p>docker logs nodeapp</p>

<h1>to tail the output of container</h1>

<p>docker logs -f nodeapp</p>

<h1>to stop running container</h1>

<p>docker stop nodeapp
```</p>

<h2>MongoDB Course Manual Validation Tips</h2>

<iframe width="732" height="412" src="https://www.youtube.com/embed/TwzNfD1L3vM?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt" frameborder="0" allowfullscreen></iframe>


<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<p><code>bash
node hw3-2validate.js --db mongodb://mongo:27017/blog
</code></p>

<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Node.js the Right Way Book]]></title>
    <link href="http://ifdattic.com/review-nodejs-right-way-book"/>
    <updated>2014-12-25T16:08:52+02:00</updated>
    <id>http://ifdattic.com/review-of-node-dot-js-the-right-way-book</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://ecx.images-amazon.com/images/I/51+VjuSvKJL._SL250_.jpg">http://ecx.images-amazon.com/images/I/51+VjuSvKJL._SL250_.jpg</a>" title="&lsquo;Node.js the Right Way Book Cover&rsquo; &lsquo;Node.js the Right Way Book Cover&rsquo;" ></p>

<p>I&rsquo;m a big fan of learning something new. After enrolling into <a href="https://university.mongodb.com/courses/M101JS/about">MongoUniversity MongoDB course</a> where all the examples would be in Node.js, decided it would be great time to at least get acquainted with Node.js. Then as the luck would have it, someone tweeted about &ldquo;<a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Node.js The Right Way</a> by <a href="https://twitter.com/hexlib">Jim. R. Wilson</a>&rdquo; from <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>, which is always a great place to look for books. As the ebook version is available on Amazon (screw the discounts, I require my ebooks to be locked into the Amazon ecosystem), I bought it. Now I knew how I will be spending my mornings for a while.</p>

<!-- more -->


<p>The book is made from the following chapters:</p>

<ol>
<li><strong>Getting Started</strong> introduces the Node.js event loop, outlines the five aspects of Node.js development and provides instructions you would need for the following chapters.</li>
<li><strong>Wrangling the File System</strong> will help you write your first Node.js program &ndash; using Node&rsquo;s filesystem tools to create asynchronous, nonblocking file utilities.</li>
<li><strong>Networking with Sockets</strong> is were you will create a TCP servers and client programs for accessing them. This chapter will offer insight into Node application design and provide experience creating testable and fault-tolerant systems.</li>
<li><strong>Robust Message-Passing</strong> will introduce you to using third-party libraries. Using ØMQ (ZeroMQ) you will create suites of programs that work together in concert, and you will learn the clustering tools for managing them.</li>
<li><strong>Accessing Databases</strong> introduces databases and how to interact with them asynchronously in Node. The database created in this chapter is the foundation for RESTful APIs you&rsquo;ll be developing in later chapters.</li>
<li><strong>Scalable Web Services</strong> chapter will use Express, a popular Node.js web framework for routing requests. It will introduce objects called promises for managing asynchronous code flows and how to couple them in interesting ways with generator functions.</li>
<li><strong>Web Apps</strong> is the final chapter were you will build a single-page web application for integrating with web services created in previous chapters. In this chapter you will be using Passport module for authenticating with Google account credentials and storing session data in Redis.</li>
</ol>


<p>Each chapter provides some aspects of Node.js development like: Architecture and Core, Patterns, JavaScriptisms, Supporting Code.</p>

<p>A few issues (suggestions) for the book is that code samples could be more concise. It does not take any value away from them, but would just be nicer.</p>

<p>The database chapter requires a dataset which extracts to at least 500 MB (didn&rsquo;t wait for it to finish). My suggestion would be to provide a cropped dataset or simply add a note to kill the extraction at some point (just extract enough to make the examples work).</p>

<p>In my opinion it would be great if book provided a Vagrant or Docker file for having an environment which contains all the required software and working code examples.</p>

<p>The book has a very nice flow. Providing a lot of code examples and giving explanations for each line (block) of code. Still, you should have at least some JavaScript knowledge.</p>

<p>At the end of each chapter, questions and exercises are provided for improving your knowledge of what you learned from the chapter.</p>

<p>If you want to learn Node.js in my opinion this is the great book for that. It would provide you with enough knowledge where you will be confident to start using it in your everyday life and continue learning it through practice.</p>

<p>You can buy it from <a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Amazon</a> or <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>.</p>
]]></content>
  </entry>
  
</feed>
