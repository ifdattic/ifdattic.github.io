<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ifdattic]]></title>
  <link href="http://ifdattic.com/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2015-06-30T10:32:04+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review of Dutch PHP 2015 Conference]]></title>
    <link href="http://ifdattic.com/dutch-php-2015-conference-review"/>
    <updated>2015-06-29T19:51:19+02:00</updated>
    <id>http://ifdattic.com/review-of-dutch-php-2015-conference</id>
    <content type="html"><![CDATA[<p>On June of 2015 I attended the Dutch PHP conference and this is a short review of it.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19264000576" title="Dutch PHP 2015 Conference by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/408/19264000576_4272fa2fa2_z.jpg" width="640" height="303" alt="Dutch PHP 2015 Conference"></a></p>

<p>The conference was at Amsterdam RAI venue which is outside city center. Organizers provided directions how to get to it from city center and it&rsquo;s not hard to find. Depending on where you&rsquo;re staying for conference it might have been easier or harder to reach it. I heard some people that they would like it closer to their hotel as they don&rsquo;t want to figure out how to use public transport or take it for 20 minutes to get to the venue. I didn&rsquo;t had a direct route from my airbnb place to the venue, but it was not a big problem for me. For someone who likes exploring places by choosing a direction and walking in it a 45 minute walk to venue is a good way to freshen up my head.</p>

<p>Venue is big and well supported by staff. Signs make it easy to find where you need to go. The staff is always available to provide you with refreshments (tea, coffee, juice, water) and clean up. Stand up tables make it easy to discuss with other people while having a refreshment and sitting desks are comfortable if you need to do some work.</p>

<p>This might be normal for Dutch people, but I don&rsquo;t think of a bunch of cold sandwiches as a normal lunch. For someone who tries to avoid carbs it&rsquo;s nerving to think how many days will be spent feeling like crap from all that bread. I guess this is my own problem for not preparing and bringing something to eat. Still, from all my experience I personally hate Dutch food, not my cuisine.</p>

<p>On first day I was attending <a href="https://joind.in/talk/view/14190">Introduction to Event Sourcing and CQRS</a> by <a href="https://twitter.com/beausimensen">Beau D. Simensen</a> &amp; <a href="https://twitter.com/willemjanz">Willem-Jan Zijderveld</a>. Lately I&rsquo;m very into Domain Driven Design and similar ways of improving applications so this workshop gave a good introduction into CQRS. The first part of workshop was explaining all the principles. Found that trying to follow the host and do it on my own laptop wasn&rsquo;t very easy due to it going too fast and having some issues. After deciding to just follow the host found the experience much better. This allowed to focus better on that is going on rather than trying to multi-task. The second part of the workshop was doing the same things, but using Broadway library. Think the workshop was well done. It might be better if the git repository was tagged after each step, so for anyone trying to follow along if they are getting behind they could just checkout the step being currently done.</p>

<p>After the workshops anyone who wanted could attend code night. During it you could work on one of available open source projects helping to improve them. It had drinks, pizza and great people to talk &amp; work with. At the end of code night during the raffle it was possible to win some prizes. It was well organized and think the code night was a success. Watch the time lapse videos of it (<a href="https://www.youtube.com/watch?v=ShfMqa57PMM">part 1</a> &amp; <a href="https://www.youtube.com/watch?v=R4d04rImZAU">part 2</a>).</p>

<p>The conference had a lot of sponsors. You could play games, pick up swag, learn about new tools in sponsor booths. At the end of the conference it was possible to win prizes through the raffle.</p>

<p>Only the second talk was delayed by 15 minutes, but otherwise all conference run like well maintained clock. All talks were on time, none went over, good amount of breaks between tasks.</p>

<p>For each time slot 5 different talks were going at the same time. For anyone interested an un-official talks were available. The talks were very well done with all/most of the problems fixed (from the talks I attended). The talks weren&rsquo;t just about PHP so you could always choose topics which interest you most (devops, testing, JavaScript, CSS, etc.).</p>

<p>The opening keynote was <a href="https://joind.in/talk/view/14478">Hacking Foresight from Hindsight</a> by <a href="https://twitter.com/joshholmes">Josh Holmes</a>. The important point of the talk was that we shouldn&rsquo;t try to do everything ourselves and should try to find mentors who will help us grow faster professionally &amp; personally.</p>

<p>For the first talk I went to <a href="https://joind.in/talk/view/14208">Get some hypermedia up in your API</a> by <a href="https://twitter.com/victorwelling">Victor Welling</a>. During it he explained how to solve problems like documentation, versioning, visibility of your API by extending with with HAL.</p>

<p>I&rsquo;m a tall guy and ergonomically it&rsquo;s more comfortable to stay farther away from the screen. At that moment decided to experiment with sitting in the front rows. You don&rsquo;t need to spend all the time looking at the screen and found that I enjoyed having a closer proximity/relationship with a speaker much more than being able to see the screen all the time.</p>

<p>The second talk I chose was <a href="https://joind.in/talk/view/14211">Automation made simple with Ansible</a> by <a href="https://twitter.com/erikaheidi">Erika Heidi</a>. I played a little with Ansible before. Repetition helps with retaining information. The talk gradually explains what is possible with Ansible and after it you should be in a good position to play around with it in your projects. After talking with Erika between talks, I think now I know how my phone feels when I plug it to charge the batteries. She is a very positive girl and talking with her you can feel your own batteries charging.</p>

<p>Had a hard choice for third talk as Mathias Verraes &amp; Matthias Noback was talking at the same slot. Chose to go to <a href="https://joind.in/talk/view/14214">Towards Modelling Processes</a> by <a href="https://twitter.com/mathiasverraes">Mathias Verraes</a>. Talk had a simulated event storming and the main point of talk was explaining how to think in temporal model, not just structural.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18667538394" title="DPC15 - Towards Modelling Processes by Mathias Verraes by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/256/18667538394_8203dbba5e_z.jpg" width="640" height="480" alt="DPC15 - Towards Modelling Processes by Mathias Verraes"></a></p>

<p>Was a little late for <a href="https://joind.in/talk/view/14219">Command Bus to Awesome Town</a> by <a href="https://twitter.com/rosstuck">Ross Tuck</a> talk. The speaker was lively with enough jokes between the slides. The talk explained what is command bus &amp; why/how you might want to use one in your project.</p>

<p>During the conference I went to enough talks about event sourcing and similar topics, but going to <a href="https://joind.in/talk/view/14226">Let&rsquo;s Write Some History!</a> by <a href="https://twitter.com/willemjanz">Willem-Jan Zijderveld</a> helped me to understand a few more concepts I was missing/confused.</p>

<p>For last first day talk I chose <a href="https://joind.in/talk/view/14231">Journey into your Lizard Brain</a> by <a href="https://twitter.com/rdohms">Rafael Dohms</a>. During it he shared a personal story, explained how developers think &amp; gave tips on how to become a better developer. One of the most important points in my opinion would be to focus on the current moment. I think conferences could have more of &ldquo;soft&rdquo; talks as I find them refreshing when mixed with technical talks.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18667539664" title="DPC15 - Journey into your Lizard Brain by Rafael Dohms by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/469/18667539664_38611826a4_z.jpg" width="640" height="480" alt="DPC15 - Journey into your Lizard Brain by Rafael Dohms"></a></p>

<p>The Conference Social was at Akhnaton. Organizers provided directions how to get from venue to it. It was easy to find the bar and after arrival everyone received drink tokens. Received enough tokens to spend the rest of the evening with a bottle of water in my hand (might be a different experience depending on your drinking habits).</p>

<p>The day before I decided to skip the morning talk. Even thought woke up refreshed I&rsquo;m trying to learn to make a decision and keep with it (unless the situation changes).</p>

<p>For second talk I went to <a href="https://joind.in/talk/view/14238">Hexagonal architecture &ndash; message-oriented software design</a> by <a href="https://twitter.com/matthiasnoback">Matthias Noback</a>. The talk was well paced, explaining how to improve your applications by focusing on messages.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19293946821" title="DPC15 - Hexagonal architecture - message-oriented software design by Matthias Noback by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/445/19293946821_426765221f_z.jpg" width="640" height="480" alt="DPC15 - Hexagonal architecture - message-oriented software design by Matthias Noback"></a></p>

<p>I think the composer is a wonderful tool making my life much easier. I think I know enough of it to do what is needed and advise others of best practices (like using CLI and not editing JSON file). It never hurts to make sure so I went to <a href="https://joind.in/talk/view/14245">Composer The Right Way</a> by <a href="https://twitter.com/rdohms">Rafael Dohms</a>. The talk explained some parts which you might not use so often &amp; how to use composer better. If you don&rsquo;t use composer (or know what it is) stop making your life harder!</p>

<p>For the fourth talk was thinking about going to <a href="https://joind.in/talk/view/14248">Implement Single Sign On easily with Symfony</a> by <a href="https://twitter.com/Saro0h">Sarah Khalil</a>. When considered that can&rsquo;t think of anything were I would need to implement it in the near future and need to mix a less technical talk for better ratio. Went to <a href="https://joind.in/talk/view/14249">Software architecture in an agile age</a> by <a href="https://twitter.com/harrieverveer">Harrie Verveer</a>. Maybe it&rsquo;s the trauma from college when had to do a lot of UML diagrams or maybe being sleepy after lunch, but expected a little more from the talk. It was still a good talk explaining how to work better on your projects. I agree with most important idea what no matter which format you use it&rsquo;s good to make at least few notes/diagrams before you start building things.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/19284034222" title="DPC15 - Software architecture in an agile age by Harrie Verveer by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/357/19284034222_5f5d050fb2_z.jpg" width="640" height="480" alt="DPC15 - Software architecture in an agile age by Harrie Verveer"></a></p>

<p>For last talk chose to go to <a href="https://joind.in/talk/view/14253">Adding 1.21 Gigawatts to Application with RabbitMQ</a> by <a href="https://twitter.com/asgrim">James Titcumb</a>. The talk is very technical with code examples and at some points it can feel a little dry. We talked with a speaker about how it can be improved. The talk explains very well how to use RabbitMQ in your projects, including pitfalls to avoid.</p>

<p>The closing keynote <a href="https://joind.in/talk/view/14639">Behind the Scenes of Maintaining an Open Source Project</a> was done by <a href="https://twitter.com/seldaek">Jordi Boggiano</a> about how open source project looks behind the scenes. He went through different stages of it (maintenance, anger, etc.) including anecdotes and personal stories. Staying behind the screen we often forget about the world behind our backs and that open source is only possible thanks to the community and people who spend their energy &amp; time.</p>

<p>I enjoyed the conference a lot and really happy about attending it. It&rsquo;s was nice to put Twitter/GitHub profiles with real people. Would like to thank the organizers, speakers, audience for three great days of new experiences &amp; sharing knowledge. In the end I would like to borrow (in other words steal) the quote from <a href="https://twitter.com/michellesanver">Michelle Sanver</a> which summarizes what is a conference very well &ndash; &ldquo;<em><a href="https://blog.liip.ch/archive/2015/02/10/conferences-that-are-parties-with-talks-phpbenelux-and-sunshinephp.html">A conference is a party with talks</a></em>&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure phpspec for DDD]]></title>
    <link href="http://ifdattic.com/configure-phpspec-for-ddd"/>
    <updated>2015-06-24T07:16:35+02:00</updated>
    <id>http://ifdattic.com/configure-phpspec-for-ddd</id>
    <content type="html"><![CDATA[<p>A lot of my architecture for DDD is taken from <a href="http://programmingarehard.com/">David Adams</a>, <a href="http://verraes.net/">Mathias Verraes</a>, <a href="http://williamdurand.fr/">William Durand</a> &amp; other smart people.</p>

<p>While developing an application I try to keep the code separated. I also love testing and one wonderful tool which helps me produce good quality code is <a href="http://www.phpspec.net/">phpspec</a>. The issue is what by default it keeps all the tests in the root directory.</p>

<p>phpspec requires some configuration to keep the tests where they belong. You might notice that I&rsquo;m using Symfony framework for my application. When you do DDD development the framework used isn&rsquo;t that important. My domain login is kept in <code>src/Domain</code> directory &amp; infrastructure code is kept as bundles in <code>src</code> directory.</p>

<p>The following configuration is required to make phpspec work correctly (finding specs, creating/updating specs, running specs):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">suites</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">core_suite</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Domain\Core</span>
</span><span class='line'>        <span class="l-Scalar-Plain">psr4_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Domain\Core</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/Domain/Core</span>
</span><span class='line'>        <span class="l-Scalar-Plain">src_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/Domain/Core</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Spec</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">user_infrastructure_suite</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">UserBundle</span>
</span><span class='line'>        <span class="l-Scalar-Plain">psr4_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">UserBundle</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/UserBundle</span>
</span><span class='line'>        <span class="l-Scalar-Plain">src_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/UserBundle</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Spec</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">user_suite</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">namespace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Domain\User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">psr4_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Domain\User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/Domain/User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">src_path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">src/Domain/User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">spec_prefix</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Spec</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the file as <code>phpspec.yml</code> in root directory.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18485964273" title="Configure phpspec for DDD by Andrew Marcinkevičius, on Flickr"><img src="https://c4.staticflickr.com/4/3898/18485964273_ac0e4e5e5b_z.jpg" width="640" height="296" alt="Configure phpspec for DDD"></a></p>

<p>If you would run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>phpspec describe Domain/User/ValueObject/UserName
</span></code></pre></td></tr></table></div></figure>


<p>It should create a file <code>UserNameSpec.php</code> in <code>src/Domain/User/Spec/ValueObject</code>.</p>

<p>Some lines in suites might look like duplication, but I found that you have to set all the options. Otherwise there are issues with file creation/updating. You could skip <code>spec_prefix</code> option if you don&rsquo;t mind specifications directory in lowercase.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of ZivaMind Meditation Course]]></title>
    <link href="http://ifdattic.com/review-zivamind-meditation-course"/>
    <updated>2015-06-18T14:29:48+02:00</updated>
    <id>http://ifdattic.com/review-of-zivamind-meditation-course</id>
    <content type="html"><![CDATA[<p>If I notice something to be continuously mentioned, it might have some truth to it. When looking into that top performers (like <a href="http://fourhourworkweek.com/2015/02/02/arnold-schwarzenegger/">Tim Ferriss, Arnold Schwarzenegger</a>, etc.) do, most of the time the meditation is mentioned. <strong>As I would like to be top performer after I grow up meditation is something I want to have as a habit</strong>. Had a powerful experience once so know it can be a powerful tool.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/18736614889" title="Review of ZivaMind Meditation Course by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/1/308/18736614889_f916ca658e_z.jpg" width="640" height="320" alt="Review of ZivaMind Meditation Course"></a></p>

<p>The problem is what I&rsquo;m <strong>having problems finding one which would work for me</strong>. Most of them are spiritual. With some hairy guru, flowers and other elements which should bring peace &amp; bliss. For me the line between spiritual enough &amp; too spiritual is thin. I have nothing against it &amp; I&rsquo;m happy if it works for other people. For me, it makes me cringe. Just like the word God. (I like using it when cursing. Don&rsquo;t put any weight to it as it means nothing to me. Might throw away a great book just for using that word too much.) To give some anchor point to me even <a href="https://www.headspace.com/">Headspace application</a> is too spiritual. Just can&rsquo;t stomach that guru voice, it&rsquo;s me not you.</p>

<p>Another problem is what I always <strong>had problems keeping meditating for long</strong>. Would start strong, do it every day for a week or two. Then I will have a day or few where &ldquo;<em>I have no time</em>&rdquo; for it. Or the cheating will start making it more like a nap.</p>

<p>One day watched a <a href="https://www.youtube.com/watch?v=zC7a_gQB9YQ">Google talk with an Emily Fletcher about meditation</a>. Maybe her &ldquo;positivity&rdquo; was a bit too much. I don&rsquo;t like that in people. Think it&rsquo;s because if you took a scalpel deep enough into my brains you will find it&rsquo;s because I&rsquo;m not like that &amp; would love to be. A lot of points in the talk made sense to me.</p>

<p>After looking more into what Emily does decided to try her <a href="http://www.zivamind.com/">ZivaMind meditation course</a>. <strong>If you fail, try again</strong>.</p>

<p>The course isn&rsquo;t cheap (250$ at the time of purchase). But it&rsquo;s only if it wouldn&rsquo;t work, if it works that price would be a drop in the bucket.</p>

<p><strong>It&rsquo;s delivered in 8 days with some extras added</strong>. Some of the days you&rsquo;re asked to answer few questions to bring your awareness. Don&rsquo;t think that you only need 8 days to become a master and start flying around on your bliss. This is the time you will need to consume the lessons to be in position to continue the meditation practice by yourself. After 8 days you might still have a lot of questions. A lot of them are answered in a recorded call(s) (day 9 of course).</p>

<p>The great thing about the course I liked is that <strong>it almost has no spiritual stuff</strong>. It has the mantra which I will put in spiritual category. I don&rsquo;t mind it so much as it&rsquo;s used as a tool to anchor yourself when you start wondering too much. Found it helpful.</p>

<p><strong>I like delivery of course a lot</strong>. Like explaining that you don&rsquo;t need to do it for hours or become a monk to reap the benefits of meditation. It helps to calm yourself knowing that 15 minutes twice a day is something you can do. Of course if it won&rsquo;t work then meditation is out the window as becoming a monk won&rsquo;t help either. <strong>Showing how a meditation session might look is very helpful</strong>. After seeing it you stop beating yourself that you&rsquo;re doing it wrong or you will never be able to do it right or you think too much, etc.</p>

<p>The website application of the course could be better. For someone who works in web &amp; cares about security, receiving his password in email can lead to a heart attack. It doesn&rsquo;t remember that I have logged in so every day requires me to log back in.</p>

<p>A new day of meditation is enabled every 24 hours. Which I understand but don&rsquo;t think is a good choice. I think it would be better if a new one was made available after 16 hours. For first few days it wasn&rsquo;t an issue. After that I started waking up early and a new day wasn&rsquo;t available to me. Just make the change on the application, it&rsquo;s fine if mails are sent every 24 hours. And if someone is counting the end of 16 hours just to check the new video they have bigger problems.</p>

<p>One of the days contained a video about space. Have no efing idea what it was about or what it has to do with meditation. Some spiritual thought provoking time &ndash; yes, but I would rather it was not added.</p>

<p>In one video you&rsquo;re taught a breathing technique to help you meditate. Unfortunately, I can&rsquo;t do it. As someone who has only one nostril working most of the time, anything breathing related is uncomfortably painful. If you have never drowned, choked, suffocated &mdash; yes, I&rsquo;m that good at accidental suicides &mdash; it would be hard to explain the feeling.</p>

<p>The course provides audio files to help meditate for various reasons: sleep, travel, performance. They are helpful, but from that I noticed they have white noise during silent periods which makes it hard to concentrate. It could also have lite versions which contained less explanations (explanations are good for beginning). <strong>The video version of 15 minute meditation I found very helpful</strong>. Most of it is silence, but that I liked about them is that I don&rsquo;t have to keep eyes on the clock. Having a timer application running is not a problem. It&rsquo;s just a better quality meditation if I keep my eyes closed through it. It would be great if audio version of this was available (without white noise).</p>

<p><strong>The suggestion to use the last few minutes of meditation for gratitude is great</strong>. I have a habit of being grateful for 3 things each day, big or small. Makes you appreciate your life &amp; what you have a lot more. Those few minutes were I run through all the things that happened &amp; I&rsquo;m grateful for makes me even happier.</p>

<p>I just started the course &amp; need to keep it for longer to know if it works. So far my thoughts are positive and feeling good with sticking with it. Doubt that I will find anything better &amp; if it won&rsquo;t work then the problem is somewhere else. <strong>If like me you have problems with making meditation a habit I would suggest to try out the <a href="http://www.zivamind.com/">ZivaMind meditation course</a></strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amsterdam - Phone STD &amp; Parks (part 2) - Testing the World and Looking for Home series]]></title>
    <link href="http://ifdattic.com/amsterdam-phone-std-and-parks"/>
    <updated>2015-06-03T08:55:35+02:00</updated>
    <id>http://ifdattic.com/amsterdam-phone-std-and-parks-part-2-testing-the-world-and-looking-for-home-series</id>
    <content type="html"><![CDATA[<p>After taking an inventory of what happened so far decided now was the time to:</p>

<ul>
<li>check where to find the places suggested by the host (shops, restaurants, etc.);</li>
<li>buy the local SIM card for internet;</li>
<li>get something to eat.</li>
</ul>


<p>I was in no hurry to start going through museums and similar places. I was here for two weeks and decided to spend the weekend just exploring the city. Also after I move to another place I will receive the museum card from my host, saving me some money &amp; time.</p>

<p>After a while I went inside one shop which looked like they were selling SIM cards. If you want to imagine the conversation better the merchant was Indian (like Russell Peters said &ldquo;I don&rsquo;t make stereotypes, I see them&rdquo;).</p>

<p>&ldquo;Hi, I would like a local SIM card with a data plan, do you have any?&rdquo;</p>

<p>&ldquo;Hi, yes, it will be 20 € please. What model is your phone?&rdquo;</p>

<p>&ldquo;The Nexus 5 <em>*confused with a raised eyebrow*</em>, does it make any difference?&rdquo;</p>

<p>&ldquo;I never had Nexus, I can do Apple, Samsung, Nokia. Here are the instructions how to install it. I don&rsquo;t know if it will work on your phone.&rdquo;</p>

<p>After some haggling we decided to try and if it will work, I will pay. If it will not work he will take the card back and I will not need to pay. Good deal, <em>I have nothing to lose after all, or so I thought</em>. After changing the card and rebooting the phone the language automatically changed to Dutch (without asking me about it), started installing some apps and if you enter the settings (to change the language or enable WiFi) the application would just close down. WTF?!? <em>I wasn&rsquo;t expecting my phone catching an STD</em>. I had doubts about myself, who knows were I might end sticking my USB stick in, but I didn&rsquo;t expect this happening to my phone. Thanked the shop keeper for trying and left without local SIM card.</p>

<p>Continued to keep going down the street as somewhere around here was a park (I love green &amp; blue colors on maps). At the same time trying to figure out how to at least change the language to English. What I found is what if you restart the phone you have about few seconds of browsing the settings app before it&rsquo;s closed. Not an easy task to change something in few seconds when you don&rsquo;t even know where it is. After a while I just gave up as this was unsustainable. Restarting the phone took about a minute and it provides only a few seconds which probably won&rsquo;t be enough. Another problem was what I was kind of lost, the GPS/maps application was in Dutch and without any cache. <em>The easy way would be just to go back, which is boring</em>. After calculating the direction I should move to I continued my travels.</p>

<p>After reaching a place which was close to the boat house stopped for some traditional Dutch pancakes. At first trying to think how to fix the phone. Soon changed that with just drinking my mint tea with honey and enjoying the fresh air. Decided my best choice would be to go back home, try to figure out how to fix my phone or at least to cache the map.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/17333602178" title="Traditional Dutch Pancakes by Andrew Marcinkevičius, on Flickr"><img src="https://c1.staticflickr.com/9/8879/17333602178_1f965387dc_z.jpg" width="474" height="640" alt="Traditional Dutch Pancakes"></a></p>

<p>The Google wasn&rsquo;t helpful with answers about what I should do. Except for step-by-step instructions where to find the languages. Which wasn&rsquo;t helpful as settings application wasn&rsquo;t working. In the end I was able to fix my phone. Not really sure why or how, but I was glad for settings application to start working allowing me to go back to English language. The fix was kind of simple. Inserted my original SIM card which doesn&rsquo;t work outside my country, but I&rsquo;m guessing the &ldquo;virus&rdquo; figured it was not able to do his thing and just left. Or something along those lines. It&rsquo;s a mystery to me. I was just glad for it to start working the way it&rsquo;s supposed to work. Except for antivirus being in English which I was able to change only after about a month.</p>

<p>Back in full gear went to look for that park again. Small, but nice park. As long as you don&rsquo;t step into any dog shit that is. Decided it&rsquo;s time to visit the Vondelpark park. It was the weekend and streets can get noisy from all the tourists who come to be loud, be stupid, be drunk, be unhappy and be back in 9-to-5 job on Monday. Don&rsquo;t get offended if any of those describe you. <em>I don&rsquo;t have anything against having some fun (choose your own definition)</em> or anything like that, I just don&rsquo;t think that because it&rsquo;s the weekend and you went to another country it allows you to be an idiot. <strong>I know common sense is dead, but try to find it</strong>.</p>

<p>The Vondelpark is wonderful. It&rsquo;s a large area with green zones, water and all kinds of people in it. If the day is sunny &amp; warm it&rsquo;s perfect to just lie down and relax, maybe with a book, maybe without one. It takes a while to walk through whole park, especially if you get lost as roads can sometime get confusing (they are wiggly). It has public toilets, refreshments (you can always bring your own), benches. It should take care of most of your needs. You will also meet some &ldquo;strange people&rdquo;, I call them &ldquo;crackers.&rdquo; Don&rsquo;t know why but this is what comes to my head then I think about them (in the voice of Eddie Griffin). I met three different categories during my two weeks. The first one being friendly ones which talk with you about something and  after a bit asks if maybe you could share some coins. The second one was similar to friendlies except I call them idiots. I try to be positive, but when you tell me about how hard their life is and they have no money for food because he wasted couple hundred euros yesterday in casino. Sorry, this is were I draw the line and walk away. I&rsquo;m not good enough yet to deal with this kind of situations. The third one are the aggressive kind and best to avoid as it wouldn&rsquo;t be surprising if one of them stabbed you (I have good imagination).</p>

<p>Before leaving the park stopped to listen to one guy playing incredible jazz music. Liked it so much that stopped to listen to it while talking with his friends. They were from Chile and damn, their language is beautiful. A bit later two other people stopped to listen to music and join the conversation. After a while a new guy mentioned that if someone wants Marilyn Monroe LSD he has some to sell. I would guess it would be an easy way to spice up my birthday and after listening to Tim Ferriss podcast I sometimes wonder that it would be a positive experience to experiment a little with psychedelic drugs. The thing is that some risks I like to take in the controlled environment. <em>Taking who knows what, with who knows who, who knows were for me personally isn&rsquo;t that comforting or something I couldn&rsquo;t live without</em>.</p>

<p>To be continued&hellip;</p>

<p>Read the rest of the series:</p>

<ul>
<li><a href="http://ifdattic.com/amsterdam-first-experiences">Amsterdam &ndash; First Experiences</a></li>
<li><a href="http://ifdattic.com/amsterdam-phone-std-and-parks">Amsterdam &ndash; Phone STD &amp; Parks</a></li>
<li><a href="http://bit.ly/1IvAlYb">Photo album</a></li>
<li>to be continued&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spy Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/spy-test-double-using-prophecy"/>
    <updated>2015-05-20T12:47:25+02:00</updated>
    <id>http://ifdattic.com/spy-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Spy is a test double which records its actions. After code execution you can check if interaction is as expected. You use it to make sure the method(s) was called.</p>

<p>Below is the class which has an optional dependency which is called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Questioner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$questions</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$scorer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">,</span> <span class="nx">ScorerInterface</span> <span class="nv">$scorer</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span> <span class="o">=</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scorer</span> <span class="o">=</span> <span class="nv">$scorer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** @return int */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getQuestionsCount</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Save under a new name.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  string $name</span>
</span><span class='line'><span class="sd">     * @return boolean</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">saveAs</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$saved</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">questions</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$saved</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scorer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scorer</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$saved</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check that the <code>update()</code> method on <code>Scorer</code> is called use the following spy test double:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">tests</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Output</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Questioner</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Scorer</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Prophecy\Argument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuestionerTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">score_is_updated_on_save</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputStub</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">CLASS</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">([],</span> <span class="nx">Argument</span><span class="o">::</span><span class="na">type</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">willReturn</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$scorerSpy</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Scorer</span><span class="o">::</span><span class="na">CLASS</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">(),</span> <span class="nv">$scorerSpy</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">saveAs</span><span class="p">(</span><span class="s1">&#39;any name&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$scorerSpy</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">shouldHaveBeenCalled</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This article is from the <strong>Test doubles using Prophecy</strong> series which is made from following articles:</p>

<ul>
<li><a href="http://ifdattic.com/dummy-test-double-using-prophecy">Dummy Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/stub-test-double-using-prophecy">Stub Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/spy-test-double-using-prophecy">Spy Test Double Using Prophecy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amsterdam - First Experiences (part 1) - Testing the World and Looking for Home series]]></title>
    <link href="http://ifdattic.com/amsterdam-first-experiences"/>
    <updated>2015-05-12T10:35:44+02:00</updated>
    <id>http://ifdattic.com/amsterdam-first-experiences-part-1-testing-the-world-and-looking-for-home-series</id>
    <content type="html"><![CDATA[<p><em>&ldquo;Why are you going to Amsterdam if you don&rsquo;t smoke?&rdquo;</em> A question from my friend before leaving, makes me smile every time I remember it. If you came here looking for some crazy juicy stories from Amsterdam, keep looking. I&rsquo;m sure a lot of (young) people go to Amsterdam exactly for sex, drugs &amp; alcohol. I chose to explore the other side of it: beautiful city, great culture &amp; museums.</p>

<p>If you don&rsquo;t know what the series are about you can read the <a href="http://ifdattic.com/testing-world-series-intro">intro</a>.</p>

<p>A few months before my birthday I was starting to think what I should get myself for it. It&rsquo;s not like I care a lot (any) about my birthday. It&rsquo;s just what most of the time I can remember what is the date so it&rsquo;s easy to assign some crazy gift/event with it (like testing operation table for the first time or quitting my job). The runner was to get a tattoo. I don&rsquo;t like or understand tattoos, but it would be another thing I done in life. Wondering that kind of tattoo? A black dot (probably below my belly button) and if someone would ask what it means (tattoo must have a meaning) the reply would be &ldquo;I dot F&hellip;ing give a S..t&rdquo; (aggressive, but effective). Then I remembered my promise to return to Amsterdam for at least a week. The first time I visited I was acting like some stupid tourist (going through shops, etc.) and it was only for half a day. From the map it looked like a great city with a lot to see. We have a winner!</p>

<p>I spent a lot of time trying to decide what kind of a trip it should be. First was thinking about traveling around whole Netherlands (it happened in a way, but you will read about it at the end). After some calculations decided to just take two weeks off, working as little as possible and just stay all that time in Amsterdam. Tickets purchased, places booked, map marked with places to visit (didn&rsquo;t think about keeping it so can&rsquo;t share it). Only need to wait until the end of June.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/17521426095" title="Packed &amp; ready to go by Andrew Marcinkevičius, on Flickr"><img src="https://c2.staticflickr.com/8/7683/17521426095_e7069aa254_z.jpg" width="637" height="640" alt="Packed &amp; ready to go"></a></p>

<p>Few hours later after a strangely pleasant flight (don&rsquo;t like them) was back in Eindhoven. A few years ago I lived in this city for a few weeks through ERASMUS. You can take the bus or the train to the Amsterdam. It costs about the same and it takes about the same amount of time. The bus is near the airport exit, but it looked like you should have a printed ticket for that (maybe someone knows if you can buy the ticket from a driver?) so just decided to use the train. At the same time I would grab something to eat at city center. While reading a cafe menu almost got hit by a car. <em>A great way to start your holidays/trip is on the front hood of a car as an ornament</em>. Maybe I lost my appetite or maybe the menu didn&rsquo;t had anything tasty and decided to try to reach Amsterdam before some other car tried to take a bite out of me.</p>

<p>Before you arrive to Netherlands &ndash; get a lot of € coins, a lot, like at least 20€ worth of coins. Why? You need them to buy the bus/train tickets and no one has any coins. You could pay with a debit/credit card, but I was against that as you get a 2% charge for paying with a card. Also I try to avoid having my card while trying and keep it at the place I&rsquo;m staying. <em>If I loose my wallet with the money in it I just lost my money, I can always get more at the ATM. If I loose my wallet with the card in it I&rsquo;m just left with that I have in cash. Just a safer choice in my opinion</em>. You can buy a ticket from the office with an extra charge. Now that I think about it the price is probably the same in the end.. Still stupid.. Forgot to add that some places accept only cash, some places accept only cards and some places I&rsquo;m not even sure accepts anything. I work with technology, I know it fails. What do you do when you can&rsquo;t accept card payments? Tell everyone to F&hellip; off and close down the shop? Well in short just <strong>know what you will be charged for paying with a card and always check which payment methods are available</strong>.</p>

<p>The trains have a free WiFi allowing you to contact your host about your arrival, search for information or just read the articles. Which I did as the first half part of the trip is boring. The second half starts where the sea should start so it&rsquo;s more interesting to look at the canals and ships. I have planed my way from the train station, but the more I looked at the map the more doubts I had about reaching it. Must be my paranoia, I&rsquo;m sure it will turn around somewhere and I will go to the train station. At least I thought so until the voice over the speakers went &ldquo;This is the last stop, please get out&rdquo;, crap. So, I&rsquo;m in the Schiphol airport. WiFi is not working anymore. Everything is in Dutch and I have no idea which bus goes to the city center. I guess I could always walk to it, it&rsquo;s only one screen away, the same distance as if walking to America. All the thoughts were gone once I found the tour mini-bus which was giving information about how to get to the city and selling the tickets.</p>

<p>While studying the map provided with the ticket I was starting to get doubts again about reaching the train station (<em>it can be confusing until you get your bearings around any new city</em>). Decided to just risk it and get out at what looked the closest stop to the place of my stay. Made the right choice and got out on the street I needed. The sun was shining and atmosphere was refreshing. It&rsquo;s nice to be back in Amsterdam, this city does have something special.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/16901067473" title="Under attack by ducks! by Andrew Marcinkevičius, on Flickr"><img src="https://c2.staticflickr.com/6/5329/16901067473_b3f0ea1c0c_z.jpg" width="474" height="640" alt="Under attack by ducks!"></a></p>

<p>That I love about traveling and booking your places through airbnb is what you can try some interesting houses without having to make a long term commitment. My first house &ndash; a house boat. Even if it&rsquo;s only for one day (it had some maintenance issues) it&rsquo;s a new experience. Somehow I missed checking the rest of the photos of my host and was expecting some tall guy. The door opens and I see someone who looks like Mr. Chow from Hangover movie, even his voice was similar. &ldquo;You&rsquo;re Andrew? Hi, you look different than in your photo. Come in, sorry, I&rsquo;m still hangover from yesterday, come in come in.&rdquo; After all the formalities of explaining rules and suggestions, I looked around and took a big breath of air overflowed with excitement. It&rsquo;s strange when you look out the window and water is like only a hands length away and when a big fleet of ducks start swimming your way for their payment of food. Can&rsquo;t even remember it without smiling. Another strange thing is tourists swimming in boats past your window, especially when you&rsquo;re peeing.</p>

<p>To be continued&hellip;</p>

<p>Read the rest of the series:</p>

<ul>
<li><a href="http://ifdattic.com/amsterdam-first-experiences">Amsterdam &ndash; First Experiences</a></li>
<li><a href="http://ifdattic.com/amsterdam-phone-std-and-parks">Amsterdam &ndash; Phone STD &amp; Parks</a></li>
<li><a href="http://bit.ly/1IvAlYb">Photo album</a></li>
<li>to be continued&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the World and Looking for Home - Intro to series]]></title>
    <link href="http://ifdattic.com/testing-world-series-intro"/>
    <updated>2015-05-03T07:44:47+02:00</updated>
    <id>http://ifdattic.com/testing-the-world-and-looking-for-home-intro-to-series</id>
    <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/ifdattic/16728375584" title="Testing the World and Looking for Home - Intro to series by Andrew Marcinkevičius, on Flickr"><img src="https://farm8.staticflickr.com/7745/16728375584_736018f7be_c.jpg" width="800" height="400" alt="Testing the World and Looking for Home - Intro to series"></a></p>

<p>I have a &ldquo;strange&rdquo; approach / thinking about everything. I <strong>never understood putting imaginary walls like countries / borders / nationality / etc.</strong> To me it always looked strange. <em>Why someone would be willing to cram in himself into some imaginary box</em>. Don&rsquo;t get me wrong, I understand what culture, country you grew up, nationality defines you and could have a high impact on how you might react to things. But my answer to &ldquo;Where are you from?&rdquo; is &ldquo;From Earth, last time I checked?&rdquo; (I have some doubts, but lets leave it at that). I&rsquo;m also not someone who will just pack his backpack and would go on the round the world trip (at least not yet). Damn, about a year ago, listening to someone&rsquo;s latest trip would suck out the energy from me.</p>

<p><strong>Staying in another country in my opinion is something you have to do as soon as possible</strong>. No matter how much you read, it won&rsquo;t <em>expand your thinking</em> as mush as surrounding yourself with a different culture &amp; environment. Today, when you have so much opportunities to travel, <em>it&rsquo;s something you can&rsquo;t miss out on</em>.</p>

<p>As a digital nomad I have a great opportunity to travel as long as I have my laptop and internet connection. Even internet is not a requirement. My current approach is to visit the country for a few weeks or months, learn about the culture and life in that country and return to my &ldquo;base of operations&rdquo; country. A lot of people would suggest that you should stay 3 months in one place or at least a month, and I agree with you, but I also found that for me 2 weeks is great. It allows enough time to get a feel for a place, but it&rsquo;s not that long in case you won&rsquo;t like it. My &ldquo;base of operations&rdquo; country is the one I grew up and quite used up to. But it&rsquo;s not the country I would like to live for the rest of my life. Before, I used to hate it. As I traveled more and my thinking expanded the thinking about it changed and just like any country it has pros and cons. One of the pros is that it&rsquo;s relatively cheap to live in, allowing to save that money for the next trip.</p>

<p><strong>So what is my main reason for traveling? It&rsquo;s to find a place which I could call my home</strong>. <em>You know what feeling where thinking about some place makes you warm inside and you can&rsquo;t wait to return to it</em>. Some might say the home is the place which you make, and you would probably be right, but as long as I&rsquo;m able I will first try to find that place. At least failing to find that place would help me into understanding what I&rsquo;m really looking for.</p>

<p>I haven&rsquo;t done a lot of traveling yet. But thought that some might find it useful to learn what I learned through my travels. <strong>The purpose of the series is to share what I liked, disliked and general tips about places visited</strong>. <em>It&rsquo;s always good to be wise and learn from other people mistakes, but never forget to make your own</em>.</p>

<p><strong>Below you will find the links to all the articles in the series, happy reading:</strong></p>

<h2>Amsterdam, Netherlands [2014]</h2>

<ul>
<li><a href="http://ifdattic.com/amsterdam-first-experiences">Amsterdam &ndash; First Experiences</a></li>
<li><a href="http://ifdattic.com/amsterdam-phone-std-and-parks">Amsterdam &ndash; Phone STD &amp; Parks</a></li>
<li><a href="http://bit.ly/1IvAlYb">Photo album</a></li>
<li>to be continued&hellip;</li>
</ul>


<h2>Barcelona / Seville / Madrid, Spain [2014]</h2>

<ul>
<li>Intro</li>
<li>to be continued&hellip;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stub Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/stub-test-double-using-prophecy"/>
    <updated>2015-04-23T08:11:17+02:00</updated>
    <id>http://ifdattic.com/stub-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Stub is the next simplest test double after the <a href="dummy-test-double-using-prophecy">Dummy</a>.</p>

<p>It doesn&rsquo;t have any expectations about the object behavior, but behaves in a specific way when put in a specific environment.</p>

<p>Below is the class under the test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Questioner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$questions</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span> <span class="o">=</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** @return int */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getQuestionsCount</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Save under a new name.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  string $name</span>
</span><span class='line'><span class="sd">     * @return boolean</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">saveAs</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">questions</span><span class="p">,</span> <span class="nv">$name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>saveAs</code> method can be tested by using a stub test double:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">tests</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Output</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Questioner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuestionerTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">new_questioner_has_no_questions</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputDummy</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputDummy</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">getQuestionsCount</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">questioner_is_saved_under_a_new_name</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputStub</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">([],</span> <span class="s1">&#39;new name&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">willReturn</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">saveAs</span><span class="p">(</span><span class="s1">&#39;new name&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test will pass as long as first parameter for <code>save</code> method is an empty array (<code>[]</code>) and the second parameter is <code>new name</code>. Prophecy allows you to use argument wildcards making your tests more durable. Below you can see a new test which allows any string for a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Prophecy\Argument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuestionerTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">questioner_is_saved_under_any_name</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputStub</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">([],</span> <span class="nx">Argument</span><span class="o">::</span><span class="na">type</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">willReturn</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputStub</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">saveAs</span><span class="p">(</span><span class="s1">&#39;any name&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the full list of arguments you can you check the code of <code>Prophecy\Argument</code> class. Here&rsquo;s some of them you might want to use in your tests:</p>

<ul>
<li><code>Argument::is($value)</code> checks that the argument is identical to a specific value</li>
<li><code>Argument::exact($value)</code> checks that the arguments matches a specific value</li>
<li><code>Argument::type($typeOrClass)</code> checks that the argument matches a specific type or class name</li>
<li><code>Argument::any()</code> matches any argument</li>
</ul>


<p>This article is from the <strong>Test doubles using Prophecy</strong> series which is made from following articles:</p>

<ul>
<li><a href="http://ifdattic.com/dummy-test-double-using-prophecy">Dummy Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/stub-test-double-using-prophecy">Stub Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/spy-test-double-using-prophecy">Spy Test Double Using Prophecy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dummy Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/dummy-test-double-using-prophecy"/>
    <updated>2015-03-19T15:23:51+01:00</updated>
    <id>http://ifdattic.com/dummy-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Dummy is the simplest test double.</p>

<p>It doesn&rsquo;t contain any logic and you use it when you need to satisfy a dependency which is not needed for functionality being tested.</p>

<p>Below is the class which has a constructor dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Questioner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span> <span class="o">=</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getQuestionsCount</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dependency can be satisfied by providing a dummy object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">tests</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Output</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Questioner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuestionerTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">new_questioner_has_no_questions</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputDummy</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputDummy</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">getQuestionsCount</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This article is from the <strong>Test doubles using Prophecy</strong> series which is made from following articles:</p>

<ul>
<li><a href="http://ifdattic.com/dummy-test-double-using-prophecy">Dummy Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/stub-test-double-using-prophecy">Stub Test Double Using Prophecy</a></li>
<li><a href="http://ifdattic.com/spy-test-double-using-prophecy">Spy Test Double Using Prophecy</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digital Nomad One Backpack Packing for 6 Weeks Trip (Video)]]></title>
    <link href="http://ifdattic.com/one-backpack-packing"/>
    <updated>2015-03-16T18:02:17+01:00</updated>
    <id>http://ifdattic.com/digital-nomad-one-backpack-packing-for-6-weeks-trip-video</id>
    <content type="html"><![CDATA[<p>In 2014 I took the 6 weeks trip to Spain. Forgot to record a video of packing my backpack at that moment. After talking with other digital nomads about packing thought that it might be really fun to try recording a video of it. This is the first time I did something like it, so feedback would be appreciated. Here&rsquo;s the video:</p>

<iframe width="732" height="412" src="https://www.youtube.com/embed/xH3QEfMXjh0?rel=0" frameborder="0" allowfullscreen></iframe>


<p>For the list of gear mentioned in the video check the <a href="https://bitly.com/bundles/ifdattic/1#">bitly collection</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most important skill I learned from stopping smoking &amp; drinking]]></title>
    <link href="http://ifdattic.com/important-skill-learned-from-no-smoking-drinking"/>
    <updated>2015-03-08T11:03:17+01:00</updated>
    <id>http://ifdattic.com/most-important-skill-i-learned-from-stopping-smoking-and-drinking</id>
    <content type="html"><![CDATA[<blockquote><p><strong>tl;dr; Headbutt the problem and solve it right now as it won&rsquo;t go away</strong></p></blockquote>

<p>I stopped (will allow to say &ldquo;quit&rdquo; in 10 years) smoking about one year and 7 months ago (2013/08/10). I stopped drinking about 7 months ago (2014/08/15).</p>

<p>Funny thing is on 2013 I was burning a bunch of personal crap (dreadlocks, paintings, clothes, etc). A year later, I&rsquo;m burning the rest of my personal crap (letters, talismans, diaries, photos, etc.). Remembered that a year before I was doing the same thing and stopped smoking. Thought that it would be great if I stopped drinking after this burning.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/16565367989" title="Burning personal crap, last day of drinking by Andrew Marcinkevičius, on Flickr" target="_blank"><img src="https://farm9.staticflickr.com/8743/16565367989_8462b9b24c_c.jpg" width="724" height="800" alt="Burning personal crap, last day of drinking"></a></p>

<p>It wasn&rsquo;t exactly easy and my though always was to not give any of them away. I liked both of guilty pleasures a lot. Actually, I thought it would be impossible to give them away. But once you challenge yourself you find that &ldquo;impossible&rdquo; is just a state of mind. Everything is possible when you don&rsquo;t know it&rsquo;s impossible. Or don&rsquo;t allow yourself to fail before trying.</p>

<p>I&rsquo;m not against smoking or drinking. I&rsquo;m not saying I won&rsquo;t start doing it ever again. I do know, I don&rsquo;t want to do them ever again, but I don&rsquo;t know if I&rsquo;m yet strong enough to keep it forever.</p>

<p>Even writing this article requires a lot of willpower to keep yourself from thinking how delicious is a thick smoke filling your lungs or a cold alcoholic beverage touching the tip of your tongue.</p>

<p>Only my thinking changed &ndash; they are the same as crutches are for a healthy person. Most of the time they are only hiding a deeper issue which won&rsquo;t go away. Feeling stressed? Go have a cigarette or a cold beer. Yes, it will get better. For now. The problem is that the issue is still there. Only hidden under a wall which will crumble like  a sand castle.</p>

<p>An believe me, the mind/body plays tricks on you trying to trip you. <em>&ldquo;Oh, this is such a perfect problem to have a cold beer over. Let me start you salivating from your mouth.&rdquo;</em> But if you win and reply with <em>&ldquo;No. It won&rsquo;t help with a problem. It won&rsquo;t solve a problem. It won&rsquo;t make me feel any better now or tomorrow and I will still have the same problem the next day. It&rsquo;s time to think how to solve this problem.&rdquo;</em> This moment is so empowering as you know that you took the hard way out, not the easy one out.</p>

<p>Stopping to drink and/or smoke might have improved my health &amp; finances. But the most important skill it taught me is to <strong>take the hard way out and solve a problem right away, not to hide away from it</strong>.</p>

<p>Have you tried to stop drinking or smoking? Have it taught you anything?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with SensioLabs Symfony certification exam]]></title>
    <link href="http://ifdattic.com/my-experience-sensiolabs-symfony-certification-exam"/>
    <updated>2015-02-17T17:19:52+01:00</updated>
    <id>http://ifdattic.com/my-experience-with-sensiolabs-symfony-certification-exam</id>
    <content type="html"><![CDATA[<p>One day I check my email and see one from Fabien <em>&ldquo;Symfony turned 9 and for being one of top 100 contributors you get a free voucher.&rdquo;</em> It definitely lifted my spirits.</p>

<p>Voucher was valid for a year so I just created a calendar reminder <em>&ldquo;Learn for Symfony certificate.&rdquo;</em> Made it due sometime in Summer and more or less forgot about it. More than enough time left for it.</p>

<p>After the SymfonyCon Madrid I evaluated my career possibilities. Decided it&rsquo;s time to stop riding a dead horse and move the majority of my time working with Symfony framework. At the same time remembered the <a href="http://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&rsquo;s Law</a>. <strong>The task will take as long as it&rsquo;s given time</strong>. Time to add the deadline. No matter how much I will learn for it, on March 1st I need to book the exam.</p>

<p>Somehow I made January &amp; February months for learning a lot of new things. Because of that I didn&rsquo;t get as much practical experience as suspected. Still <strong>made a habit of 90 minutes reading Symfony documentation for breakfast</strong>, um, tasty. This habit was mandatory!</p>

<p>The only preparation what I did was to take all the topics written in certification page and put them in a Trello card. Add items for cookbook topics, doctrine, etc. Not all are required for certification, but a good documentation is like a good book for me, so I didn&rsquo;t mind adding them. Add the links for easy access to as much of items as possible and that&rsquo;s it.</p>

<p>At first the list of about 160 items makes you take a big breath. But one check-box at a time you can see the progress.</p>

<p>This was also the <em>great chance to improve the documentation</em> (fixing typos, etc.). Changing it to the way you imagine it (changing formatting, etc.) and picking the brains of Symfony contributors (discussions in PRs, etc.).</p>

<p><em>90 minutes each day was spent making a few notes once in a while, creating pull requests, experimenting a bit</em>. On February I did some calculations and estimated that around the middle of it I should be done. It was time to register for an exam. Really wanted to do it on February 13th the Friday (how cool does that sound). But the place I like staying at wasn&rsquo;t available for rent. Also it felt like trying to avoid the unavoidable (a bad habit to have). So just registered for Monday (the sooner the better).</p>

<p>In the remaining days finished with the remaining topics. Did a <em>quick second round on the book</em> and it was time to take the exam the next day. <em>This took me about 6 weeks (~63 hours)</em>. I never believed about learning till the last second. My choice always is to put a good nights sleep between learning &amp; applying it. So Sunday documentation breakfast was the last one I will be taking for at least a while (<em>failure is always an option</em>).</p>

<p>The next day I woke up feeling great. Slept well, had a nice meeting the day before, exercised, took a shower, ate and the day looked like it will be a great one. Or would it? Nah, it would be a good one. The worst that could happen is that I won&rsquo;t pass the exam and that&rsquo;s it. It&rsquo;s not the end of a world.</p>

<p>OK, I worried a bit about slipping on the icy bridge while walking to the exam center and breaking my neck or dropping into a cold water. But this is the problem with my imagination. Other than that, I was trying to keep a relaxed attitude by taking a long slow walk along the snowed river to the exam center. Went out early to keep my paranoia in check about arriving late, <em>I like to stay safe</em>.</p>

<p>It sounds silly, but after arriving <em>I noticed my legs getting a bit weaker and heart pounding a little harder. Stupid body</em>. Had about half an hour before the exam. I always try to prepare myself for the worst scenario (which never happens) just in case. And you get a pleasant surprise when the end result is better than that you were expecting. If you&rsquo;re prepared to lose both legs, losing only one of them is wonderful. But most of the time from my research (books, articles, etc.) the suggestion is to imagine the result you want and your mind will go towards it. I&rsquo;m still skeptic about it, but if it&rsquo;s repeated often there must be something to it. And <em>you can&rsquo;t learn without testing</em>, so why not, let&rsquo;s try it.</p>

<p>I sat down. Closed my eyes. Started taking monotonic breaths and focusing my mind on passing the exam. At least my heart stopped pounding. A fresher head couldn&rsquo;t hurt either.</p>

<p><em>I&rsquo;m personally a little skeptic about these exams as you could pass them with a good memory</em>. Especially after I met a person with a Java certificate when he shouldn&rsquo;t be a programmer in the first place. Unfortunately for me, <em>I  don&rsquo;t have a good memory, and it works in strange ways</em>. For example, trying to remember when I had my first operation (string of 10 characters) leads to the following flow: it was on my birthday, I finished school that year, it was my 19th birthday, I finished school one year after 18th birthday, on my school leaving certificate it&rsquo;s written 2006, so I had it on 2006-06-28. Not the best way to remember a date. <em>Fortunately for me, my logic module pick up the pace and helps were memory starts ramble. I just have to put enough resources to be able to link them together.</em></p>

<p>By reminding myself that it wouldn&rsquo;t matter if I fail my head wasn&rsquo;t occupied by negative thoughts about that will happen if I fail. This allowed to take the exam with <em>stone cold focus. Read the question, read the answers, pick the one which is correct or makes most sense, keep going</em>. Flagged two questions for review, but after the second time told myself to stop doing that and simply believe in myself. <em>I enjoyed the exam a lot. It had a good flow &amp; presentation of questions</em>. A few of them made my head go &ldquo;What??&rdquo; (unlike Zend Certificate which contained quite a few &ldquo;WTF?!?&rdquo; questions). Solution to them was simple &ndash; read the question &amp; answers again, you can do this.</p>

<p>75 questions later was confirming that I&rsquo;m finishing the exam and the moment of truth&hellip; Thinking I did good on exam. Still, took the big breath guessing if I should just wait for screen to change or close my eyes&hellip; The screen is still waiting&hellip; The screen finishes loading&hellip; And a log-in pop-up shoots to the front of the screen&hellip;</p>

<p>(╯°□°）╯︵ ┻━┻</p>

<p>After some fiddling I bring the screen back. My eyes start shooting around the screen scanning for required information. &hellip; &ldquo;<strong>Passed</strong>.&rdquo; Great, which level? &hellip; &ldquo;<strong>Expert</strong>.&rdquo; Yes *fist pump*</p>

<p>Unlike with PHP certificate my reaction at the end of exam was much more &ldquo;professional.&rdquo; It still felt awesome!!!</p>

<p>Note: For anyone who is interested I made a <a href="https://trello.com/c/aHnP3WUI/1-learn-for-symfony-certification">Trello card</a> public.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T18:29:10+01:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull mongo:latest
</span></code></pre></td></tr></table></div></figure>


<p>And when launch your MongoDB container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --name mongo -d mongo mongod --smallfiles
</span></code></pre></td></tr></table></div></figure>


<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># display only running containers</span>
</span><span class='line'>docker ps
</span><span class='line'>
</span><span class='line'><span class="c"># or if you want all containers displayed</span>
</span><span class='line'>docker ps -a
</span></code></pre></td></tr></table></div></figure>


<p>There are two options for connecting to your Mongo database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it <span class="se">\</span>
</span><span class='line'>    --link mongo:mongo <span class="se">\</span>
</span><span class='line'>    --rm mongo sh <span class="se">\</span>
</span><span class='line'>    -c <span class="s1">&#39;exec mongo &quot;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># or on one line for easier copy-paste</span>
</span><span class='line'>docker run -it --link mongo:mongo --rm mongo sh -c <span class="s1">&#39;exec mongo &quot;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it 442c2541fe1a bash <span class="c"># by ID</span>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>docker <span class="nb">exec</span> -it mongo bash <span class="c"># by Name</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo
</span><span class='line'>db.col.insert<span class="o">({</span><span class="s2">&quot;a&quot;</span>: 4<span class="o">})</span>
</span><span class='line'>db.col.find<span class="o">()</span>.pretty<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -la db
</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongodump --db <span class="nb">test</span> --out /data/test-backup
</span></code></pre></td></tr></table></div></figure>


<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongorestore --db <span class="nb">test</span>-restored /data/test-backup/test
</span></code></pre></td></tr></table></div></figure>


<h2>Node.js</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull node:latest
</span></code></pre></td></tr></table></div></figure>


<p>To launch the NodeJS container run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --rm node
</span></code></pre></td></tr></table></div></figure>


<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>console.log<span class="o">(</span><span class="s1">&#39;It works!!&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --name node -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --link mongo:mongo -w /data -p 8082:8082 node bash
</span></code></pre></td></tr></table></div></figure>


<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># execute commands in container</span>
</span><span class='line'><span class="nb">cd </span>hw3-2and3-3/blog
</span><span class='line'>npm install
</span><span class='line'>node app.js
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Original connect</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost:27017/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connect using environment variables</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://&#39;</span><span class="o">+</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_PORT_27017_TCP_ADDR</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_PORT_27017_TCP_PORT</span><span class="o">+</span><span class="s1">&#39;/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connect using hosts entry</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://mongo:27017/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># from host OS terminal</span>
</span><span class='line'>docker run <span class="se">\</span>
</span><span class='line'>    --name nodeapp <span class="se">\</span>
</span><span class='line'>    -v <span class="s2">&quot;$(pwd)&quot;</span>:/data <span class="se">\</span>
</span><span class='line'>    --link mongo:mongo <span class="se">\</span>
</span><span class='line'>    -w /data/hw3-2and3-3/blog <span class="se">\</span>
</span><span class='line'>    -p 8082:8082 <span class="se">\</span>
</span><span class='line'>    -d node node app.js
</span><span class='line'>
</span><span class='line'><span class="c"># or on one line for easy copy-paste</span>
</span><span class='line'>docker run --name nodeapp -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
</span></code></pre></td></tr></table></div></figure>


<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># to see running containers</span>
</span><span class='line'>docker ps
</span><span class='line'>
</span><span class='line'><span class="c"># to check output of container</span>
</span><span class='line'>docker logs nodeapp
</span><span class='line'>
</span><span class='line'><span class="c"># to tail the output of container</span>
</span><span class='line'>docker logs -f nodeapp
</span><span class='line'>
</span><span class='line'><span class="c"># to stop running container</span>
</span><span class='line'>docker stop nodeapp
</span></code></pre></td></tr></table></div></figure>


<h2>MongoDB Course Manual Validation Tips</h2>

<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node hw3-2validate.js --db mongodb://mongo:27017/blog
</span></code></pre></td></tr></table></div></figure>


<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Node.js the Right Way Book]]></title>
    <link href="http://ifdattic.com/review-nodejs-right-way-book"/>
    <updated>2014-12-25T15:08:52+01:00</updated>
    <id>http://ifdattic.com/review-of-node-dot-js-the-right-way-book</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ecx.images-amazon.com/images/I/51+VjuSvKJL._SL250_.jpg" title="Node.js the Right Way Book Cover" alt="Node.js the Right Way Book Cover"></p>

<p>I&rsquo;m a big fan of learning something new. After enrolling into <a href="https://university.mongodb.com/courses/M101JS/about">MongoUniversity MongoDB course</a> where all the examples would be in Node.js, decided it would be great time to at least get acquainted with Node.js. Then as the luck would have it, someone tweeted about &ldquo;<a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Node.js The Right Way</a> by <a href="https://twitter.com/hexlib">Jim. R. Wilson</a>&rdquo; from <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>, which is always a great place to look for books. As the ebook version is available on Amazon (screw the discounts, I require my ebooks to be locked into the Amazon ecosystem), I bought it. Now I knew how I will be spending my mornings for a while.</p>

<!-- more -->


<p>The book is made from the following chapters:</p>

<ol>
<li><strong>Getting Started</strong> introduces the Node.js event loop, outlines the five aspects of Node.js development and provides instructions you would need for the following chapters.</li>
<li><strong>Wrangling the File System</strong> will help you write your first Node.js program &ndash; using Node&rsquo;s filesystem tools to create asynchronous, nonblocking file utilities.</li>
<li><strong>Networking with Sockets</strong> is were you will create a TCP servers and client programs for accessing them. This chapter will offer insight into Node application design and provide experience creating testable and fault-tolerant systems.</li>
<li><strong>Robust Message-Passing</strong> will introduce you to using third-party libraries. Using ØMQ (ZeroMQ) you will create suites of programs that work together in concert, and you will learn the clustering tools for managing them.</li>
<li><strong>Accessing Databases</strong> introduces databases and how to interact with them asynchronously in Node. The database created in this chapter is the foundation for RESTful APIs you&rsquo;ll be developing in later chapters.</li>
<li><strong>Scalable Web Services</strong> chapter will use Express, a popular Node.js web framework for routing requests. It will introduce objects called promises for managing asynchronous code flows and how to couple them in interesting ways with generator functions.</li>
<li><strong>Web Apps</strong> is the final chapter were you will build a single-page web application for integrating with web services created in previous chapters. In this chapter you will be using Passport module for authenticating with Google account credentials and storing session data in Redis.</li>
</ol>


<p>Each chapter provides some aspects of Node.js development like: Architecture and Core, Patterns, JavaScriptisms, Supporting Code.</p>

<p>A few issues (suggestions) for the book is that code samples could be more concise. It does not take any value away from them, but would just be nicer.</p>

<p>The database chapter requires a dataset which extracts to at least 500 MB (didn&rsquo;t wait for it to finish). My suggestion would be to provide a cropped dataset or simply add a note to kill the extraction at some point (just extract enough to make the examples work).</p>

<p>In my opinion it would be great if book provided a Vagrant or Docker file for having an environment which contains all the required software and working code examples.</p>

<p>The book has a very nice flow. Providing a lot of code examples and giving explanations for each line (block) of code. Still, you should have at least some JavaScript knowledge.</p>

<p>At the end of each chapter, questions and exercises are provided for improving your knowledge of what you learned from the chapter.</p>

<p>If you want to learn Node.js in my opinion this is the great book for that. It would provide you with enough knowledge where you will be confident to start using it in your everyday life and continue learning it through practice.</p>

<p>You can buy it from <a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Amazon</a> or <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Events: Require Account Information After Registration]]></title>
    <link href="http://ifdattic.com/symfony-events-require-account-information-after-registration"/>
    <updated>2014-12-03T09:04:45+01:00</updated>
    <id>http://ifdattic.com/symfony-events-require-account-information-after-registration</id>
    <content type="html"><![CDATA[<p>The user visits your application, clicks &ldquo;Sign up with Twitter&rdquo;, authorizes the application and he&rsquo;s ready to use your application with his profile data already filled. Unfortunately in this case you won&rsquo;t have a users&#8217; email address as Twitter doesn&rsquo;t share it. Or what if you require something else that might not be provided by a different social network. In this case you might want to require your user to fill mandatory information before using the application. And in Symfony it&rsquo;s easy to do using events.</p>

<p><strong>Note:</strong> the tutorial assumes that your application is using <a href="https://github.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a> for user management.  If you want to add registration/login using social networks, I recommend using <a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> (not needed for this tutorial). Application assumes what when registering a user he is disabled and he is not enabled until he provides all the required information.</p>

<p>First initialize the <code>src/Ifdattic/UserBundle/EventListener/AccountInformationListener.php</code> (change namespaces as required) with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Ifdattic\UserBundle\EventListener</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">FOS\UserBundle\Event\FormEvent</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">FOS\UserBundle\FOSUserEvents</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\RedirectResponse</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FilterControllerEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Route to redirect to</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var string</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$redirectRoute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param string $redirectRoute Route to redirect to if conditions not met</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$redirectRoute</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span> <span class="o">=</span> <span class="nv">$redirectRoute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * {@inheritDoc}</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;kernel.controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onKernelController&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">FOSUserEvents</span><span class="o">::</span><span class="na">PROFILE_EDIT_SUCCESS</span> <span class="o">=&gt;</span> <span class="s1">&#39;onProfileEdit&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The listener is provided a route name when initializing it (via constructor argument) and it subscribes to two events: <code>kernel.controller</code> and <code>FOSUserEvents::PROFILE_EDIT_SUCCESS</code>.</p>

<p>Add the method which will be executed on <code>kernel.controller</code> event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * If user is not enabled (haven&#39;t provided all information) make him to</span>
</span><span class='line'><span class="sd">     * finish it before using the application.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  FilterControllerEvent $event</span>
</span><span class='line'><span class="sd">     * @return mixed</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelController</span><span class="p">(</span><span class="nx">FilterControllerEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span> <span class="o">===</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;_route&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getController</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$controller</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nb">method_exists</span><span class="p">(</span><span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;get&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$security</span> <span class="o">=</span> <span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;security.context&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$security</span><span class="o">-&gt;</span><span class="na">isGranted</span><span class="p">(</span><span class="s1">&#39;IS_AUTHENTICATED_REMEMBERED&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$security</span><span class="o">-&gt;</span><span class="na">getToken</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">isEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$redirectUrl</span> <span class="o">=</span> <span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setController</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$redirectUrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">RedirectResponse</span><span class="p">(</span><span class="nv">$redirectUrl</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method first checks what redirect route and controller is provided. Then using <code>security.context</code> service make sure the user is authenticated before continuing. If user is authenticated, but he is not enabled a URL is generated and controller is replaced with an anonymous function which returns a redirect response.</p>

<p>Some might be wondering how much of an overhead this will add. Don&rsquo;t worry, it will probably won&rsquo;t even show on your profiler (if threshold is set to >0ms).</p>

<p>It should be possible to enable a user when he provides all the required information. Add a method to execute on profile edit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Enable user after he filled all the required account information.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  FormEvent $event</span>
</span><span class='line'><span class="sd">     * @return void</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onProfileEdit</span><span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getForm</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">===</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">isEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setEnabled</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return a user after successful form submit (after validation, etc.) and enable him if he was not enabled before. This point is a great place to collect some metrics to help you track activated users, how long it takes to activate, etc. It can be done simply by sending another event (event dispatcher can be returned from current event using <code>getDispatcher()</code> method).</p>

<p>To enable the listener add it as a service (<code>src/Ifdattic/UserBundle/Resources/config/services.yml</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ifdattic_user.account_information.listener</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ifdattic\UserBundle\EventListener\AccountInformationListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;fos_user_profile_edit&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_subscriber</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you visited the application with a user which is not enabled, he should be redirected to a profile edit page. If a new field which is required for using the application is added, you could disable a user to make sure he provides that information before continuing. If you want to send a user to a different page (e.g., profile edit page has a lot of optional fields and you want to display only required fields) just change the first argument for the listener.</p>

<p>This is optional, but to help users understand the next step add some visuals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># in app/Resources/FOSUserBundle/translations/FOSUserBundle.en.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">profile</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">edit</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">message_for_disabled_user</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">header</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Required account information</span>
</span><span class='line'>            <span class="l-Scalar-Plain">message</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Please provide the required information before using the application</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="c">{# in src/Ifdattic/UserBundle/Resources/views/Profile/_disabled_user_message.html.twig #}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">trans_default_domain</span> <span class="s1">&#39;FOSUserBundle&#39;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">{%</span> <span class="k">if</span> <span class="nv">app.user.isEnabled</span> <span class="o">==</span> <span class="kp">false</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;div&gt;</span>
</span><span class='line'><span class="x">        &lt;h3&gt;</span><span class="cp">{{</span> <span class="s1">&#39;profile.edit.message_for_disabled_user.header&#39;</span><span class="o">|</span><span class="nf">trans</span> <span class="cp">}}</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">        &lt;p&gt;</span><span class="cp">{{</span> <span class="s1">&#39;profile.edit.message_for_disabled_user.message&#39;</span><span class="o">|</span><span class="nf">trans</span> <span class="cp">}}</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="c">{# in src/Ifdattic/UserBundle/Resources/views/Profile/edit_content.html.twig #}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;IfdatticUserBundle:Profile:_disabled_user_message.html.twig&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Requiring account information was very easy to implement with a simple listener and now it can be extended by adding more logic and actions to it.</p>

<p>Source files are available as a <a href="https://gist.github.com/ifdattic/21a0575dc4878633430e">gist</a>.</p>

<p>Do you have any suggestions, ideas, questions? Please share them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating DataDog &amp; logstash on AWS EC2]]></title>
    <link href="http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2"/>
    <updated>2014-11-26T14:36:49+01:00</updated>
    <id>http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2</id>
    <content type="html"><![CDATA[<p>If you have an application you should collect metrics and data about it to be able to improve your application. There is multiple solutions for collecting stats, but I chose <a href="http://www.datadoghq.com/">DataDog</a> for my application. Below you will find how to integrate DataDog agent on EC2 server using ElasticBeanstalk and how to send Apache logs to DataDog using logstash.</p>

<p><strong>Note:</strong> The tutorial assumes that you&rsquo;re <a href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk">deploying a Symfony application using AWS ElasticBeanstalk</a> (the link points to an article on how to do it). If you&rsquo;re deploying a different application or don&rsquo;t want to use EB, you will need to make some changes (which will be left as an exercise for the reader).</p>

<h2>Add DataDog Config</h2>

<p>To install and configure the DataDog agent create <code>.ebextensions/02-datadog.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">datadog-agent</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">rpm</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">datadog</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://yum.datadoghq.com/rpm/x86_64/datadog-agent-5.1.0-539.x86_64.rpm</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-copy-config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/copy-datadog-config.sh&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-restart-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/datadog-agent</span><span class="nv"> </span><span class="s">restart&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">$SYMFONY__ENV__DATADOG__API__KEY</span><span class="nv"> </span><span class="s">]&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">250-stop-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/datadog-agent</span><span class="nv"> </span><span class="s">stop&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">$SYMFONY__ENV__DATADOG__API__KEY</span><span class="nv"> </span><span class="s">]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>.ebextensions/bin/copy-datadog-config.sh</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sed <span class="s1">&#39;s/api_key:.*/api_key: &#39;</span><span class="s2">&quot;$SYMFONY__ENV__DATADOG__API__KEY&quot;</span><span class="s1">&#39;/&#39;</span> /etc/dd-agent/datadog.conf.example &gt; /etc/dd-agent/datadog.conf
</span></code></pre></td></tr></table></div></figure>


<p>If you will deploy an application with these configuration files, EB will install DataDog agent and run the configuration script to update the API key. The API key should be set as an environment variable for the hosts you want to measure. When if <code>SYMFONY__ENV__DATADOG__API__KEY</code> environment variable is set on the host it will restart the DataDog agent to reload the configuration and give a deployment event in DataDog application. If the environment variable is not set (for example you don&rsquo;t want to track a host anymore) it would stop the agent.</p>

<p>This is enough to start receiving some metrics about your hosts on DataDog application, but more can be done.</p>

<h2>Apache Rewrite For Symfony</h2>

<p>Apache has a <code>server-status</code> handler which provides some statistics about current server status. The Symfony application configuration blocks this route, add the following condition in your <code>.htaccess</code> or Apache configuration file (will depend on your project) before queries are rewritten to front controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Allow internal requests</span>
</span><span class='line'><span class="nb">RewriteCond</span> %{REQUEST_URI} !^/internal/.+$
</span></code></pre></td></tr></table></div></figure>


<p>This will allow requests to <code>/internal</code> URLS (in case you need to add more locations reachable by URL).</p>

<h2>DataDog Apache Integration</h2>

<p>To send server statistics first create internal server status location in your Apache configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Enable server-status for internal IP</span>
</span><span class='line'><span class="nt">&lt;Location</span> <span class="s">/internal/server-status</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nb">SetHandler</span> server-status
</span><span class='line'>   <span class="nb">Order</span> Deny,Allow
</span><span class='line'>   <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>   <span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nt">&lt;/Location&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow to get server statistics locally (when connected to a host or from the host).</p>

<p>Next update <code>.ebextensions/02-datadog.config</code> file and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">/etc/dd-agent/conf.d/apache.yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="s">&quot;000644&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">owner</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dd-agent</span>
</span><span class='line'>        <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">init_config:</span>
</span><span class='line'>
</span><span class='line'>            <span class="no">instances:</span>
</span><span class='line'>                <span class="no">-   apache_status_url: http://127.0.0.1/internal/server-status?auto</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create Apache configuration file for DataDog agent pointing it to an URL where it can get server statistics. After deployment you should start receiving metrics about your current server status.</p>

<h2>Install &amp; logstash</h2>

<p><a href="http://logstash.net/">logstash</a> is a tool for managing events and logs.</p>

<p>To install logstash (optional: contrib plugin is installed only once, if you don&rsquo;t use it you can remove the <code>200-install-contrib-plugin</code> command) on deployment create <code>.ebextensions/02-logstash.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">/etc/yum.repos.d/logstash.repo</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="s">&quot;000644&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">owner</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">[logstash-1.4]</span>
</span><span class='line'>            <span class="no">name=logstash repository for 1.4.x packages</span>
</span><span class='line'>            <span class="no">baseurl=http://packages.elasticsearch.org/logstash/1.4/centos</span>
</span><span class='line'>            <span class="no">gpgcheck=1</span>
</span><span class='line'>            <span class="no">gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch</span>
</span><span class='line'>            <span class="no">enabled=1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-install-logstash</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;yum</span><span class="nv"> </span><span class="s">-y</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">logstash-1.4.2&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-install-contrib-plugin</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;wget</span><span class="nv"> </span><span class="s">-O</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">http://download.elasticsearch.org/logstash/logstash/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">tar</span><span class="nv"> </span><span class="s">zxf</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">-C</span><span class="nv"> </span><span class="s">/opt/logstash</span><span class="nv"> </span><span class="s">--strip</span><span class="nv"> </span><span class="s">1</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">touch</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-installed&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-installed</span><span class="nv"> </span><span class="s">]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Parse Apache Logs</h2>

<p>To start parsing Apache logs the logstash first has to be configured. Add the contents bellow to <code>.ebextensions/02-logstash.config</code> file. You will notice what command <code>300-restart-service</code> is commented out, why will be explained shortly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-delete-configs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;rm</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">/etc/logstash/conf.d/*&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-configs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/logstash/*</span><span class="nv"> </span><span class="s">/etc/logstash/conf.d/&quot;</span>
</span><span class='line'>    <span class="c1"># 300-restart-service:</span>
</span><span class='line'>    <span class="c1">#     command: &quot;service logstash restart&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following to Apache configuration to have more information in Apache logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">log_config_module</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LogFormat</span> <span class="s2">&quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot; %D %T&quot;</span> combined
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create logstash configuration for parsing Apache logs in <code>.ebextensions/logstash/apache.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">input</span> {
</span><span class='line'>  <span class="nb">file</span> {
</span><span class='line'>    <span class="nb">exclude</span> =&gt; <span class="s2">&quot;*.gz&quot;</span>
</span><span class='line'>    <span class="nb">path</span> =&gt; <span class="s2">&quot;/var/log/httpd/*&quot;</span>
</span><span class='line'>    <span class="nb">type</span> =&gt; <span class="s2">&quot;apache-access&quot;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">filter</span> {
</span><span class='line'>  <span class="nb">grok</span> {
</span><span class='line'>    <span class="nb">match</span> =&gt; [<span class="s2">&quot;message&quot;</span>, <span class="s2">&quot;%{COMBINEDAPACHELOG} %{NUMBER:microseconds} %{NUMBER:seconds}&quot;</span>]
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">output</span> {
</span><span class='line'>  <span class="nb">statsd</span> {
</span><span class='line'>    <span class="nb">count</span> =&gt; [<span class="s2">&quot;apache.count.bytes&quot;</span>, <span class="s2">&quot;%{bytes}&quot;</span>]
</span><span class='line'>    <span class="nb">increment</span> =&gt; <span class="s2">&quot;apache.count.response.%{response}&quot;</span>
</span><span class='line'>    <span class="nb">increment</span> =&gt; <span class="s2">&quot;apache.count.request.%{request}&quot;</span>
</span><span class='line'>    <span class="nb">timing</span> =&gt; [<span class="s2">&quot;apache.timing.request.%{request}&quot;</span>, <span class="s2">&quot;%{microseconds}&quot;</span>]
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">if</span> [response] =~ /^2\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.2XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^3\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.3XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^4\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.4XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^5\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.5XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will process apache logs and will send metrics using statsd output. Make changes to track what you need.</p>

<p><img src="https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png"  alt="Chart of HTTP status responses"></p>

<p>As a use case one of tracked metrics with this configuration is HTTP status responses by type. You can create a graph helping you visualize for spikes of 4xx responses (e.g., a bug was introduced in latest deployment or hackers are scanning for vulnerabilities).</p>

<p>Unfortunately I wasn&rsquo;t able to make any of logstash service scripts to work (this is why restart command was commented out). With all the scripts the logstash service is started fine, but no metrics are being output. If you have any suggestions please share. For now I&rsquo;m using the following way to run logstash.</p>

<p>Create the <code>.ebextensions/01-pre.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-create-posthook-dir</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;mkdir</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">-d</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post</span><span class="nv"> </span><span class="s">]&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-chmod-posthooks</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;chmod</span><span class="nv"> </span><span class="s">+x</span><span class="nv"> </span><span class="s">.ebextensions/hooks/appdeploy/post/*&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-posthooks</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/hooks/appdeploy/post/*</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a post hooks directory for ElasticBeanstalk and copy the post hooks to it. Create the <code>.ebextensions/hooks/appdeploy/post/logstash-background-job.sh</code> script which will start logstash after deployment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>. /opt/elasticbeanstalk/support/envvars
</span><span class='line'>
</span><span class='line'><span class="k">for </span>pid in <span class="sb">`</span>ps aux | grep /etc/logstash/conf.d | grep -v grep | tr -s <span class="s1">&#39; &#39;</span> | cut -d <span class="s1">&#39; &#39;</span> -f 2<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">disown</span> <span class="nv">$pid</span>
</span><span class='line'>    <span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">HOME</span><span class="o">=</span>/var/lib/logstash
</span><span class='line'>
</span><span class='line'>/opt/logstash/bin/logstash <span class="se">\</span>
</span><span class='line'>    -f /etc/logstash/conf.d <span class="se">\</span>
</span><span class='line'>    -l /var/log/logstash/logstash.log <span class="se">\</span>
</span><span class='line'>    &gt; /var/log/logstash/logstash.stdout <span class="se">\</span>
</span><span class='line'>    2&gt; /var/log/logstash/logstash.err <span class="se">\</span>
</span><span class='line'>    &amp;
</span></code></pre></td></tr></table></div></figure>


<p>This script will first kill all the running logstash processes (you should have only one, otherwise your metrics would be sent multiple times) and then start a new logstash process. After deployment you should start receiving metrics from processed Apache logs.</p>

<h2>Conclusion</h2>

<p>You should be receiving a lot of different metrics in your DataDog account and it&rsquo;s easy to extend to receive even more. This will allow you to measure how your application is performing and make important business decisions.</p>

<p>All files can be found in the <a href="https://gist.github.com/ifdattic/61a5b2708dff8811e7e2">gist</a>, the first line displays the full path for it and should be removed from files.</p>

<p>What about you: are you tracking how your application is performing? Or maybe you have suggestions? Please share them in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use MongoDB for Sessions in Symfony Application]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-sessions-symfony-application"/>
    <updated>2014-10-20T15:48:25+02:00</updated>
    <id>http://ifdattic.com/how-to-use-mongodb-for-sessions-in-symfony-application</id>
    <content type="html"><![CDATA[<p>The tutorial assumes that the project is using MongoDB and has everything configured (Doctrine ODM bundle, etc.).</p>

<p>Add the services to <code>app/config/services.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo.connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getMongo</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.connection</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MongoDoctrine\MongoDB\Connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">doctrine.odm.mongodb.document_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getConnection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">initialize</span><span class="p-Indicator">,</span> <span class="p-Indicator">[]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.session.handler</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Symfony\Component\HttpFoundation\Session\Storage\Handler\MongoDbSessionHandler</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;@mongo&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;%mongo.session.options%&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the parameters for session handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># app/config/parameters.yml.dist</span>
</span><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.session.options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_database%&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sessions</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the session handler in <code>app/config/config.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">session</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">handler_id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo.session.handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your sessions should be saved in the MongoDB database.</p>

<p>If you want to change how long the session is persisted and improve security, add the following code to your configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">session</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">cookie_lifetime</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1209600</span> <span class="c1"># 14 days</span>
</span><span class='line'>        <span class="l-Scalar-Plain">cookie_httponly</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might also find &ldquo;<a href="http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb">How to save Symfony logs to MongoDB</a>&rdquo; interesting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Send Symfony Application Logs to MongoDB]]></title>
    <link href="http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb"/>
    <updated>2014-10-05T14:01:41+02:00</updated>
    <id>http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb</id>
    <content type="html"><![CDATA[<p>The tutorial assumes that the project is using MongoDB and has everything configured (Doctrine ODM bundle, etc.).</p>

<p>Add the log connection to <code>app/config/config.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">doctrine_mongodb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">connections</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">log</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_server%&quot;</span>
</span><span class='line'>            <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_password%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_username%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">document_managers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">log</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">auto_mapping</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>            <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>A separate connection is needed with <code>logging</code> disabled as otherwise it will lead to a circular reference error (as the connection is using a logger).</p>

<p>In <code>app/config/config_prod.yml</code> add the mongo handler for Monolog and replace <code>fingers_crossed</code> handler with it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">monolog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">main</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span>         <span class="l-Scalar-Plain">fingers_crossed</span>
</span><span class='line'>            <span class="l-Scalar-Plain">action_level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">error</span>
</span><span class='line'>            <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span>      <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>            <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">debug</span>
</span><span class='line'>            <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog</span>
</span><span class='line'>                <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_database%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_collection%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to log to MongoDB on development environment, replace main handler with following code (or add an additional handler):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">monolog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">main</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>            <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">debug</span>
</span><span class='line'>            <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog</span>
</span><span class='line'>                <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_database%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="s">&quot;logs_%kernel.environment%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update the parameters file <code>app/config/parameters.yml.dist</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_server</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.server%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_database</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.database%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_password</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.password%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_username</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.username%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_collection</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.collection%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the services used by Monolog handler.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># app/config/services.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongolog</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog.connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getMongo</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongolog.connection</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MongoDoctrine\MongoDB\Connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">doctrine_mongodb.odm.log_document_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getConnection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">initialize</span><span class="p-Indicator">,</span> <span class="p-Indicator">[]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything was set correctly the logs should start appearing in MongoDB database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fighting Your Fears: Triple Combo - Flower Girl]]></title>
    <link href="http://ifdattic.com/fighting-your-fears-triple-combo-flower-girl"/>
    <updated>2014-09-24T18:12:18+02:00</updated>
    <id>http://ifdattic.com/fighting-your-fears-triple-combo-flower-girl</id>
    <content type="html"><![CDATA[<p>Today (2014-09-19), I hit a triple headshot on my &ldquo;did for the first time checklist.&rdquo; It was: gift someone flowers, ask for a name first, tell random girl she&rsquo;s amiable (I like the word translation in Lithuanian more so from now on in English &ldquo;cute&rdquo; will be used).</p>

<p>Today was planed as the day off cause after an eye doctor visit I was not supposed to see anything (blind as a rabbit who doesn&rsquo;t eat carrots). Spent hours just walking in the sun, listening to audio books (activity I enjoy as it allows me to disconnect), relaxing.</p>

<p>While walking through a shopping center in a flower section noticed a girl and kept walking (I look at walking like a shark looks at swimming &ndash; <em>you stop, you die</em>).</p>

<p>But one of the voices in my head went <em>&ldquo;she&rsquo;s cute&rdquo;</em> and another replied <em>&ldquo;yea, as she is working in a flower shop it might be fun to ask for her suggestion of what to gift to a cute girl and then give it to her.&rdquo;</em> The previous voice replied with <em>&ldquo;sure, sure, we definitely should do it&rdquo;</em>, but you know in that tone were someone agrees with you, but deep inside they are praying you won&rsquo;t take them on their offer.</p>

<p>Fortunately, during the past year, the voice which tries to throw me out of my comfort zone received much more control.</p>

<p><em>&ldquo;Wait, is this idea making you uncomfortable?&rdquo;</em> Putting a hand on my chest, noticing the heart beating much faster. <em>&ldquo;It does! Oh, I will have so much fun making you do this!&rdquo;</em></p>

<p>As I had a few minutes, before circling back to a flower shop, the first voice started to try haggle his way out (<em>&ldquo;You know, I&rsquo;m not feeling so well right now, maybe next time?&rdquo;</em>) or bribing the heart into a heart attack, but all of it was met with a bored reaction <em>&ldquo;take the last deep breath if you want, but you&rsquo;re doing this.&rdquo;</em></p>

<p>A deep breath, and I start looking at flowers.</p>

<p>The girl: <em>&ldquo;Hello, have you chosen something?&rdquo;</em></p>

<p>Me: <em>&ldquo;Hello. I don&rsquo;t know. What you would suggest to gift to a cute girl?&rdquo;.</em></p>

<p>Girl: <em>&ldquo;Uh, these are nice, and these, also this one.&rdquo;</em></p>

<p>Me: <em>&ldquo;This one looks nice, colorful. I will take it.&rdquo;</em></p>

<p>Girl: <em>&ldquo;Should I wrap them?&rdquo;</em></p>

<p>Me: <em>&ldquo;Sure. I will pay with a card.&rdquo;</em></p>

<p>I think this is the part where <em>The Universe</em> came in with a bucket of popcorns and went <em>&ldquo;Oh, let&rsquo;s extend this awkward period where he is running all the terrible scenarios of how it could end.&rdquo;</em></p>

<p>Card payment problems..</p>

<p>Girl: <em>&ldquo;Can you pay in cash? We had some problems with card payments recently.&rdquo;</em></p>

<p>Me: <em>&ldquo;Sure. How much was it? Here you go.&rdquo;</em></p>

<p>Me standing like an idiot, waiting for her to finish with cash register and the second voice standing with a grin.</p>

<p>Translation is a bit rough from this point, but it&rsquo;s as close as I could get.</p>

<p>Me: <em>&ldquo;And let me gift these flowers to you.&rdquo;</em> (✓ gift someone flowers).</p>

<p>Girl: <em>&ldquo;What?! Why?!.&rdquo;</em></p>

<p>Me: <em>&ldquo;Cause you&rsquo;re cute and my mind thought &ndash; Let&rsquo;s gift some flowers to this cute girl.&rdquo;</em> (combo ✓ tell random girl she&rsquo;s cute).</p>

<p>I end up in goofy situations (don&rsquo;t ask for examples, because I will provide them), but I was starting to think of a much more comfortable things I could be doing right now, like running barefoot through broken glass.</p>

<p>Girl (while smiling, laughing and probably feeling much more uncomfortably than me): <em>&ldquo;**Random combination of: Really? Why? No. What? and a bunch of other words** Is this a prank or something like it?&rdquo;</em> [Oh come on! Stop extending this, just let me run to hide into some dark corner. Note: order hiding lessons from a cockroach].</p>

<p>Me: <em>&ldquo;No, a gift, for real.&rdquo;</em></p>

<p>At this point I think the voices in my head were starting a movie night as a new one went (in English accent) <em>&ldquo;Come on, we already have a combo, let&rsquo;s check off something else, ask her for her name!&rdquo;</em></p>

<p>Deep breath, a shift in position to make sure I&rsquo;m still standing.</p>

<p>Me: <em>&ldquo;What is your name?&rdquo;</em> (triple combo ✓ ask for a name first).</p>

<p>Girl: <em>&ldquo;**:insert name here:**&rdquo;</em></p>

<p>Me: <em>&ldquo;Pleased, Andrius.&rdquo;</em></p>

<p>Could have tried to continue the combo and do something else for the first time, but as you should be careful with a cornered animal (he has nothing to lose so his reaction is unpredictable), it felt like a good time to allow the opening.</p>

<p>Made my smile bigger (<a href="http://blog.bufferapp.com/the-science-of-smiling-a-guide-to-humans-most-powerful-gesture">research</a> says: you smile not because you&rsquo;re happy, but you are happy because you smile. So, I try to walk around with a smile. I might look like an idiot, but I think it works), said <em>&ldquo;Have a nice weekend&rdquo;</em> and backed off.</p>

<p>Checked my heartbeat (reflection stage) which was more or less back at normal.. At this point my imagination (another daemon roaming in my head) tells <em>&ldquo;I don&rsquo;t think your heart was beating during that challenge&rdquo;</em> and a flash of red lights blinking, alarm sounds blaring, blood cells running in panic and a heart shouting <em>&ldquo;How is it going!?! I&rsquo;m ready to give him a heart attack right away!&rdquo;</em> (OK, this video made me chuckle).</p>

<p>A pat on the head from a second voice followed by some wise words <em>&ldquo;Good boy. See, that wasn&rsquo;t so bad. After all, what is the worst that could happen?&rdquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Symfony Application to AWS ElasticBeanstalk]]></title>
    <link href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk"/>
    <updated>2014-09-19T08:03:02+02:00</updated>
    <id>http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk</id>
    <content type="html"><![CDATA[<p>I while ago I started working on an application so I could learn Symfony and solve a problem I had. After it reached a minimal state where it could be deployed to &ldquo;production&rdquo; environment I chose to push it to AWS ElasticBeanstalk as I&rsquo;m quite comfortable with using it. Unfortunately (or maybe fortunately as the best way to learn something is still through practice), I bumped into a few problems while deploying. The article is split into sections explaining what and why a piece of code is added. You might not need all of them or you might need some adjustments. For this article I will use the default Symfony application and full code can be found at <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">github</a>.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,top" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#update-20141003">Update on 2014-10-03</a></li>
<li><a href="#update-20141108">Update on 2014-11-08</a></li>
<li><a href="#update-20141207">Update on 2014-12-07</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#add-awsdevtools">Add AWSDevTools to Repository</a></li>
<li><a href="#create-key-pair">Create a Key Pair (optional)</a></li>
<li><a href="#create-eb-config">Create ElasticBeanstalk environment configuration/description</a></li>
<li><a href="#add-environment-variables">Add environment variables</a></li>
<li><a href="#add-vendors-dir">Add vendors Directory to Repository</a></li>
<li><a href="#add-environment-config">Add environment configuration and Update Composer</a></li>
<li><a href="#install-mongo-extension">Install mongo extension</a></li>
<li><a href="#run-composer-install">Run Composer Install</a></li>
<li><a href="#update-cache-files">Update Cache Files</a></li>
<li><a href="#add-apache-config">Add Apache Configuration (optional)</a></li>
<li><a href="#remove-dev-entry">Remove dev Entry Point (optional)</a></li>
<li><a href="#add-cron">Add Cron (optional)</a></li>
<li><a href="#add-new-relic-config">Add New Relic Configuration (optional)</a></li>
<li><a href="#install-nodejs">Install nodejs With Front-End Tools (2014-10-03)</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Update on 2014-10-03 <a name="update-20141003"></a></h2>

<p>Thanks to the <a href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk/#comment-1604895694">tip from Philipp Rieber</a> the code can be simplified by removing the environment in console applications. If your environment has <code>SYMFONY_ENV</code> and <code>SYMFONY_DEBUG</code> set, they will be automatically retrieved by console script. This will allow to remove <code>--env</code> and <code>--no-debug</code> from console commands. This will also allow you to leave scripts in <code>composer.json</code> as the correct environment will be chosen.</p>

<h2>Update on 2014-11-08 <a name="update-20141108"></a></h2>

<p>Thanks to the tip from Nicolae Darie the <code>update-cache.sh</code> script was improved to replace all occurrences of <code>ondeck</code> in <a href="#update-cache-files">cache files</a>.</p>

<h2>Update on 2014-12-07 <a name="update-20141207"></a></h2>

<p>Thanks to the tip from Sergio Marchesini the <a href="#update-cache-files">Update Cache Files</a> section is not needed anymore if you&rsquo;re using at least Symfony 2.6.1.</p>

<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>The article assumes you already have the <a href="http://aws.amazon.com">AWS account</a>, <a href="http://aws.amazon.com/cli">AWS CLI</a> configured and a project in <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">git repository</a> ready to be deployed. The application will be deployed to <code>us-east-1</code> region, so make changes accordingly if you want to deploy to a different region.</p>

<p>For deployment we will use the <code>t2.micro</code> instance type, which is a new free tier eligible instance type. This updated instance type can only be launched in VPC so you might need to create it for your account, it can be done using a <a href="https://console.aws.amazon.com/vpc/home">wizard</a>.</p>

<p>If you will be creating a single instance ElasticBeanstalk application you only need <em>&ldquo;VPC with a Single Public Subnet.&rdquo;</em> If you want to create a load balanced application you will need <em>&ldquo;VPC with Public and Private Subnets.&rdquo;</em> Just note what VPC with public and private subnets requires a NAT instance which will add additional charges. You can learn more about creating VPC at <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS Docs</a>.</p>

<p>You will also need to create the IAM role to be used for ElasticBeanstalk deployments.</p>

<p>Some of the steps can be done using the web GUI or different applications, but for the most part I will be using the terminal on OS X.</p>

<p>Check <strong><a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/tree/master/.ebextensions/misc">.ebextensions/misc/aws-cli-commands-used.md</a></strong> from demo application for more information (commands used).</p>

<h2>Add AWSDevTools to Repository <a name="add-awsdevtools"></a></h2>

<p>To be able to push your repository to the ElasticBeanstalk the repository has to be extended with <a href="http://aws.amazon.com/code/6752709412171743">AWSDevTools</a>. Download, extract and go to correct directory depending on your OS (for Linux and Mac it will be <code>AWSDevTools/Linux</code>). You need to run the <code>AWSDevTools-RepositorySetup.sh</code> from the directory which contains your repository.</p>

<p>If everything was done correctly you should get a few new commands under <code>git aws.</code> namespace. Now run the <code>git aws.config</code> command to initialize configuration required for pushing repository to ElasticBeanstalk (comments after <code>#</code>, don&rsquo;t enter them).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AWS Region <span class="o">[</span>default to us-east-1<span class="o">]</span>: <span class="c"># enter your region</span>
</span><span class='line'>AWS Elastic Beanstalk Application: demo-app <span class="c"># enter your application name</span>
</span><span class='line'>AWS Elastic Beanstalk Environment: demo-prod-env <span class="c"># enter your environment name</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command should output some explanations about how to set the AWS credentials. As I work with multiple AWS accounts I personally set the credentials in the project. The command created a <code>.elasticbeanstalk</code> directory which you should avoid adding to source control (especially if it contains credentials). The directory should have <code>config</code> and <code>aws_credential_file</code> files with contents (including a manual change for credentials):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1"># below is contents of .elasticbeanstalk/config</span>
</span><span class='line'>
</span><span class='line'><span class="k">[global]</span>
</span><span class='line'><span class="na">ApplicationName</span><span class="o">=</span><span class="s">demo-app</span>
</span><span class='line'><span class="na">DevToolsEndpoint</span><span class="o">=</span><span class="s">git.elasticbeanstalk.us-east-1.amazonaws.com</span>
</span><span class='line'><span class="na">EnvironmentName</span><span class="o">=</span><span class="s">demo-prod-env</span>
</span><span class='line'><span class="na">Region</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'><span class="na">AwsCredentialFile</span><span class="o">=</span><span class="s">.elasticbeanstalk/aws_credential_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># below is contents of .elasticbeanstalk/aws_credential_file</span>
</span><span class='line'>
</span><span class='line'><span class="na">AWSAccessKeyId</span><span class="o">=</span><span class="s">your-access-key</span>
</span><span class='line'><span class="na">AWSSecretKey</span><span class="o">=</span><span class="s">your-secret-key</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Bonus tip:</strong> One of <a href="http://youtu.be/tTJrbsu_Wzc">best IAM practices</a> is to allow users only what they need. I use the separate group and user for pushing repository to ElasticBeanstalk. Bellow is the policy you can attach to your group/user to allow only what is needed for deploying an application (modify for your own needs):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;elasticbeanstalk:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;ec2:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;elasticloadbalancing:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;autoscaling:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;cloudwatch:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;s3:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sns:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;cloudformation:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;rds:*&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Key Pair (optional) <a name="create-key-pair"></a></h2>

<p>If you want to connect to your instances (e.g., to debug) you will need a key pair. You should avoid making any changes to your instances as it won&rsquo;t persist and can bring your instance to unknown state.</p>

<p>You can create a key pair by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws ec2 create-key-pair --key-name demoapp_prodkey &gt; demoapp_prodkey.pem
</span></code></pre></td></tr></table></div></figure>


<p>After the command completes open the file, delete everything that is not inside <code>KeyMaterial</code> value and replace <code>\n</code> with newlines.</p>

<p>Before you start using the key pair you need to change the permissions which can be done with command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod 400 demoapp_prodkey.pem
</span></code></pre></td></tr></table></div></figure>


<p>To connect to your instance you will need to know the IP address of it. So for example if it was <code>54.88.29.72</code> you could SSH to it with the following command (to connect to Amazon Linux instances the user is <code>ec2-user</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i demoapp_prodkey.pem ec2-user@54.88.29.72
</span></code></pre></td></tr></table></div></figure>


<h2>Create ElasticBeanstalk environment configuration/description <a name="create-eb-config"></a></h2>

<p>To always get the ElasticBeanstalk environment in the same state all the required information should be saved inside configuration files.</p>

<p>Create a file <code>.ebextensions/env/prod-single.json</code> with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;EnvironmentType&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;SingleInstance&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;EC2KeyName&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;demoapp_prodkey&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;IamInstanceProfile&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;aws-elasticbeanstalk-ec2-role&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;InstanceType&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;t2.micro&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;VPCId&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;Subnets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;ELBSubnets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:container:php:phpini&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;memory_limit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;800M&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:container:php:phpini&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;document_root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;/web&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:hostmanager&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;LogPublicationControl&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration will create a single instance environment. For all available options and their explanations check the <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">docs</a>. If you would like to create a load balanced environment you will need to make some changes to the configuration file (you can find it all at <code>.ebextensions/env/prod-load.json</code>). In short, you should remove <code>EnvironmentType</code> option (or change to <code>LoadBalanced</code>) and add the options provided below (just know what you will need a VPC with private and public subnets if you want to use new instance types):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:asg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;MinSize&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:asg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;MaxSize&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;4&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SecurityGroups&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will also need to fill values (will depend on application type, read <strong><a href="#prerequisites">Prerequisites</a></strong> and <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS VPC How To</a>) for <code>VPCId</code>, <code>Subnets</code>, <code>ELBSubnets</code>, <code>SecurityGroups</code> from your created VPC.</p>

<p>Run the following command to create your <code>demo-app</code> ElasticBeanstalk application (change the name or provide description if needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk create-application --application-name demo-app --description <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you only need to choose the the solution stack name. All available stacks can be returned with command (we will choose the latest as of this writing 64 bit stack named <code>64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk list-available-solution-stacks
</span></code></pre></td></tr></table></div></figure>


<p>Run the command below to create the ElasticBeanstalk environment (configure the arguments if needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk create-environment <span class="se">\</span>
</span><span class='line'>    --application-name demo-app <span class="se">\</span>
</span><span class='line'>    --environment-name demo-prod-env <span class="se">\</span>
</span><span class='line'>    --description <span class="s2">&quot;&quot;</span> <span class="se">\</span>
</span><span class='line'>    --option-settings file://.ebextensions/env/prod-single.json <span class="se">\</span>
</span><span class='line'>    --solution-stack-name <span class="s2">&quot;64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a while if everything was fine the new environment for application should be up and ready.</p>

<h2>Add environment variables <a name="add-environment-variables"></a></h2>

<p>Keeping credentials and other information (API keys, passwords, connection data, etc.) in source control is a bad idea and not really scalable. Your environment should contain all the information needed to make the application on it work. You can configure your environment variables using <code>aws:elasticbeanstalk:application:environment</code> namespace. Create the <code>.ebextensions/env/prod-variables.json</code> file and put the following into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY_ENV&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY_DEBUG&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__SECRET&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__SERVER&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__DATABASE&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__PASSWORD&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__USERNAME&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should fill the <code>Value</code> key with your values (just avoid committing the values to repository). The <code>SYMFONY_ENV</code> is the variable for describing the type of environment and will be used later. As the deployment should happen automatically and you won&rsquo;t be able to enter your parameters manually they should be set automatically using the environment variables. This can be done using variables which start with <code>SYMFONY__</code> as they are automatically converted (the <code>__</code> becomes a <code>.</code>). As an example the <code>SYMFONY__ENV__MONGODB__SERVER</code> will become <code>%env.mongodb.server%</code>. The <code>parameters.yml.dist</code> has to be updated for this to work, make sure it contains the following changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">secret</span><span class="p-Indicator">:</span>           <span class="s">&quot;%env.secret%&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_server</span><span class="p-Indicator">:</span>   <span class="s">&quot;%env.mongodb.server%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_database</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.database%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_password</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.password%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_username</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.username%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the following command to update your environment with variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk update-environment <span class="se">\</span>
</span><span class='line'>    --environment-name demo-prod-env <span class="se">\</span>
</span><span class='line'>    --option-settings file://.ebextensions/env/prod-variables.json
</span></code></pre></td></tr></table></div></figure>


<h2>Add vendors Directory to Repository <a name="add-vendors-dir"></a></h2>

<p>The <code>10_composer_install.sh</code> hook on application deployment automatically runs <code>composer install</code> if it finds the <code>composer.json</code> file in the root directory. As I would like to run composer myself (and it might fail depending on your application) it can be disabled by moving <code>composer.json</code> file outside of main directory or by adding vendor directory to repository. This can be done by creating a <code>.gitkeep</code> file inside <code>vendor</code> directory and modifying <code>.gitignore</code> to contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/vendor/*
</span><span class='line'>!vendor/.gitkeep
</span></code></pre></td></tr></table></div></figure>


<p>This change will add a <code>vendor</code> directory to your repository, but everything inside it will be ignored (as it has to be installed automatically and not committed to repository).</p>

<h2>Add environment configuration and Update Composer <a name="add-environment-config"></a></h2>

<p>The ElasticBeanstalk environment can be configured by using <code>.config</code> files inside <code>.ebextensions</code> directory. You can read more about how to <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">customize EC2 intances in docs</a>. In short it reads the <code>.config</code> files from <code>.ebextensions</code> directory and runs them in alphabetical order. After the deployment <code>.ebextensions</code> directory is removed.</p>

<p>The composer by default used in environments has an old version, it&rsquo;s a good idea to have it updated. All of this can be done by creating <code>03-main.config</code> file and adding the following contents to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-composer-update</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;export</span><span class="nv"> </span><span class="s">COMPOSER_HOME=/root</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">composer.phar</span><span class="nv"> </span><span class="s">self-update</span><span class="nv"> </span><span class="s">-n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The config file starts with <code>03-</code> so we could have some breathing room if other configuration files have to be run before it. The commands are also run alphabetically so it&rsquo;s a good idea to start with a hundred based number as it will give you enough space for 99 commands before you will need to modify the order of them.</p>

<p>Now you could push your application to the environment (it still won&rsquo;t work as additional steps are required) by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git aws.push
</span></code></pre></td></tr></table></div></figure>


<h2>Install mongo extension <a name="install-mongo-extension"></a></h2>

<p>Our project uses the MongoDB and the required PHP mongo extension is not available by default on created environment. This can be easily taken care of by adding a command to install it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-install-mongo-ext</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;yes</span><span class="nv"> </span><span class="s">&#39;&#39;</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">pecl</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">mongo&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ignoreErrors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ignoreErrors</code> is required as it would be thrown if the extension is already installed. This way if extension is already installed, it just skips this step. If for some reason the extension failed to install, your deployment would still fail on composer install step as it won&rsquo;t have the required extension.</p>

<h2>Run Composer Install <a name="run-composer-install"></a></h2>

<p>The next step would be to run the composer install. This can be done by adding <code>container_command</code> which runs after the application and web server have been set up, but before the application version is deployed. Add the following to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-run-composer</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;composer.phar</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">--no-dev</span><span class="nv"> </span><span class="s">--optimize-autoloader</span><span class="nv"> </span><span class="s">--prefer-dist</span><span class="nv"> </span><span class="s">--no-interaction&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will run composer install without <code>require-dev</code> packages (in production we don&rsquo;t need them), optimize the autoloader (performance improvements), preferring distribution packages (performance improvement) and without any interaction (as the deployment is being done automatically).</p>

<h2>Update Cache Files <a name="update-cache-files"></a></h2>

<p><strong>Important:</strong> If you&rsquo;re using at least <a href="http://symfony.com/blog/symfony-2-6-1-released">Symfony 2.6.1</a> this is not needed anymore as cache files are now relative.</p>

<p>Because all commands are being run while in <em>&ldquo;staging&rdquo;</em> area the locations are incorrect after deployment (<code>/var/app/ondeck</code> should be changed to <code>/var/app/current</code>). This can be fixed by running a <code>sed</code> command on cache files. Add the following to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">600-update-cache</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/update-cache.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the file <code>.ebextensions/bin/update-cache.sh</code> with contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>grep -l -R <span class="s2">&quot;ondeck&quot;</span> /var/app/ondeck/app/cache/<span class="nv">$SYMFONY_ENV</span>/*<span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span>sed -i -e <span class="s2">&quot;s/\/var\/app\/ondeck/\/var\/app\/current/g&quot;</span> <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script will replace all <code>/var/app/ondeck</code> occurrences with <code>/var/app/current</code> in cache files.</p>

<p>If you pushed your application to an environment at this moment you should have a completely functioning application. Read the following sections to improve your deployment.</p>

<h2>Add Apache Configuration (optional) <a name="add-apache-config"></a></h2>

<p>The PHP values can be changed using Apache configuration. The Apache configuration can also be updated to improve the security of your application (e.g., disallow entering hidden directories or files). Add an Apache configuration file to <code>.ebextensions/apache/zapplication.conf</code> with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">php_value</span> short_open_tag <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="c"># &quot;-Indexes&quot; will have Apache block users from browsing folders without a</span>
</span><span class='line'><span class="c"># default document Usually you should leave this activated, because you</span>
</span><span class='line'><span class="c"># shouldn&#39;t allow everybody to surf through every folder on your server (which</span>
</span><span class='line'><span class="c"># includes rather private places like CMS system folders).</span>
</span><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">mod_autoindex.c</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Options</span> -Indexes
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to &quot;hidden&quot; directories or files whose names begin with a</span>
</span><span class='line'><span class="c"># period. This includes directories used by version control systems such as</span>
</span><span class='line'><span class="c"># Subversion or Git.</span>
</span><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">mod_rewrite.c</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">RewriteCond</span> %{SCRIPT_FILENAME} -d [OR]
</span><span class='line'>  <span class="nb">RewriteCond</span> %{SCRIPT_FILENAME} -f
</span><span class='line'>  <span class="nb">RewriteRule</span> <span class="s2">&quot;(^|/)\.&quot;</span> - [F]
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to backup and source files. These files may be left by some</span>
</span><span class='line'><span class="c"># text/html editors and pose a great security danger, when anyone can access</span>
</span><span class='line'><span class="c"># them.</span>
</span><span class='line'><span class="nt">&lt;FilesMatch</span> <span class="s">&quot;(\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|pem)|~)$&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nb">Satisfy</span> <span class="k">All</span>
</span><span class='line'><span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to files &amp; directories starting with a dot</span>
</span><span class='line'><span class="nt">&lt;FilesMatch</span> <span class="s">&quot;^\.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class='line'><span class="nt">&lt;DirectoryMatch</span> <span class="s">&quot;^\.|\/\.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/DirectoryMatch&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will change PHP <code>short_open_tag</code> value to <code>off</code> and make other changes to make your application more secure. The configuration file starts with letter <code>z</code> as we want to load this configuration at the end.</p>

<p>Add the container command to your <code>03-main.config</code> file to copy this configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-apache-config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/apache/zapplication.conf</span><span class="nv"> </span><span class="s">/etc/httpd/conf.d/zapplication.conf&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Remove dev Entry Point (optional) <a name="remove-dev-entry"></a></h2>

<p>As we are deploying to production, it doesn&rsquo;t make a lot of sense to keep development environment entry point (especially if you remove IP or similar checks). This entry point can be removed on deployment by adding following container command to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">700-remove-dev-app</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;rm</span><span class="nv"> </span><span class="s">web/app_dev.php&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Add Cron (optional) <a name="add-cron"></a></h2>

<p>Your application might need to use the cron to run some tasks on schedule. Create a new file <code>.ebextensions/cron/main</code> and put your commands in it (just make sure this file ends with an empty line).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*/5 * * * * . /opt/elasticbeanstalk/support/envvars <span class="o">&amp;&amp;</span> php /var/app/current/app/console acme:hello
</span></code></pre></td></tr></table></div></figure>


<p>This command will run every five minutes. Crontab runs in a minimal environment so we start with <code>. /opt/elasticbeanstalk/support/envvars</code> to make sure it has all the environment variables. After that we run the Symfony console command from our application using the environment which is set as the environment variable. Add as many commands as you need in this file.</p>

<p>Make changes to <code>03-main.config</code> to update crontab tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">800-run-cron</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;crontab</span><span class="nv"> </span><span class="s">.ebextensions/cron/main&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decide you don&rsquo;t need to run cron tasks anymore, <strong>don&rsquo;t</strong> just delete the container command. Make sure you make this change incrementally, by first removing all the contents from <code>.ebextensions/cron/main</code> file (leave it empty or change the existing <code>800-run-cron</code> command to <code>crontab -r</code>) and deploying it to your ElasticBeanstalk environment. Only after it&rsquo;s done should you remove the container command and a file. If you just removed the container command, your existing instances will keep the commands in <code>crontab</code> from previous deployment.</p>

<h2>Add New Relic Configuration (optional) <a name="add-new-relic-config"></a></h2>

<p>In case you would like to add <a href="http://newrelic.com">New Relic</a> monitoring for your application, all the required configuration can be added to your deployment. Create a new file <code>02-newrelic.config</code> which will contain the following configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic-php5</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic-sysmond</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">rpm</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm</span>
</span><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-install-newrelic</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;newrelic-install</span><span class="nv"> </span><span class="s">install&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-update-newrelic-ini</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/update-newrelic-ini.sh&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">400-configure-newrelic-sysmond</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;nrsysmond-config</span><span class="nv"> </span><span class="s">--set</span><span class="nv"> </span><span class="s">license_key=$NEW_RELIC_LICENSE_KEY&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">430-start-sysmond</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/newrelic-sysmond</span><span class="nv"> </span><span class="s">start&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will install New Relic agent and system monitoring daemon and update configuration used by them.</p>

<p>To update the configuration used by the agent create a <code>.ebextensions/bin/update-newrelic-ini.sh</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sed -i -e <span class="s1">&#39;s/newrelic.license.*/newrelic.license = &#39;</span><span class="s2">&quot;$NEW_RELIC_LICENSE_KEY&quot;</span><span class="s1">&#39;/&#39;</span> /etc/php-5.5.d/newrelic.ini
</span><span class='line'>sed -i -e <span class="s1">&#39;s/newrelic.appname.*/newrelic.appname = &quot;&#39;</span><span class="s2">&quot;$SYMFONY__ENV__NEW_RELIC__APPLICATION_NAME&quot;</span><span class="s1">&#39;&quot;/&#39;</span> /etc/php-5.5.d/newrelic.ini
</span></code></pre></td></tr></table></div></figure>


<p>The script will set the license and application name using values from environment variables. Add the new environment variables to <code>.ebextensions/env/prod-variables.json</code> file and update your environment using AWS CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__NEW_RELIC__API__KEY&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__NEW_RELIC__APPLICATION_NAME&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;NEW_RELIC_LICENSE_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install <a href="https://github.com/ekino/EkinoNewRelicBundle">EkinoNewRelicBundle</a> in your Symfony application by running the following on your development environment (don&rsquo;t forget to enable the bundle in your <code>app/AppKernel.php</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composer require ekino/newrelic-bundle <span class="s2">&quot;1.2.*@dev&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following to your configuration files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># in app/config/config.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">ekino_new_relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>    <span class="l-Scalar-Plain">application_name</span><span class="p-Indicator">:</span> <span class="s">&quot;%new_relic_application_name%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span> <span class="s">&quot;%new_relic_api_key%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in app/config/config_prod.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">ekino_new_relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update your <code>app/config/parameters.yml.dist</code> with new parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">new_relic_application_name</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.new_relic.application_name%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">new_relic_api_key</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.new_relic.api.key%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To notify about deployment add a new container command to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">900-notify-deployment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;php</span><span class="nv"> </span><span class="s">app/console</span><span class="nv"> </span><span class="s">newrelic:notify-deployment</span><span class="nv"> </span><span class="s">--user=eb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Push the application to your environment and if everything was done correctly you should start seeing some stats in your New Relic account.</p>

<h2>Install nodejs With Front-End Tools (2014-10-03 <a name="install-nodejs"></a></h2>

<p>If you watched a <a href="https://www.youtube.com/watch?v=R7iN5SFglMo">Ryan Weaver &ndash; Cool like Frontend Developer</a> or a similar talk you might want to add some front end goodness to your project. For this you will need to install nodejs, Grunt, Bower. Below are the steps on how to do it.</p>

<p>Create <code>.ebextensions/bin/install-nodejs.sh</code> with the contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">hash_file</span><span class="o">=</span><span class="s2">&quot;/tmp/nodejshash&quot;</span>
</span><span class='line'>
</span><span class='line'>check_if_npm_packages_has_to_be_installed <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -f <span class="nv">$hash_file</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>check_if_same_hash
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        return </span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>check_if_same_hash <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">hash_new</span><span class="o">=</span><span class="s2">&quot;$(md5sum .ebextensions/bin/install-nodejs.sh 2&gt; /dev/null | cut -d &#39; &#39; -f 1)&quot;</span>
</span><span class='line'>    <span class="nv">hash_current</span><span class="o">=</span><span class="s2">&quot;$(cat &quot;</span><span class="nv">$hash_file</span><span class="s2">&quot; 2&gt; /dev/null | cut -d &#39; &#39; -f 1)&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$hash_new</span> <span class="o">==</span> <span class="nv">$hash_current</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        return </span>1
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        return </span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_node <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if </span><span class="nb">hash </span>nodejs 2&gt; /dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s1">&#39;nodejs install, add more processing if needed&#39;</span> &gt; /dev/null
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span>curl -sL https://rpm.nodesource.com/setup | bash -
</span><span class='line'>        yum install -y nodejs-0.10.32
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_npm_packages <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    npm install -g bower
</span><span class='line'>    npm install -g grunt-cli
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>update_current_hash <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$hash_new</span> &gt; <span class="nv">$hash_file</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_node
</span><span class='line'>
</span><span class='line'><span class="k">if </span>check_if_npm_packages_has_to_be_installed; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>install_npm_packages
</span><span class='line'>    update_current_hash
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script will install nodejs if it&rsquo;s not installed. Then it will check if npm packages have to be installed (new added or this is the first run) and install them if needed. Bower and Grunt-cli will be installed globally.</p>

<p>Add a container command to <code>03-main.config</code> to run this install script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">container_commands:</span>
</span><span class='line'>    <span class="mi">100</span><span class="err">-install-nodejs:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;source .ebextensions/bin/install-nodejs.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To install local npm packages, bower packages and run grunt production tasks add the following container commands (see <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/commit/1a651a94c134a80eb9895b4eb5aee99d37ad5823">repository</a> for file contents):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">container_commands:</span>
</span><span class='line'>    <span class="mi">400</span><span class="err">-install-npm-packages:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;npm install&quot;</span>
</span><span class='line'>    <span class="mi">425</span><span class="err">-install-bower-packages:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;bower install --allow-root&quot;</span>
</span><span class='line'>    <span class="mi">450</span><span class="err">-run-grunt:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;grunt production&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion <a name="conclusion"></a></h2>

<p>This article might not had all the steps required for deploying your Symfony application to ElasticBeanstalk, but it should point you on the right way to deploying your application. If something was not informative enough or confusing, please let me know and I will try to clarify it. If you have any questions or ideas, leave them in the comments to start the knowledge sharing.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,bottom" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>
]]></content>
  </entry>
  
</feed>
