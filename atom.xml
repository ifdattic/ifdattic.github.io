<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ifdattic]]></title>
  <link href="http://ifdattic.com/atom.xml" rel="self"/>
  <link href="http://ifdattic.com/"/>
  <updated>2015-03-19T16:27:58+02:00</updated>
  <id>http://ifdattic.com/</id>
  <author>
    <name><![CDATA[Andrew Marcinkevičius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dummy Test Double Using Prophecy]]></title>
    <link href="http://ifdattic.com/dummy-test-double-using-prophecy"/>
    <updated>2015-03-19T16:23:51+02:00</updated>
    <id>http://ifdattic.com/dummy-test-double-using-prophecy</id>
    <content type="html"><![CDATA[<p>Dummy is the simplest test double.</p>

<p>It doesn&rsquo;t contain any logic and you use it when you need to satisfy a dependency which is not needed for functionality being tested.</p>

<p>Below is the class which has a constructor dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Questioner</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">output</span> <span class="o">=</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getQuestionsCount</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dependency can be satisfied by providing a dummy object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">tests</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Output</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Questioner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">QuestionerTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @test</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">new_questioner_has_no_questions</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$outputDummy</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">prophesize</span><span class="p">(</span><span class="nx">Output</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$questioner</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">Questioner</span><span class="p">(</span><span class="nv">$outputDummy</span><span class="o">-&gt;</span><span class="na">reveal</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$questioner</span><span class="o">-&gt;</span><span class="na">getQuestionsCount</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digital Nomad One Backpack Packing for 6 Weeks Trip (Video)]]></title>
    <link href="http://ifdattic.com/one-backpack-packing"/>
    <updated>2015-03-16T19:02:17+02:00</updated>
    <id>http://ifdattic.com/digital-nomad-one-backpack-packing-for-6-weeks-trip-video</id>
    <content type="html"><![CDATA[<p>In 2014 I took the 6 weeks trip to Spain. Forgot to record a video of packing my backpack at that moment. After talking with other digital nomads about packing thought that it might be really fun to try recording a video of it. This is the first time I did something like it, so feedback would be appreciated. Here&rsquo;s the video:</p>

<iframe width="732" height="412" src="https://www.youtube.com/embed/xH3QEfMXjh0?rel=0" frameborder="0" allowfullscreen></iframe>


<p>For the list of gear mentioned in the video check the <a href="https://bitly.com/bundles/ifdattic/1#">bitly collection</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Most important skill I learned from stopping smoking &amp; drinking]]></title>
    <link href="http://ifdattic.com/important-skill-learned-from-no-smoking-drinking"/>
    <updated>2015-03-08T12:03:17+02:00</updated>
    <id>http://ifdattic.com/most-important-skill-i-learned-from-stopping-smoking-and-drinking</id>
    <content type="html"><![CDATA[<blockquote><p><strong>tl;dr; Headbutt the problem and solve it right now as it won&rsquo;t go away</strong></p></blockquote>

<p>I stopped (will allow to say &ldquo;quit&rdquo; in 10 years) smoking about one year and 7 months ago (2013/08/10). I stopped drinking about 7 months ago (2014/08/15).</p>

<p>Funny thing is on 2013 I was burning a bunch of personal crap (dreadlocks, paintings, clothes, etc). A year later, I&rsquo;m burning the rest of my personal crap (letters, talismans, diaries, photos, etc.). Remembered that a year before I was doing the same thing and stopped smoking. Thought that it would be great if I stopped drinking after this burning.</p>

<p><a href="https://www.flickr.com/photos/ifdattic/16565367989" title="Burning personal crap, last day of drinking by Andrew Marcinkevičius, on Flickr" target="_blank"><img src="https://farm9.staticflickr.com/8743/16565367989_8462b9b24c_c.jpg" width="724" height="800" alt="Burning personal crap, last day of drinking"></a></p>

<p>It wasn&rsquo;t exactly easy and my though always was to not give any of them away. I liked both of guilty pleasures a lot. Actually, I thought it would be impossible to give them away. But once you challenge yourself you find that &ldquo;impossible&rdquo; is just a state of mind. Everything is possible when you don&rsquo;t know it&rsquo;s impossible. Or don&rsquo;t allow yourself to fail before trying.</p>

<p>I&rsquo;m not against smoking or drinking. I&rsquo;m not saying I won&rsquo;t start doing it ever again. I do know, I don&rsquo;t want to do them ever again, but I don&rsquo;t know if I&rsquo;m yet strong enough to keep it forever.</p>

<p>Even writing this article requires a lot of willpower to keep yourself from thinking how delicious is a thick smoke filling your lungs or a cold alcoholic beverage touching the tip of your tongue.</p>

<p>Only my thinking changed &ndash; they are the same as crutches are for a healthy person. Most of the time they are only hiding a deeper issue which won&rsquo;t go away. Feeling stressed? Go have a cigarette or a cold beer. Yes, it will get better. For now. The problem is that the issue is still there. Only hidden under a wall which will crumble like  a sand castle.</p>

<p>An believe me, the mind/body plays tricks on you trying to trip you. <em>&ldquo;Oh, this is such a perfect problem to have a cold beer over. Let me start you salivating from your mouth.&rdquo;</em> But if you win and reply with <em>&ldquo;No. It won&rsquo;t help with a problem. It won&rsquo;t solve a problem. It won&rsquo;t make me feel any better now or tomorrow and I will still have the same problem the next day. It&rsquo;s time to think how to solve this problem.&rdquo;</em> This moment is so empowering as you know that you took the hard way out, not the easy one out.</p>

<p>Stopping to drink and/or smoke might have improved my health &amp; finances. But the most important skill it taught me is to <strong>take the hard way out and solve a problem right away, not to hide away from it</strong>.</p>

<p>Have you tried to stop drinking or smoking? Have it taught you anything?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience with SensioLabs Symfony certification exam]]></title>
    <link href="http://ifdattic.com/my-experience-sensiolabs-symfony-certification-exam"/>
    <updated>2015-02-17T18:19:52+02:00</updated>
    <id>http://ifdattic.com/my-experience-with-sensiolabs-symfony-certification-exam</id>
    <content type="html"><![CDATA[<p>One day I check my email and see one from Fabien <em>&ldquo;Symfony turned 9 and for being one of top 100 contributors you get a free voucher.&rdquo;</em> It definitely lifted my spirits.</p>

<p>Voucher was valid for a year so I just created a calendar reminder <em>&ldquo;Learn for Symfony certificate.&rdquo;</em> Made it due sometime in Summer and more or less forgot about it. More than enough time left for it.</p>

<p>After the SymfonyCon Madrid I evaluated my career possibilities. Decided it&rsquo;s time to stop riding a dead horse and move the majority of my time working with Symfony framework. At the same time remembered the <a href="http://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&rsquo;s Law</a>. <strong>The task will take as long as it&rsquo;s given time</strong>. Time to add the deadline. No matter how much I will learn for it, on March 1st I need to book the exam.</p>

<p>Somehow I made January &amp; February months for learning a lot of new things. Because of that I didn&rsquo;t get as much practical experience as suspected. Still <strong>made a habit of 90 minutes reading Symfony documentation for breakfast</strong>, um, tasty. This habit was mandatory!</p>

<p>The only preparation what I did was to take all the topics written in certification page and put them in a Trello card. Add items for cookbook topics, doctrine, etc. Not all are required for certification, but a good documentation is like a good book for me, so I didn&rsquo;t mind adding them. Add the links for easy access to as much of items as possible and that&rsquo;s it.</p>

<p>At first the list of about 160 items makes you take a big breath. But one check-box at a time you can see the progress.</p>

<p>This was also the <em>great chance to improve the documentation</em> (fixing typos, etc.). Changing it to the way you imagine it (changing formatting, etc.) and picking the brains of Symfony contributors (discussions in PRs, etc.).</p>

<p><em>90 minutes each day was spent making a few notes once in a while, creating pull requests, experimenting a bit</em>. On February I did some calculations and estimated that around the middle of it I should be done. It was time to register for an exam. Really wanted to do it on February 13th the Friday (how cool does that sound). But the place I like staying at wasn&rsquo;t available for rent. Also it felt like trying to avoid the unavoidable (a bad habit to have). So just registered for Monday (the sooner the better).</p>

<p>In the remaining days finished with the remaining topics. Did a <em>quick second round on the book</em> and it was time to take the exam the next day. <em>This took me about 6 weeks (~63 hours)</em>. I never believed about learning till the last second. My choice always is to put a good nights sleep between learning &amp; applying it. So Sunday documentation breakfast was the last one I will be taking for at least a while (<em>failure is always an option</em>).</p>

<p>The next day I woke up feeling great. Slept well, had a nice meeting the day before, exercised, took a shower, ate and the day looked like it will be a great one. Or would it? Nah, it would be a good one. The worst that could happen is that I won&rsquo;t pass the exam and that&rsquo;s it. It&rsquo;s not the end of a world.</p>

<p>OK, I worried a bit about slipping on the icy bridge while walking to the exam center and breaking my neck or dropping into a cold water. But this is the problem with my imagination. Other than that, I was trying to keep a relaxed attitude by taking a long slow walk along the snowed river to the exam center. Went out early to keep my paranoia in check about arriving late, <em>I like to stay safe</em>.</p>

<p>It sounds silly, but after arriving <em>I noticed my legs getting a bit weaker and heart pounding a little harder. Stupid body</em>. Had about half an hour before the exam. I always try to prepare myself for the worst scenario (which never happens) just in case. And you get a pleasant surprise when the end result is better than that you were expecting. If you&rsquo;re prepared to lose both legs, losing only one of them is wonderful. But most of the time from my research (books, articles, etc.) the suggestion is to imagine the result you want and your mind will go towards it. I&rsquo;m still skeptic about it, but if it&rsquo;s repeated often there must be something to it. And <em>you can&rsquo;t learn without testing</em>, so why not, let&rsquo;s try it.</p>

<p>I sat down. Closed my eyes. Started taking monotonic breaths and focusing my mind on passing the exam. At least my heart stopped pounding. A fresher head couldn&rsquo;t hurt either.</p>

<p><em>I&rsquo;m personally a little skeptic about these exams as you could pass them with a good memory</em>. Especially after I met a person with a Java certificate when he shouldn&rsquo;t be a programmer in the first place. Unfortunately for me, <em>I  don&rsquo;t have a good memory, and it works in strange ways</em>. For example, trying to remember when I had my first operation (string of 10 characters) leads to the following flow: it was on my birthday, I finished school that year, it was my 19th birthday, I finished school one year after 18th birthday, on my school leaving certificate it&rsquo;s written 2006, so I had it on 2006-06-28. Not the best way to remember a date. <em>Fortunately for me, my logic module pick up the pace and helps were memory starts ramble. I just have to put enough resources to be able to link them together.</em></p>

<p>By reminding myself that it wouldn&rsquo;t matter if I fail my head wasn&rsquo;t occupied by negative thoughts about that will happen if I fail. This allowed to take the exam with <em>stone cold focus. Read the question, read the answers, pick the one which is correct or makes most sense, keep going</em>. Flagged two questions for review, but after the second time told myself to stop doing that and simply believe in myself. <em>I enjoyed the exam a lot. It had a good flow &amp; presentation of questions</em>. A few of them made my head go &ldquo;What??&rdquo; (unlike Zend Certificate which contained quite a few &ldquo;WTF?!?&rdquo; questions). Solution to them was simple &ndash; read the question &amp; answers again, you can do this.</p>

<p>75 questions later was confirming that I&rsquo;m finishing the exam and the moment of truth&hellip; Thinking I did good on exam. Still, took the big breath guessing if I should just wait for screen to change or close my eyes&hellip; The screen is still waiting&hellip; The screen finishes loading&hellip; And a log-in pop-up shoots to the front of the screen&hellip;</p>

<p>(╯°□°）╯︵ ┻━┻</p>

<p>After some fiddling I bring the screen back. My eyes start shooting around the screen scanning for required information. &hellip; &ldquo;<strong>Passed</strong>.&rdquo; Great, which level? &hellip; &ldquo;<strong>Expert</strong>.&rdquo; Yes *fist pump*</p>

<p>Unlike with PHP certificate my reaction at the end of exam was much more &ldquo;professional.&rdquo; It still felt awesome!!!</p>

<p>Note: For anyone who is interested I made a <a href="https://trello.com/c/aHnP3WUI/1-learn-for-symfony-certification">Trello card</a> public.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use MongoDB & NodeJS with Docker (video included)]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-nodejs-docker"/>
    <updated>2015-01-09T19:29:10+02:00</updated>
    <id>http://ifdattic.com/how-to-mongodb-nodejs-docker</id>
    <content type="html"><![CDATA[<p>This is the short intro on how to use spin up MongoDB and NodeJS containers using Docker. This will take you step by step on how to run those containers, some problems you might run into, how to avoid some pitfalls. After it you will have enough experience on working with Docker, MongoDB &amp; NodeJS. It will provide enough foundation to use those technologies and will give a head start if you will want to learn more. Initial intent was to use it for MongDB course from MongoDBUniversity, but it was reworked for general use. Part of the tutorial will provide tips on how to use it with the mentioned course.</p>

<p><del datetime="2015-01-27">A few months ago a friend mentioned a <a href="https://university.mongodb.com/courses/M101JS/about">MongoDB course from MongoDBUniversity</a>, which sounded like a lot of fun so of course I enrolled into it. It started a few days ago and it&rsquo;s a lot of fun. As I like to keep my OS clean the Docker looked like a great solution (one of the reasons I like it, just do something and throw it away after you&rsquo;re done, just like with cloud computing). This way I could take three rabbits with one shot learning <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://nodejs.org/">Node.js</a> and <a href="https://www.docker.com/">Docker</a> at the same time.</del></p>

<p><del datetime="2015-01-27">I just noticed that because I had to figure some things to make it all work this can be a great opportunity for an article to help my fellow companions with this step.</del></p>

<p>Please note that I&rsquo;m using Mac OS so you might need to adjust examples to your OS and/or user. Please use the <a href="https://docs.docker.com/installation/#installation">installation instructions</a> to launch the docker on your machine.</p>

<h2>MongoDB</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/mongo/">mongo image</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull mongo:latest
</span></code></pre></td></tr></table></div></figure>


<p>And when launch your MongoDB container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --name mongo -d mongo mongod --smallfiles
</span></code></pre></td></tr></table></div></figure>


<p>The current directory you&rsquo;re running this command from will be used as data directory in your container (provided by <code>$(pwd)</code>). Change it if you need to by entering the full path.</p>

<p>The running containers can be checked by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># display only running containers</span>
</span><span class='line'>docker ps
</span><span class='line'>
</span><span class='line'><span class="c"># or if you want all containers displayed</span>
</span><span class='line'>docker ps -a
</span></code></pre></td></tr></table></div></figure>


<p>There are two options for connecting to your Mongo database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it <span class="se">\</span>
</span><span class='line'>    --link mongo:mongo <span class="se">\</span>
</span><span class='line'>    --rm mongo sh <span class="se">\</span>
</span><span class='line'>    -c <span class="s1">&#39;exec mongo &quot;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># or on one line for easier copy-paste</span>
</span><span class='line'>docker run -it --link mongo:mongo --rm mongo sh -c <span class="s1">&#39;exec mongo &quot;$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new mongo container which is linked with an existing mongo container. After container is created the command which connects to database is executed.</p>

<p>Personally, I like just connecting to a running container and executing needed commands from it. You can do what with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker <span class="nb">exec</span> -it 442c2541fe1a bash <span class="c"># by ID</span>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>docker <span class="nb">exec</span> -it mongo bash <span class="c"># by Name</span>
</span></code></pre></td></tr></table></div></figure>


<p>To test that your mongo database is working execute the following commands from mongo container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo
</span><span class='line'>db.col.insert<span class="o">({</span><span class="s2">&quot;a&quot;</span>: 4<span class="o">})</span>
</span><span class='line'>db.col.find<span class="o">()</span>.pretty<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new document should have been inserted and displayed back to you. You Mongo database is up and ready to be used in your projects.</p>

<h3>Dump and restore the database</h3>

<p>Please note that depending on your set up the database files might not be synced with your host OS. You can check this by listing the files of database directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls -la db
</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s empty then database files are not synced.</p>

<p>If the data you have in your database is important and you don&rsquo;t want to lose it export it before removing your container (stopping the container will preserve the files).</p>

<p>Please check the documentation or <code>--help</code> output for more information, but to do a simple export run the following from the container (export <code>test</code> database to <code>/data/test-backup</code> destination):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongodump --db <span class="nb">test</span> --out /data/test-backup
</span></code></pre></td></tr></table></div></figure>


<p>Your data directory (from the container) should now contain the backup files and it should be synced with your host OS.</p>

<p>To restore the data run the following from container (restore <code>/data/test-backup/test/</code> into a <code>test-restored</code> database):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongorestore --db <span class="nb">test</span>-restored /data/test-backup/test
</span></code></pre></td></tr></table></div></figure>


<h2>Node.js</h2>

<p>First get the latest <a href="https://registry.hub.docker.com/_/node/">node image</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker pull node:latest
</span></code></pre></td></tr></table></div></figure>


<p>To launch the NodeJS container run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --rm node
</span></code></pre></td></tr></table></div></figure>


<p>This will run the node container and will put you in the interactive shell (REPL) from which you can execute code. You can test it by entering:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>console.log<span class="o">(</span><span class="s1">&#39;It works!!&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To exit the interactive shell and remove the container (as it contains <code>--rm</code> option) press <code>Control+C</code> twice.</p>

<p>You have multiple ways of running your NodeJS applications. One which I personally like (especially for MongoDB course) is to create a container which has all the required data mounted and is linked to mongo container. This allows to run multiple applications without having to create new containers. It also exposes the port to host machine so you could open the application in your browser. If you want you can set working directory with <code>-w</code> option.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run -it --name node -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --link mongo:mongo -w /data -p 8082:8082 node bash
</span></code></pre></td></tr></table></div></figure>


<p>Now to run the application just enter its directory, install dependencies and run front controller script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># execute commands in container</span>
</span><span class='line'><span class="nb">cd </span>hw3-2and3-3/blog
</span><span class='line'>npm install
</span><span class='line'>node app.js
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re running these examples with MongoDB course examples it will fail. This is because it&rsquo;s trying to connect to Mongo database on localhost, but our Mongo database isn&rsquo;t on local machine. There are multiple ways to fix this:</p>

<ul>
<li>hard code the connection string (with linked container IP);</li>
<li>use environment variables which are added automatically by Docker (when linking);</li>
<li>use hosts entry which is added automatically by Docker (when linking).</li>
</ul>


<p>Example below contains the representation of all those methods. Please choose the one which you like most or is best for your use case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Original connect</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost:27017/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connect using environment variables</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://&#39;</span><span class="o">+</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_PORT_27017_TCP_ADDR</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_PORT_27017_TCP_PORT</span><span class="o">+</span><span class="s1">&#39;/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connect using hosts entry</span>
</span><span class='line'><span class="nx">MongoClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://mongo:27017/blog&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>After fixing the <code>connect()</code> method the application should run successfully. You can reach it by opening <code>http://192.168.59.103:8082</code> (if it was IP address of your Docker application) or if you added the Docker IP as <code>docker</code> in your hosts file <code>http://docker:8082</code>.</p>

<p>To exit your application press <code>Control-C</code></p>

<p>It&rsquo;s also possible to run the application in container directly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># from host OS terminal</span>
</span><span class='line'>docker run <span class="se">\</span>
</span><span class='line'>    --name nodeapp <span class="se">\</span>
</span><span class='line'>    -v <span class="s2">&quot;$(pwd)&quot;</span>:/data <span class="se">\</span>
</span><span class='line'>    --link mongo:mongo <span class="se">\</span>
</span><span class='line'>    -w /data/hw3-2and3-3/blog <span class="se">\</span>
</span><span class='line'>    -p 8082:8082 <span class="se">\</span>
</span><span class='line'>    -d node node app.js
</span><span class='line'>
</span><span class='line'><span class="c"># or on one line for easy copy-paste</span>
</span><span class='line'>docker run --name nodeapp -v <span class="s2">&quot;$(pwd)&quot;</span>:/data --link mongo:mongo -w /data/hw3-2and3-3/blog -p 8082:8082 -d node node app.js
</span></code></pre></td></tr></table></div></figure>


<p>The following commands might be useful when running containers as daemons (replace <code>nodeapp</code> with ID or name of container):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># to see running containers</span>
</span><span class='line'>docker ps
</span><span class='line'>
</span><span class='line'><span class="c"># to check output of container</span>
</span><span class='line'>docker logs nodeapp
</span><span class='line'>
</span><span class='line'><span class="c"># to tail the output of container</span>
</span><span class='line'>docker logs -f nodeapp
</span><span class='line'>
</span><span class='line'><span class="c"># to stop running container</span>
</span><span class='line'>docker stop nodeapp
</span></code></pre></td></tr></table></div></figure>


<h2>MongoDB Course Manual Validation Tips</h2>

<p>If you using this for MongoDB University course and chose to do manual validation (haven&rsquo;t tested with MongoProc validation) you will need to keep a few things in your mind.</p>

<p>For second week second homework it&rsquo;s not possible to configure the validation script and it tries to connect to Mongo database which is on localhost. To fix this open your <code>/etc/hosts</code> file (you might need to install some editor on your container), enter the <code>MONGOIP localhost</code> as the first entry (<strong>replace <code>MONGOIP</code> with mongo container IP address, should be in the same hosts file</strong>) and comment out the real <code>localhost</code> entry. Now running validation script should succeed and you should receive the validation code if you did homework assignment correctly. <strong>Don&rsquo;t forget to revert the changes to <code>/etc/hosts</code> file!!!</strong></p>

<p>Other assignment validation is simpler as it allows to configure the validation script. Run validation with <code>--help</code> to see what is available for configuration. The defaults for web server should be correct (as you should have one container and two terminals for it, one running the application, another executing validation) you only need to change connection string for Mongo database. Enter the following to validate third week second assignment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node hw3-2validate.js --db mongodb://mongo:27017/blog
</span></code></pre></td></tr></table></div></figure>


<p>If you done your homework correctly you should receive the validation code.</p>

<h2>Conclusion</h2>

<p>Now you should have enough knowledge to be able to run MongoDB and NodeJS using Docker. You can take most of that knowledge and expand it to other containers even if you don&rsquo;t want to learn more about Docker. This would still provide you with ability to rapidly test your ideas and throw away the resources as needed.</p>

<p>If you&rsquo;re using this for MongoDB University course it should help with most of the issues you could run while completing your assignments.</p>

<p>If you&rsquo;re willing to hurt your ears by listening to my voice you can find the screen cast of this whole tutorial at <a href="https://www.youtube.com/playlist?list=PLOyuTJZcQNNDSVMlAkIEoPX9CDrOGyTVt">YouTube</a>. If you&rsquo;re listening on mute or can&rsquo;t understand what I&rsquo;m saying the <a href="scripts/screencast-how-to-mongo-node-docker">script for screen cast is available</a>.</p>

<p>If you have any questions, suggestions or any part of it is unclear please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Node.js the Right Way Book]]></title>
    <link href="http://ifdattic.com/review-nodejs-right-way-book"/>
    <updated>2014-12-25T16:08:52+02:00</updated>
    <id>http://ifdattic.com/review-of-node-dot-js-the-right-way-book</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://ecx.images-amazon.com/images/I/51+VjuSvKJL._SL250_.jpg" title="Node.js the Right Way Book Cover" alt="Node.js the Right Way Book Cover"></p>

<p>I&rsquo;m a big fan of learning something new. After enrolling into <a href="https://university.mongodb.com/courses/M101JS/about">MongoUniversity MongoDB course</a> where all the examples would be in Node.js, decided it would be great time to at least get acquainted with Node.js. Then as the luck would have it, someone tweeted about &ldquo;<a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Node.js The Right Way</a> by <a href="https://twitter.com/hexlib">Jim. R. Wilson</a>&rdquo; from <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>, which is always a great place to look for books. As the ebook version is available on Amazon (screw the discounts, I require my ebooks to be locked into the Amazon ecosystem), I bought it. Now I knew how I will be spending my mornings for a while.</p>

<!-- more -->


<p>The book is made from the following chapters:</p>

<ol>
<li><strong>Getting Started</strong> introduces the Node.js event loop, outlines the five aspects of Node.js development and provides instructions you would need for the following chapters.</li>
<li><strong>Wrangling the File System</strong> will help you write your first Node.js program &ndash; using Node&rsquo;s filesystem tools to create asynchronous, nonblocking file utilities.</li>
<li><strong>Networking with Sockets</strong> is were you will create a TCP servers and client programs for accessing them. This chapter will offer insight into Node application design and provide experience creating testable and fault-tolerant systems.</li>
<li><strong>Robust Message-Passing</strong> will introduce you to using third-party libraries. Using ØMQ (ZeroMQ) you will create suites of programs that work together in concert, and you will learn the clustering tools for managing them.</li>
<li><strong>Accessing Databases</strong> introduces databases and how to interact with them asynchronously in Node. The database created in this chapter is the foundation for RESTful APIs you&rsquo;ll be developing in later chapters.</li>
<li><strong>Scalable Web Services</strong> chapter will use Express, a popular Node.js web framework for routing requests. It will introduce objects called promises for managing asynchronous code flows and how to couple them in interesting ways with generator functions.</li>
<li><strong>Web Apps</strong> is the final chapter were you will build a single-page web application for integrating with web services created in previous chapters. In this chapter you will be using Passport module for authenticating with Google account credentials and storing session data in Redis.</li>
</ol>


<p>Each chapter provides some aspects of Node.js development like: Architecture and Core, Patterns, JavaScriptisms, Supporting Code.</p>

<p>A few issues (suggestions) for the book is that code samples could be more concise. It does not take any value away from them, but would just be nicer.</p>

<p>The database chapter requires a dataset which extracts to at least 500 MB (didn&rsquo;t wait for it to finish). My suggestion would be to provide a cropped dataset or simply add a note to kill the extraction at some point (just extract enough to make the examples work).</p>

<p>In my opinion it would be great if book provided a Vagrant or Docker file for having an environment which contains all the required software and working code examples.</p>

<p>The book has a very nice flow. Providing a lot of code examples and giving explanations for each line (block) of code. Still, you should have at least some JavaScript knowledge.</p>

<p>At the end of each chapter, questions and exercises are provided for improving your knowledge of what you learned from the chapter.</p>

<p>If you want to learn Node.js in my opinion this is the great book for that. It would provide you with enough knowledge where you will be confident to start using it in your everyday life and continue learning it through practice.</p>

<p>You can buy it from <a href="http://www.amazon.com/gp/product/B00HSO6YD8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00HSO6YD8&amp;linkCode=as2&amp;tag=if015-20&amp;linkId=2KSSTQD6Z2X2CDRS">Amazon</a> or <a href="https://pragprog.com/book/jwnode/node-js-the-right-way">The Pragmatic Programmers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symfony Events: Require Account Information After Registration]]></title>
    <link href="http://ifdattic.com/symfony-events-require-account-information-after-registration"/>
    <updated>2014-12-03T10:04:45+02:00</updated>
    <id>http://ifdattic.com/symfony-events-require-account-information-after-registration</id>
    <content type="html"><![CDATA[<p>The user visits your application, clicks &ldquo;Sign up with Twitter&rdquo;, authorizes the application and he&rsquo;s ready to use your application with his profile data already filled. Unfortunately in this case you won&rsquo;t have a users&#8217; email address as Twitter doesn&rsquo;t share it. Or what if you require something else that might not be provided by a different social network. In this case you might want to require your user to fill mandatory information before using the application. And in Symfony it&rsquo;s easy to do using events.</p>

<p><strong>Note:</strong> the tutorial assumes that your application is using <a href="https://github.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a> for user management.  If you want to add registration/login using social networks, I recommend using <a href="https://github.com/hwi/HWIOAuthBundle">HWIOAuthBundle</a> (not needed for this tutorial). Application assumes what when registering a user he is disabled and he is not enabled until he provides all the required information.</p>

<p>First initialize the <code>src/Ifdattic/UserBundle/EventListener/AccountInformationListener.php</code> (change namespaces as required) with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Ifdattic\UserBundle\EventListener</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">FOS\UserBundle\Event\FormEvent</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">FOS\UserBundle\FOSUserEvents</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\RedirectResponse</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FilterControllerEvent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Route to redirect to</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @var string</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$redirectRoute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param string $redirectRoute Route to redirect to if conditions not met</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$redirectRoute</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span> <span class="o">=</span> <span class="nv">$redirectRoute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * {@inheritDoc}</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;kernel.controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onKernelController&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">FOSUserEvents</span><span class="o">::</span><span class="na">PROFILE_EDIT_SUCCESS</span> <span class="o">=&gt;</span> <span class="s1">&#39;onProfileEdit&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The listener is provided a route name when initializing it (via constructor argument) and it subscribes to two events: <code>kernel.controller</code> and <code>FOSUserEvents::PROFILE_EDIT_SUCCESS</code>.</p>

<p>Add the method which will be executed on <code>kernel.controller</code> event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * If user is not enabled (haven&#39;t provided all information) make him to</span>
</span><span class='line'><span class="sd">     * finish it before using the application.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  FilterControllerEvent $event</span>
</span><span class='line'><span class="sd">     * @return mixed</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelController</span><span class="p">(</span><span class="nx">FilterControllerEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span> <span class="o">===</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;_route&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getController</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$controller</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nb">method_exists</span><span class="p">(</span><span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;get&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$security</span> <span class="o">=</span> <span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;security.context&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$security</span><span class="o">-&gt;</span><span class="na">isGranted</span><span class="p">(</span><span class="s1">&#39;IS_AUTHENTICATED_REMEMBERED&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$security</span><span class="o">-&gt;</span><span class="na">getToken</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">isEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$redirectUrl</span> <span class="o">=</span> <span class="nv">$controller</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectRoute</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setController</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$redirectUrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nx">RedirectResponse</span><span class="p">(</span><span class="nv">$redirectUrl</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method first checks what redirect route and controller is provided. Then using <code>security.context</code> service make sure the user is authenticated before continuing. If user is authenticated, but he is not enabled a URL is generated and controller is replaced with an anonymous function which returns a redirect response.</p>

<p>Some might be wondering how much of an overhead this will add. Don&rsquo;t worry, it will probably won&rsquo;t even show on your profiler (if threshold is set to >0ms).</p>

<p>It should be possible to enable a user when he provides all the required information. Add a method to execute on profile edit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">AccountInformationListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Enable user after he filled all the required account information.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param  FormEvent $event</span>
</span><span class='line'><span class="sd">     * @return void</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onProfileEdit</span><span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getForm</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">===</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">isEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setEnabled</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return a user after successful form submit (after validation, etc.) and enable him if he was not enabled before. This point is a great place to collect some metrics to help you track activated users, how long it takes to activate, etc. It can be done simply by sending another event (event dispatcher can be returned from current event using <code>getDispatcher()</code> method).</p>

<p>To enable the listener add it as a service (<code>src/Ifdattic/UserBundle/Resources/config/services.yml</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ifdattic_user.account_information.listener</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Ifdattic\UserBundle\EventListener\AccountInformationListener</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;fos_user_profile_edit&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">{</span> <span class="nv">name</span><span class="p-Indicator">:</span> <span class="nv">kernel.event_subscriber</span> <span class="p-Indicator">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you visited the application with a user which is not enabled, he should be redirected to a profile edit page. If a new field which is required for using the application is added, you could disable a user to make sure he provides that information before continuing. If you want to send a user to a different page (e.g., profile edit page has a lot of optional fields and you want to display only required fields) just change the first argument for the listener.</p>

<p>This is optional, but to help users understand the next step add some visuals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># in app/Resources/FOSUserBundle/translations/FOSUserBundle.en.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">profile</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">edit</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">message_for_disabled_user</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">header</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Required account information</span>
</span><span class='line'>            <span class="l-Scalar-Plain">message</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Please provide the required information before using the application</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="c">{# in src/Ifdattic/UserBundle/Resources/views/Profile/_disabled_user_message.html.twig #}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">trans_default_domain</span> <span class="s1">&#39;FOSUserBundle&#39;</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">{%</span> <span class="k">if</span> <span class="nv">app.user.isEnabled</span> <span class="o">==</span> <span class="kp">false</span> <span class="cp">%}</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;div&gt;</span>
</span><span class='line'><span class="x">        &lt;h3&gt;</span><span class="cp">{{</span> <span class="s1">&#39;profile.edit.message_for_disabled_user.header&#39;</span><span class="o">|</span><span class="nf">trans</span> <span class="cp">}}</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">        &lt;p&gt;</span><span class="cp">{{</span> <span class="s1">&#39;profile.edit.message_for_disabled_user.message&#39;</span><span class="o">|</span><span class="nf">trans</span> <span class="cp">}}</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="x">    &lt;/div&gt;</span>
</span><span class='line'><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jinja'><span class='line'><span class="c">{# in src/Ifdattic/UserBundle/Resources/views/Profile/edit_content.html.twig #}</span><span class="x"></span>
</span><span class='line'><span class="cp">{%</span> <span class="k">include</span> <span class="s2">&quot;IfdatticUserBundle:Profile:_disabled_user_message.html.twig&quot;</span> <span class="cp">%}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Requiring account information was very easy to implement with a simple listener and now it can be extended by adding more logic and actions to it.</p>

<p>Source files are available as a <a href="https://gist.github.com/ifdattic/21a0575dc4878633430e">gist</a>.</p>

<p>Do you have any suggestions, ideas, questions? Please share them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating DataDog &amp; logstash on AWS EC2]]></title>
    <link href="http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2"/>
    <updated>2014-11-26T15:36:49+02:00</updated>
    <id>http://ifdattic.com/integrating-datadog-and-logstash-on-aws-ec2</id>
    <content type="html"><![CDATA[<p>If you have an application you should collect metrics and data about it to be able to improve your application. There is multiple solutions for collecting stats, but I chose <a href="http://www.datadoghq.com/">DataDog</a> for my application. Below you will find how to integrate DataDog agent on EC2 server using ElasticBeanstalk and how to send Apache logs to DataDog using logstash.</p>

<p><strong>Note:</strong> The tutorial assumes that you&rsquo;re <a href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk">deploying a Symfony application using AWS ElasticBeanstalk</a> (the link points to an article on how to do it). If you&rsquo;re deploying a different application or don&rsquo;t want to use EB, you will need to make some changes (which will be left as an exercise for the reader).</p>

<h2>Add DataDog Config</h2>

<p>To install and configure the DataDog agent create <code>.ebextensions/02-datadog.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">datadog-agent</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">rpm</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">datadog</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://yum.datadoghq.com/rpm/x86_64/datadog-agent-5.1.0-539.x86_64.rpm</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-copy-config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/copy-datadog-config.sh&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-restart-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/datadog-agent</span><span class="nv"> </span><span class="s">restart&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">$SYMFONY__ENV__DATADOG__API__KEY</span><span class="nv"> </span><span class="s">]&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">250-stop-agent</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/datadog-agent</span><span class="nv"> </span><span class="s">stop&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">$SYMFONY__ENV__DATADOG__API__KEY</span><span class="nv"> </span><span class="s">]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>.ebextensions/bin/copy-datadog-config.sh</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sed <span class="s1">&#39;s/api_key:.*/api_key: &#39;</span><span class="s2">&quot;$SYMFONY__ENV__DATADOG__API__KEY&quot;</span><span class="s1">&#39;/&#39;</span> /etc/dd-agent/datadog.conf.example &gt; /etc/dd-agent/datadog.conf
</span></code></pre></td></tr></table></div></figure>


<p>If you will deploy an application with these configuration files, EB will install DataDog agent and run the configuration script to update the API key. The API key should be set as an environment variable for the hosts you want to measure. When if <code>SYMFONY__ENV__DATADOG__API__KEY</code> environment variable is set on the host it will restart the DataDog agent to reload the configuration and give a deployment event in DataDog application. If the environment variable is not set (for example you don&rsquo;t want to track a host anymore) it would stop the agent.</p>

<p>This is enough to start receiving some metrics about your hosts on DataDog application, but more can be done.</p>

<h2>Apache Rewrite For Symfony</h2>

<p>Apache has a <code>server-status</code> handler which provides some statistics about current server status. The Symfony application configuration blocks this route, add the following condition in your <code>.htaccess</code> or Apache configuration file (will depend on your project) before queries are rewritten to front controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Allow internal requests</span>
</span><span class='line'><span class="nb">RewriteCond</span> %{REQUEST_URI} !^/internal/.+$
</span></code></pre></td></tr></table></div></figure>


<p>This will allow requests to <code>/internal</code> URLS (in case you need to add more locations reachable by URL).</p>

<h2>DataDog Apache Integration</h2>

<p>To send server statistics first create internal server status location in your Apache configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Enable server-status for internal IP</span>
</span><span class='line'><span class="nt">&lt;Location</span> <span class="s">/internal/server-status</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nb">SetHandler</span> server-status
</span><span class='line'>   <span class="nb">Order</span> Deny,Allow
</span><span class='line'>   <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>   <span class="nb">Allow</span> from <span class="m">127.0.0.1</span>
</span><span class='line'><span class="nt">&lt;/Location&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow to get server statistics locally (when connected to a host or from the host).</p>

<p>Next update <code>.ebextensions/02-datadog.config</code> file and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">/etc/dd-agent/conf.d/apache.yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="s">&quot;000644&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">owner</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dd-agent</span>
</span><span class='line'>        <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">init_config:</span>
</span><span class='line'>
</span><span class='line'>            <span class="no">instances:</span>
</span><span class='line'>                <span class="no">-   apache_status_url: http://127.0.0.1/internal/server-status?auto</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create Apache configuration file for DataDog agent pointing it to an URL where it can get server statistics. After deployment you should start receiving metrics about your current server status.</p>

<h2>Install &amp; logstash</h2>

<p><a href="http://logstash.net/">logstash</a> is a tool for managing events and logs.</p>

<p>To install logstash (optional: contrib plugin is installed only once, if you don&rsquo;t use it you can remove the <code>200-install-contrib-plugin</code> command) on deployment create <code>.ebextensions/02-logstash.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">/etc/yum.repos.d/logstash.repo</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mode</span><span class="p-Indicator">:</span> <span class="s">&quot;000644&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">owner</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>        <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>            <span class="no">[logstash-1.4]</span>
</span><span class='line'>            <span class="no">name=logstash repository for 1.4.x packages</span>
</span><span class='line'>            <span class="no">baseurl=http://packages.elasticsearch.org/logstash/1.4/centos</span>
</span><span class='line'>            <span class="no">gpgcheck=1</span>
</span><span class='line'>            <span class="no">gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch</span>
</span><span class='line'>            <span class="no">enabled=1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-install-logstash</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;yum</span><span class="nv"> </span><span class="s">-y</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">logstash-1.4.2&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-install-contrib-plugin</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;wget</span><span class="nv"> </span><span class="s">-O</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">http://download.elasticsearch.org/logstash/logstash/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">tar</span><span class="nv"> </span><span class="s">zxf</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-1.4.2.tar.gz</span><span class="nv"> </span><span class="s">-C</span><span class="nv"> </span><span class="s">/opt/logstash</span><span class="nv"> </span><span class="s">--strip</span><span class="nv"> </span><span class="s">1</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">touch</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-installed&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">/tmp/logstash-contrib-installed</span><span class="nv"> </span><span class="s">]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Parse Apache Logs</h2>

<p>To start parsing Apache logs the logstash first has to be configured. Add the contents bellow to <code>.ebextensions/02-logstash.config</code> file. You will notice what command <code>300-restart-service</code> is commented out, why will be explained shortly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-delete-configs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;rm</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">/etc/logstash/conf.d/*&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-configs</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/logstash/*</span><span class="nv"> </span><span class="s">/etc/logstash/conf.d/&quot;</span>
</span><span class='line'>    <span class="c1"># 300-restart-service:</span>
</span><span class='line'>    <span class="c1">#     command: &quot;service logstash restart&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following to Apache configuration to have more information in Apache logs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">log_config_module</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LogFormat</span> <span class="s2">&quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot; %D %T&quot;</span> combined
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create logstash configuration for parsing Apache logs in <code>.ebextensions/logstash/apache.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">input</span> {
</span><span class='line'>  <span class="nb">file</span> {
</span><span class='line'>    <span class="nb">exclude</span> =&gt; <span class="s2">&quot;*.gz&quot;</span>
</span><span class='line'>    <span class="nb">path</span> =&gt; <span class="s2">&quot;/var/log/httpd/*&quot;</span>
</span><span class='line'>    <span class="nb">type</span> =&gt; <span class="s2">&quot;apache-access&quot;</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">filter</span> {
</span><span class='line'>  <span class="nb">grok</span> {
</span><span class='line'>    <span class="nb">match</span> =&gt; [<span class="s2">&quot;message&quot;</span>, <span class="s2">&quot;%{COMBINEDAPACHELOG} %{NUMBER:microseconds} %{NUMBER:seconds}&quot;</span>]
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">output</span> {
</span><span class='line'>  <span class="nb">statsd</span> {
</span><span class='line'>    <span class="nb">count</span> =&gt; [<span class="s2">&quot;apache.count.bytes&quot;</span>, <span class="s2">&quot;%{bytes}&quot;</span>]
</span><span class='line'>    <span class="nb">increment</span> =&gt; <span class="s2">&quot;apache.count.response.%{response}&quot;</span>
</span><span class='line'>    <span class="nb">increment</span> =&gt; <span class="s2">&quot;apache.count.request.%{request}&quot;</span>
</span><span class='line'>    <span class="nb">timing</span> =&gt; [<span class="s2">&quot;apache.timing.request.%{request}&quot;</span>, <span class="s2">&quot;%{microseconds}&quot;</span>]
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">if</span> [response] =~ /^2\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.2XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^3\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.3XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^4\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.4XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span> <span class="nb">else</span> if [response] =~ /^5\d\d/ {
</span><span class='line'>    <span class="nb">statsd</span> { increment =&gt; <span class="s2">&quot;apache.count.response.5XX&quot;</span> }
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will process apache logs and will send metrics using statsd output. Make changes to track what you need.</p>

<p><img src="https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/datadog-http-response-chart.png"  alt="Chart of HTTP status responses"></p>

<p>As a use case one of tracked metrics with this configuration is HTTP status responses by type. You can create a graph helping you visualize for spikes of 4xx responses (e.g., a bug was introduced in latest deployment or hackers are scanning for vulnerabilities).</p>

<p>Unfortunately I wasn&rsquo;t able to make any of logstash service scripts to work (this is why restart command was commented out). With all the scripts the logstash service is started fine, but no metrics are being output. If you have any suggestions please share. For now I&rsquo;m using the following way to run logstash.</p>

<p>Create the <code>.ebextensions/01-pre.config</code> file with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-create-posthook-dir</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;mkdir</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span> <span class="s">&quot;[</span><span class="nv"> </span><span class="s">!</span><span class="nv"> </span><span class="s">-d</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post</span><span class="nv"> </span><span class="s">]&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">100-chmod-posthooks</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;chmod</span><span class="nv"> </span><span class="s">+x</span><span class="nv"> </span><span class="s">.ebextensions/hooks/appdeploy/post/*&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-posthooks</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/hooks/appdeploy/post/*</span><span class="nv"> </span><span class="s">/opt/elasticbeanstalk/hooks/appdeploy/post/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a post hooks directory for ElasticBeanstalk and copy the post hooks to it. Create the <code>.ebextensions/hooks/appdeploy/post/logstash-background-job.sh</code> script which will start logstash after deployment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>. /opt/elasticbeanstalk/support/envvars
</span><span class='line'>
</span><span class='line'><span class="k">for </span>pid in <span class="sb">`</span>ps aux | grep /etc/logstash/conf.d | grep -v grep | tr -s <span class="s1">&#39; &#39;</span> | cut -d <span class="s1">&#39; &#39;</span> -f 2<span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">disown</span> <span class="nv">$pid</span>
</span><span class='line'>    <span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">HOME</span><span class="o">=</span>/var/lib/logstash
</span><span class='line'>
</span><span class='line'>/opt/logstash/bin/logstash <span class="se">\</span>
</span><span class='line'>    -f /etc/logstash/conf.d <span class="se">\</span>
</span><span class='line'>    -l /var/log/logstash/logstash.log <span class="se">\</span>
</span><span class='line'>    &gt; /var/log/logstash/logstash.stdout <span class="se">\</span>
</span><span class='line'>    2&gt; /var/log/logstash/logstash.err <span class="se">\</span>
</span><span class='line'>    &amp;
</span></code></pre></td></tr></table></div></figure>


<p>This script will first kill all the running logstash processes (you should have only one, otherwise your metrics would be sent multiple times) and then start a new logstash process. After deployment you should start receiving metrics from processed Apache logs.</p>

<h2>Conclusion</h2>

<p>You should be receiving a lot of different metrics in your DataDog account and it&rsquo;s easy to extend to receive even more. This will allow you to measure how your application is performing and make important business decisions.</p>

<p>All files can be found in the <a href="https://gist.github.com/ifdattic/61a5b2708dff8811e7e2">gist</a>, the first line displays the full path for it and should be removed from files.</p>

<p>What about you: are you tracking how your application is performing? Or maybe you have suggestions? Please share them in comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use MongoDB for Sessions in Symfony Application]]></title>
    <link href="http://ifdattic.com/how-to-mongodb-sessions-symfony-application"/>
    <updated>2014-10-20T16:48:25+03:00</updated>
    <id>http://ifdattic.com/how-to-use-mongodb-for-sessions-in-symfony-application</id>
    <content type="html"><![CDATA[<p>The tutorial assumes that the project is using MongoDB and has everything configured (Doctrine ODM bundle, etc.).</p>

<p>Add the services to <code>app/config/services.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo.connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getMongo</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.connection</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MongoDoctrine\MongoDB\Connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">doctrine.odm.mongodb.document_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getConnection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">initialize</span><span class="p-Indicator">,</span> <span class="p-Indicator">[]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.session.handler</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Symfony\Component\HttpFoundation\Session\Storage\Handler\MongoDbSessionHandler</span>
</span><span class='line'>        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;@mongo&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;%mongo.session.options%&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the parameters for session handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># app/config/parameters.yml.dist</span>
</span><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongo.session.options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_database%&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sessions</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the session handler in <code>app/config/config.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">session</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">handler_id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo.session.handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your sessions should be saved in the MongoDB database.</p>

<p>If you want to change how long the session is persisted and improve security, add the following code to your configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">session</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">cookie_lifetime</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1209600</span> <span class="c1"># 14 days</span>
</span><span class='line'>        <span class="l-Scalar-Plain">cookie_httponly</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might also find &ldquo;<a href="http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb">How to save Symfony logs to MongoDB</a>&rdquo; interesting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Send Symfony Application Logs to MongoDB]]></title>
    <link href="http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb"/>
    <updated>2014-10-05T15:01:41+03:00</updated>
    <id>http://ifdattic.com/how-to-send-symfony-application-logs-to-mongodb</id>
    <content type="html"><![CDATA[<p>The tutorial assumes that the project is using MongoDB and has everything configured (Doctrine ODM bundle, etc.).</p>

<p>Add the log connection to <code>app/config/config.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">doctrine_mongodb</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">connections</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">log</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">server</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_server%&quot;</span>
</span><span class='line'>            <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_password%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_username%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">document_managers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">log</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">auto_mapping</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>            <span class="l-Scalar-Plain">logging</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>A separate connection is needed with <code>logging</code> disabled as otherwise it will lead to a circular reference error (as the connection is using a logger).</p>

<p>In <code>app/config/config_prod.yml</code> add the mongo handler for Monolog and replace <code>fingers_crossed</code> handler with it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">monolog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">main</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span>         <span class="l-Scalar-Plain">fingers_crossed</span>
</span><span class='line'>            <span class="l-Scalar-Plain">action_level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">error</span>
</span><span class='line'>            <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span>      <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>            <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">debug</span>
</span><span class='line'>            <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog</span>
</span><span class='line'>                <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_database%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_collection%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to log to MongoDB on development environment, replace main handler with following code (or add an additional handler):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">monolog</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">handlers</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">main</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongo</span>
</span><span class='line'>            <span class="l-Scalar-Plain">level</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">debug</span>
</span><span class='line'>            <span class="l-Scalar-Plain">mongo</span><span class="p-Indicator">:</span>
</span><span class='line'>                <span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog</span>
</span><span class='line'>                <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&quot;%mongodb_log_database%&quot;</span>
</span><span class='line'>                <span class="l-Scalar-Plain">collection</span><span class="p-Indicator">:</span> <span class="s">&quot;logs_%kernel.environment%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update the parameters file <code>app/config/parameters.yml.dist</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_server</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.server%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_database</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.database%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_password</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.password%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_username</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.username%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_log_collection</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb_log.collection%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the services used by Monolog handler.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># app/config/services.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongolog</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Mongo</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mongolog.connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getMongo</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongolog.connection</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">class</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MongoDoctrine\MongoDB\Connection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">doctrine_mongodb.odm.log_document_manager</span>
</span><span class='line'>        <span class="l-Scalar-Plain">factory_method</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">getConnection</span>
</span><span class='line'>        <span class="l-Scalar-Plain">calls</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="p-Indicator">-</span> <span class="p-Indicator">[</span><span class="nv">initialize</span><span class="p-Indicator">,</span> <span class="p-Indicator">[]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything was set correctly the logs should start appearing in MongoDB database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fighting Your Fears: Triple Combo - Flower Girl]]></title>
    <link href="http://ifdattic.com/fighting-your-fears-triple-combo-flower-girl"/>
    <updated>2014-09-24T19:12:18+03:00</updated>
    <id>http://ifdattic.com/fighting-your-fears-triple-combo-flower-girl</id>
    <content type="html"><![CDATA[<p>Today (2014-09-19), I hit a triple headshot on my &ldquo;did for the first time checklist.&rdquo; It was: gift someone flowers, ask for a name first, tell random girl she&rsquo;s amiable (I like the word translation in Lithuanian more so from now on in English &ldquo;cute&rdquo; will be used).</p>

<p>Today was planed as the day off cause after an eye doctor visit I was not supposed to see anything (blind as a rabbit who doesn&rsquo;t eat carrots). Spent hours just walking in the sun, listening to audio books (activity I enjoy as it allows me to disconnect), relaxing.</p>

<p>While walking through a shopping center in a flower section noticed a girl and kept walking (I look at walking like a shark looks at swimming &ndash; <em>you stop, you die</em>).</p>

<p>But one of the voices in my head went <em>&ldquo;she&rsquo;s cute&rdquo;</em> and another replied <em>&ldquo;yea, as she is working in a flower shop it might be fun to ask for her suggestion of what to gift to a cute girl and then give it to her.&rdquo;</em> The previous voice replied with <em>&ldquo;sure, sure, we definitely should do it&rdquo;</em>, but you know in that tone were someone agrees with you, but deep inside they are praying you won&rsquo;t take them on their offer.</p>

<p>Fortunately, during the past year, the voice which tries to throw me out of my comfort zone received much more control.</p>

<p><em>&ldquo;Wait, is this idea making you uncomfortable?&rdquo;</em> Putting a hand on my chest, noticing the heart beating much faster. <em>&ldquo;It does! Oh, I will have so much fun making you do this!&rdquo;</em></p>

<p>As I had a few minutes, before circling back to a flower shop, the first voice started to try haggle his way out (<em>&ldquo;You know, I&rsquo;m not feeling so well right now, maybe next time?&rdquo;</em>) or bribing the heart into a heart attack, but all of it was met with a bored reaction <em>&ldquo;take the last deep breath if you want, but you&rsquo;re doing this.&rdquo;</em></p>

<p>A deep breath, and I start looking at flowers.</p>

<p>The girl: <em>&ldquo;Hello, have you chosen something?&rdquo;</em></p>

<p>Me: <em>&ldquo;Hello. I don&rsquo;t know. What you would suggest to gift to a cute girl?&rdquo;.</em></p>

<p>Girl: <em>&ldquo;Uh, these are nice, and these, also this one.&rdquo;</em></p>

<p>Me: <em>&ldquo;This one looks nice, colorful. I will take it.&rdquo;</em></p>

<p>Girl: <em>&ldquo;Should I wrap them?&rdquo;</em></p>

<p>Me: <em>&ldquo;Sure. I will pay with a card.&rdquo;</em></p>

<p>I think this is the part where <em>The Universe</em> came in with a bucket of popcorns and went <em>&ldquo;Oh, let&rsquo;s extend this awkward period where he is running all the terrible scenarios of how it could end.&rdquo;</em></p>

<p>Card payment problems..</p>

<p>Girl: <em>&ldquo;Can you pay in cash? We had some problems with card payments recently.&rdquo;</em></p>

<p>Me: <em>&ldquo;Sure. How much was it? Here you go.&rdquo;</em></p>

<p>Me standing like an idiot, waiting for her to finish with cash register and the second voice standing with a grin.</p>

<p>Translation is a bit rough from this point, but it&rsquo;s as close as I could get.</p>

<p>Me: <em>&ldquo;And let me gift these flowers to you.&rdquo;</em> (✓ gift someone flowers).</p>

<p>Girl: <em>&ldquo;What?! Why?!.&rdquo;</em></p>

<p>Me: <em>&ldquo;Cause you&rsquo;re cute and my mind thought &ndash; Let&rsquo;s gift some flowers to this cute girl.&rdquo;</em> (combo ✓ tell random girl she&rsquo;s cute).</p>

<p>I end up in goofy situations (don&rsquo;t ask for examples, because I will provide them), but I was starting to think of a much more comfortable things I could be doing right now, like running barefoot through broken glass.</p>

<p>Girl (while smiling, laughing and probably feeling much more uncomfortably than me): <em>&ldquo;**Random combination of: Really? Why? No. What? and a bunch of other words** Is this a prank or something like it?&rdquo;</em> [Oh come on! Stop extending this, just let me run to hide into some dark corner. Note: order hiding lessons from a cockroach].</p>

<p>Me: <em>&ldquo;No, a gift, for real.&rdquo;</em></p>

<p>At this point I think the voices in my head were starting a movie night as a new one went (in English accent) <em>&ldquo;Come on, we already have a combo, let&rsquo;s check off something else, ask her for her name!&rdquo;</em></p>

<p>Deep breath, a shift in position to make sure I&rsquo;m still standing.</p>

<p>Me: <em>&ldquo;What is your name?&rdquo;</em> (triple combo ✓ ask for a name first).</p>

<p>Girl: <em>&ldquo;**:insert name here:**&rdquo;</em></p>

<p>Me: <em>&ldquo;Pleased, Andrius.&rdquo;</em></p>

<p>Could have tried to continue the combo and do something else for the first time, but as you should be careful with a cornered animal (he has nothing to lose so his reaction is unpredictable), it felt like a good time to allow the opening.</p>

<p>Made my smile bigger (<a href="http://blog.bufferapp.com/the-science-of-smiling-a-guide-to-humans-most-powerful-gesture">research</a> says: you smile not because you&rsquo;re happy, but you are happy because you smile. So, I try to walk around with a smile. I might look like an idiot, but I think it works), said <em>&ldquo;Have a nice weekend&rdquo;</em> and backed off.</p>

<p>Checked my heartbeat (reflection stage) which was more or less back at normal.. At this point my imagination (another daemon roaming in my head) tells <em>&ldquo;I don&rsquo;t think your heart was beating during that challenge&rdquo;</em> and a flash of red lights blinking, alarm sounds blaring, blood cells running in panic and a heart shouting <em>&ldquo;How is it going!?! I&rsquo;m ready to give him a heart attack right away!&rdquo;</em> (OK, this video made me chuckle).</p>

<p>A pat on the head from a second voice followed by some wise words <em>&ldquo;Good boy. See, that wasn&rsquo;t so bad. After all, what is the worst that could happen?&rdquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to: Deploy Symfony Application to AWS ElasticBeanstalk]]></title>
    <link href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk"/>
    <updated>2014-09-19T09:03:02+03:00</updated>
    <id>http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk</id>
    <content type="html"><![CDATA[<p>I while ago I started working on an application so I could learn Symfony and solve a problem I had. After it reached a minimal state where it could be deployed to &ldquo;production&rdquo; environment I chose to push it to AWS ElasticBeanstalk as I&rsquo;m quite comfortable with using it. Unfortunately (or maybe fortunately as the best way to learn something is still through practice), I bumped into a few problems while deploying. The article is split into sections explaining what and why a piece of code is added. You might not need all of them or you might need some adjustments. For this article I will use the default Symfony application and full code can be found at <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">github</a>.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,top" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>

<p>You can jump to any of the sections:</p>

<ul>
<li><a href="#update-20141003">Update on 2014-10-03</a></li>
<li><a href="#update-20141108">Update on 2014-11-08</a></li>
<li><a href="#update-20141207">Update on 2014-12-07</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#add-awsdevtools">Add AWSDevTools to Repository</a></li>
<li><a href="#create-key-pair">Create a Key Pair (optional)</a></li>
<li><a href="#create-eb-config">Create ElasticBeanstalk environment configuration/description</a></li>
<li><a href="#add-environment-variables">Add environment variables</a></li>
<li><a href="#add-vendors-dir">Add vendors Directory to Repository</a></li>
<li><a href="#add-environment-config">Add environment configuration and Update Composer</a></li>
<li><a href="#install-mongo-extension">Install mongo extension</a></li>
<li><a href="#run-composer-install">Run Composer Install</a></li>
<li><a href="#update-cache-files">Update Cache Files</a></li>
<li><a href="#add-apache-config">Add Apache Configuration (optional)</a></li>
<li><a href="#remove-dev-entry">Remove dev Entry Point (optional)</a></li>
<li><a href="#add-cron">Add Cron (optional)</a></li>
<li><a href="#add-new-relic-config">Add New Relic Configuration (optional)</a></li>
<li><a href="#install-nodejs">Install nodejs With Front-End Tools (2014-10-03)</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>


<h2>Update on 2014-10-03 <a name="update-20141003"></a></h2>

<p>Thanks to the <a href="http://ifdattic.com/how-to-deploy-symfony-application-to-aws-elasticbeanstalk/#comment-1604895694">tip from Philipp Rieber</a> the code can be simplified by removing the environment in console applications. If your environment has <code>SYMFONY_ENV</code> and <code>SYMFONY_DEBUG</code> set, they will be automatically retrieved by console script. This will allow to remove <code>--env</code> and <code>--no-debug</code> from console commands. This will also allow you to leave scripts in <code>composer.json</code> as the correct environment will be chosen.</p>

<h2>Update on 2014-11-08 <a name="update-20141108"></a></h2>

<p>Thanks to the tip from Nicolae Darie the <code>update-cache.sh</code> script was improved to replace all occurrences of <code>ondeck</code> in <a href="#update-cache-files">cache files</a>.</p>

<h2>Update on 2014-12-07 <a name="update-20141207"></a></h2>

<p>Thanks to the tip from Sergio Marchesini the <a href="#update-cache-files">Update Cache Files</a> section is not needed anymore if you&rsquo;re using at least Symfony 2.6.1.</p>

<h2>Prerequisites <a name="prerequisites"></a></h2>

<p>The article assumes you already have the <a href="http://aws.amazon.com">AWS account</a>, <a href="http://aws.amazon.com/cli">AWS CLI</a> configured and a project in <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code">git repository</a> ready to be deployed. The application will be deployed to <code>us-east-1</code> region, so make changes accordingly if you want to deploy to a different region.</p>

<p>For deployment we will use the <code>t2.micro</code> instance type, which is a new free tier eligible instance type. This updated instance type can only be launched in VPC so you might need to create it for your account, it can be done using a <a href="https://console.aws.amazon.com/vpc/home">wizard</a>.</p>

<p>If you will be creating a single instance ElasticBeanstalk application you only need <em>&ldquo;VPC with a Single Public Subnet.&rdquo;</em> If you want to create a load balanced application you will need <em>&ldquo;VPC with Public and Private Subnets.&rdquo;</em> Just note what VPC with public and private subnets requires a NAT instance which will add additional charges. You can learn more about creating VPC at <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS Docs</a>.</p>

<p>You will also need to create the IAM role to be used for ElasticBeanstalk deployments.</p>

<p>Some of the steps can be done using the web GUI or different applications, but for the most part I will be using the terminal on OS X.</p>

<p>Check <strong><a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/tree/master/.ebextensions/misc">.ebextensions/misc/aws-cli-commands-used.md</a></strong> from demo application for more information (commands used).</p>

<h2>Add AWSDevTools to Repository <a name="add-awsdevtools"></a></h2>

<p>To be able to push your repository to the ElasticBeanstalk the repository has to be extended with <a href="http://aws.amazon.com/code/6752709412171743">AWSDevTools</a>. Download, extract and go to correct directory depending on your OS (for Linux and Mac it will be <code>AWSDevTools/Linux</code>). You need to run the <code>AWSDevTools-RepositorySetup.sh</code> from the directory which contains your repository.</p>

<p>If everything was done correctly you should get a few new commands under <code>git aws.</code> namespace. Now run the <code>git aws.config</code> command to initialize configuration required for pushing repository to ElasticBeanstalk (comments after <code>#</code>, don&rsquo;t enter them).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AWS Region <span class="o">[</span>default to us-east-1<span class="o">]</span>: <span class="c"># enter your region</span>
</span><span class='line'>AWS Elastic Beanstalk Application: demo-app <span class="c"># enter your application name</span>
</span><span class='line'>AWS Elastic Beanstalk Environment: demo-prod-env <span class="c"># enter your environment name</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command should output some explanations about how to set the AWS credentials. As I work with multiple AWS accounts I personally set the credentials in the project. The command created a <code>.elasticbeanstalk</code> directory which you should avoid adding to source control (especially if it contains credentials). The directory should have <code>config</code> and <code>aws_credential_file</code> files with contents (including a manual change for credentials):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1"># below is contents of .elasticbeanstalk/config</span>
</span><span class='line'>
</span><span class='line'><span class="k">[global]</span>
</span><span class='line'><span class="na">ApplicationName</span><span class="o">=</span><span class="s">demo-app</span>
</span><span class='line'><span class="na">DevToolsEndpoint</span><span class="o">=</span><span class="s">git.elasticbeanstalk.us-east-1.amazonaws.com</span>
</span><span class='line'><span class="na">EnvironmentName</span><span class="o">=</span><span class="s">demo-prod-env</span>
</span><span class='line'><span class="na">Region</span><span class="o">=</span><span class="s">us-east-1</span>
</span><span class='line'><span class="na">AwsCredentialFile</span><span class="o">=</span><span class="s">.elasticbeanstalk/aws_credential_file</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># below is contents of .elasticbeanstalk/aws_credential_file</span>
</span><span class='line'>
</span><span class='line'><span class="na">AWSAccessKeyId</span><span class="o">=</span><span class="s">your-access-key</span>
</span><span class='line'><span class="na">AWSSecretKey</span><span class="o">=</span><span class="s">your-secret-key</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Bonus tip:</strong> One of <a href="http://youtu.be/tTJrbsu_Wzc">best IAM practices</a> is to allow users only what they need. I use the separate group and user for pushing repository to ElasticBeanstalk. Bellow is the policy you can attach to your group/user to allow only what is needed for deploying an application (modify for your own needs):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;elasticbeanstalk:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;ec2:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;elasticloadbalancing:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;autoscaling:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;cloudwatch:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;s3:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;sns:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;cloudformation:*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;rds:*&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Key Pair (optional) <a name="create-key-pair"></a></h2>

<p>If you want to connect to your instances (e.g., to debug) you will need a key pair. You should avoid making any changes to your instances as it won&rsquo;t persist and can bring your instance to unknown state.</p>

<p>You can create a key pair by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws ec2 create-key-pair --key-name demoapp_prodkey &gt; demoapp_prodkey.pem
</span></code></pre></td></tr></table></div></figure>


<p>After the command completes open the file, delete everything that is not inside <code>KeyMaterial</code> value and replace <code>\n</code> with newlines.</p>

<p>Before you start using the key pair you need to change the permissions which can be done with command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod 400 demoapp_prodkey.pem
</span></code></pre></td></tr></table></div></figure>


<p>To connect to your instance you will need to know the IP address of it. So for example if it was <code>54.88.29.72</code> you could SSH to it with the following command (to connect to Amazon Linux instances the user is <code>ec2-user</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i demoapp_prodkey.pem ec2-user@54.88.29.72
</span></code></pre></td></tr></table></div></figure>


<h2>Create ElasticBeanstalk environment configuration/description <a name="create-eb-config"></a></h2>

<p>To always get the ElasticBeanstalk environment in the same state all the required information should be saved inside configuration files.</p>

<p>Create a file <code>.ebextensions/env/prod-single.json</code> with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;EnvironmentType&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;SingleInstance&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;EC2KeyName&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;demoapp_prodkey&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;IamInstanceProfile&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;aws-elasticbeanstalk-ec2-role&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;InstanceType&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;t2.micro&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;VPCId&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;Subnets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:ec2:vpc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;ELBSubnets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:container:php:phpini&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;memory_limit&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;800M&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:container:php:phpini&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;document_root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;/web&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:hostmanager&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;LogPublicationControl&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration will create a single instance environment. For all available options and their explanations check the <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">docs</a>. If you would like to create a load balanced environment you will need to make some changes to the configuration file (you can find it all at <code>.ebextensions/env/prod-load.json</code>). In short, you should remove <code>EnvironmentType</code> option (or change to <code>LoadBalanced</code>) and add the options provided below (just know what you will need a VPC with private and public subnets if you want to use new instance types):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:asg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;MinSize&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:asg&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;MaxSize&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;4&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:autoscaling:launchconfiguration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SecurityGroups&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will also need to fill values (will depend on application type, read <strong><a href="#prerequisites">Prerequisites</a></strong> and <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo-vpc-basic.html">AWS VPC How To</a>) for <code>VPCId</code>, <code>Subnets</code>, <code>ELBSubnets</code>, <code>SecurityGroups</code> from your created VPC.</p>

<p>Run the following command to create your <code>demo-app</code> ElasticBeanstalk application (change the name or provide description if needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk create-application --application-name demo-app --description <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you only need to choose the the solution stack name. All available stacks can be returned with command (we will choose the latest as of this writing 64 bit stack named <code>64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk list-available-solution-stacks
</span></code></pre></td></tr></table></div></figure>


<p>Run the command below to create the ElasticBeanstalk environment (configure the arguments if needed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk create-environment <span class="se">\</span>
</span><span class='line'>    --application-name demo-app <span class="se">\</span>
</span><span class='line'>    --environment-name demo-prod-env <span class="se">\</span>
</span><span class='line'>    --description <span class="s2">&quot;&quot;</span> <span class="se">\</span>
</span><span class='line'>    --option-settings file://.ebextensions/env/prod-single.json <span class="se">\</span>
</span><span class='line'>    --solution-stack-name <span class="s2">&quot;64bit Amazon Linux 2014.03 v1.0.4 running PHP 5.5&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After a while if everything was fine the new environment for application should be up and ready.</p>

<h2>Add environment variables <a name="add-environment-variables"></a></h2>

<p>Keeping credentials and other information (API keys, passwords, connection data, etc.) in source control is a bad idea and not really scalable. Your environment should contain all the information needed to make the application on it work. You can configure your environment variables using <code>aws:elasticbeanstalk:application:environment</code> namespace. Create the <code>.ebextensions/env/prod-variables.json</code> file and put the following into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY_ENV&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY_DEBUG&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__SECRET&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__SERVER&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__DATABASE&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__PASSWORD&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__MONGODB__USERNAME&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should fill the <code>Value</code> key with your values (just avoid committing the values to repository). The <code>SYMFONY_ENV</code> is the variable for describing the type of environment and will be used later. As the deployment should happen automatically and you won&rsquo;t be able to enter your parameters manually they should be set automatically using the environment variables. This can be done using variables which start with <code>SYMFONY__</code> as they are automatically converted (the <code>__</code> becomes a <code>.</code>). As an example the <code>SYMFONY__ENV__MONGODB__SERVER</code> will become <code>%env.mongodb.server%</code>. The <code>parameters.yml.dist</code> has to be updated for this to work, make sure it contains the following changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">secret</span><span class="p-Indicator">:</span>           <span class="s">&quot;%env.secret%&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_server</span><span class="p-Indicator">:</span>   <span class="s">&quot;%env.mongodb.server%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_database</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.database%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_password</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.password%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">mongodb_username</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.mongodb.username%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the following command to update your environment with variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aws elasticbeanstalk update-environment <span class="se">\</span>
</span><span class='line'>    --environment-name demo-prod-env <span class="se">\</span>
</span><span class='line'>    --option-settings file://.ebextensions/env/prod-variables.json
</span></code></pre></td></tr></table></div></figure>


<h2>Add vendors Directory to Repository <a name="add-vendors-dir"></a></h2>

<p>The <code>10_composer_install.sh</code> hook on application deployment automatically runs <code>composer install</code> if it finds the <code>composer.json</code> file in the root directory. As I would like to run composer myself (and it might fail depending on your application) it can be disabled by moving <code>composer.json</code> file outside of main directory or by adding vendor directory to repository. This can be done by creating a <code>.gitkeep</code> file inside <code>vendor</code> directory and modifying <code>.gitignore</code> to contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/vendor/*
</span><span class='line'>!vendor/.gitkeep
</span></code></pre></td></tr></table></div></figure>


<p>This change will add a <code>vendor</code> directory to your repository, but everything inside it will be ignored (as it has to be installed automatically and not committed to repository).</p>

<h2>Add environment configuration and Update Composer <a name="add-environment-config"></a></h2>

<p>The ElasticBeanstalk environment can be configured by using <code>.config</code> files inside <code>.ebextensions</code> directory. You can read more about how to <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">customize EC2 intances in docs</a>. In short it reads the <code>.config</code> files from <code>.ebextensions</code> directory and runs them in alphabetical order. After the deployment <code>.ebextensions</code> directory is removed.</p>

<p>The composer by default used in environments has an old version, it&rsquo;s a good idea to have it updated. All of this can be done by creating <code>03-main.config</code> file and adding the following contents to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-composer-update</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;export</span><span class="nv"> </span><span class="s">COMPOSER_HOME=/root</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">composer.phar</span><span class="nv"> </span><span class="s">self-update</span><span class="nv"> </span><span class="s">-n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The config file starts with <code>03-</code> so we could have some breathing room if other configuration files have to be run before it. The commands are also run alphabetically so it&rsquo;s a good idea to start with a hundred based number as it will give you enough space for 99 commands before you will need to modify the order of them.</p>

<p>Now you could push your application to the environment (it still won&rsquo;t work as additional steps are required) by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git aws.push
</span></code></pre></td></tr></table></div></figure>


<h2>Install mongo extension <a name="install-mongo-extension"></a></h2>

<p>Our project uses the MongoDB and the required PHP mongo extension is not available by default on created environment. This can be easily taken care of by adding a command to install it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-install-mongo-ext</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;yes</span><span class="nv"> </span><span class="s">&#39;&#39;</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">pecl</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">mongo&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">ignoreErrors</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ignoreErrors</code> is required as it would be thrown if the extension is already installed. This way if extension is already installed, it just skips this step. If for some reason the extension failed to install, your deployment would still fail on composer install step as it won&rsquo;t have the required extension.</p>

<h2>Run Composer Install <a name="run-composer-install"></a></h2>

<p>The next step would be to run the composer install. This can be done by adding <code>container_command</code> which runs after the application and web server have been set up, but before the application version is deployed. Add the following to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-run-composer</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;composer.phar</span><span class="nv"> </span><span class="s">install</span><span class="nv"> </span><span class="s">--no-dev</span><span class="nv"> </span><span class="s">--optimize-autoloader</span><span class="nv"> </span><span class="s">--prefer-dist</span><span class="nv"> </span><span class="s">--no-interaction&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will run composer install without <code>require-dev</code> packages (in production we don&rsquo;t need them), optimize the autoloader (performance improvements), preferring distribution packages (performance improvement) and without any interaction (as the deployment is being done automatically).</p>

<h2>Update Cache Files <a name="update-cache-files"></a></h2>

<p><strong>Important:</strong> If you&rsquo;re using at least <a href="http://symfony.com/blog/symfony-2-6-1-released">Symfony 2.6.1</a> this is not needed anymore as cache files are now relative.</p>

<p>Because all commands are being run while in <em>&ldquo;staging&rdquo;</em> area the locations are incorrect after deployment (<code>/var/app/ondeck</code> should be changed to <code>/var/app/current</code>). This can be fixed by running a <code>sed</code> command on cache files. Add the following to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">600-update-cache</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/update-cache.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the file <code>.ebextensions/bin/update-cache.sh</code> with contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>grep -l -R <span class="s2">&quot;ondeck&quot;</span> /var/app/ondeck/app/cache/<span class="nv">$SYMFONY_ENV</span>/*<span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span>sed -i -e <span class="s2">&quot;s/\/var\/app\/ondeck/\/var\/app\/current/g&quot;</span> <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script will replace all <code>/var/app/ondeck</code> occurrences with <code>/var/app/current</code> in cache files.</p>

<p>If you pushed your application to an environment at this moment you should have a completely functioning application. Read the following sections to improve your deployment.</p>

<h2>Add Apache Configuration (optional) <a name="add-apache-config"></a></h2>

<p>The PHP values can be changed using Apache configuration. The Apache configuration can also be updated to improve the security of your application (e.g., disallow entering hidden directories or files). Add an Apache configuration file to <code>.ebextensions/apache/zapplication.conf</code> with following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">php_value</span> short_open_tag <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="c"># &quot;-Indexes&quot; will have Apache block users from browsing folders without a</span>
</span><span class='line'><span class="c"># default document Usually you should leave this activated, because you</span>
</span><span class='line'><span class="c"># shouldn&#39;t allow everybody to surf through every folder on your server (which</span>
</span><span class='line'><span class="c"># includes rather private places like CMS system folders).</span>
</span><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">mod_autoindex.c</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Options</span> -Indexes
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to &quot;hidden&quot; directories or files whose names begin with a</span>
</span><span class='line'><span class="c"># period. This includes directories used by version control systems such as</span>
</span><span class='line'><span class="c"># Subversion or Git.</span>
</span><span class='line'><span class="nt">&lt;IfModule</span> <span class="s">mod_rewrite.c</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">RewriteCond</span> %{SCRIPT_FILENAME} -d [OR]
</span><span class='line'>  <span class="nb">RewriteCond</span> %{SCRIPT_FILENAME} -f
</span><span class='line'>  <span class="nb">RewriteRule</span> <span class="s2">&quot;(^|/)\.&quot;</span> - [F]
</span><span class='line'><span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to backup and source files. These files may be left by some</span>
</span><span class='line'><span class="c"># text/html editors and pose a great security danger, when anyone can access</span>
</span><span class='line'><span class="c"># them.</span>
</span><span class='line'><span class="nt">&lt;FilesMatch</span> <span class="s">&quot;(\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|pem)|~)$&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nb">Satisfy</span> <span class="k">All</span>
</span><span class='line'><span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Block access to files &amp; directories starting with a dot</span>
</span><span class='line'><span class="nt">&lt;FilesMatch</span> <span class="s">&quot;^\.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class='line'><span class="nt">&lt;DirectoryMatch</span> <span class="s">&quot;^\.|\/\.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">Order</span> allow,deny
</span><span class='line'>  <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/DirectoryMatch&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will change PHP <code>short_open_tag</code> value to <code>off</code> and make other changes to make your application more secure. The configuration file starts with letter <code>z</code> as we want to load this configuration at the end.</p>

<p>Add the container command to your <code>03-main.config</code> file to copy this configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">200-copy-apache-config</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;cp</span><span class="nv"> </span><span class="s">.ebextensions/apache/zapplication.conf</span><span class="nv"> </span><span class="s">/etc/httpd/conf.d/zapplication.conf&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Remove dev Entry Point (optional) <a name="remove-dev-entry"></a></h2>

<p>As we are deploying to production, it doesn&rsquo;t make a lot of sense to keep development environment entry point (especially if you remove IP or similar checks). This entry point can be removed on deployment by adding following container command to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">700-remove-dev-app</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;rm</span><span class="nv"> </span><span class="s">web/app_dev.php&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Add Cron (optional) <a name="add-cron"></a></h2>

<p>Your application might need to use the cron to run some tasks on schedule. Create a new file <code>.ebextensions/cron/main</code> and put your commands in it (just make sure this file ends with an empty line).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*/5 * * * * . /opt/elasticbeanstalk/support/envvars <span class="o">&amp;&amp;</span> php /var/app/current/app/console acme:hello
</span></code></pre></td></tr></table></div></figure>


<p>This command will run every five minutes. Crontab runs in a minimal environment so we start with <code>. /opt/elasticbeanstalk/support/envvars</code> to make sure it has all the environment variables. After that we run the Symfony console command from our application using the environment which is set as the environment variable. Add as many commands as you need in this file.</p>

<p>Make changes to <code>03-main.config</code> to update crontab tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">800-run-cron</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;crontab</span><span class="nv"> </span><span class="s">.ebextensions/cron/main&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you decide you don&rsquo;t need to run cron tasks anymore, <strong>don&rsquo;t</strong> just delete the container command. Make sure you make this change incrementally, by first removing all the contents from <code>.ebextensions/cron/main</code> file (leave it empty or change the existing <code>800-run-cron</code> command to <code>crontab -r</code>) and deploying it to your ElasticBeanstalk environment. Only after it&rsquo;s done should you remove the container command and a file. If you just removed the container command, your existing instances will keep the commands in <code>crontab</code> from previous deployment.</p>

<h2>Add New Relic Configuration (optional) <a name="add-new-relic-config"></a></h2>

<p>In case you would like to add <a href="http://newrelic.com">New Relic</a> monitoring for your application, all the required configuration can be added to your deployment. Create a new file <code>02-newrelic.config</code> which will contain the following configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic-php5</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic-sysmond</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'>    <span class="l-Scalar-Plain">rpm</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">newrelic</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm</span>
</span><span class='line'><span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-install-newrelic</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;newrelic-install</span><span class="nv"> </span><span class="s">install&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">300-update-newrelic-ini</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;source</span><span class="nv"> </span><span class="s">.ebextensions/bin/update-newrelic-ini.sh&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">400-configure-newrelic-sysmond</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;nrsysmond-config</span><span class="nv"> </span><span class="s">--set</span><span class="nv"> </span><span class="s">license_key=$NEW_RELIC_LICENSE_KEY&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">430-start-sysmond</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;/etc/init.d/newrelic-sysmond</span><span class="nv"> </span><span class="s">start&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will install New Relic agent and system monitoring daemon and update configuration used by them.</p>

<p>To update the configuration used by the agent create a <code>.ebextensions/bin/update-newrelic-ini.sh</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sed -i -e <span class="s1">&#39;s/newrelic.license.*/newrelic.license = &#39;</span><span class="s2">&quot;$NEW_RELIC_LICENSE_KEY&quot;</span><span class="s1">&#39;/&#39;</span> /etc/php-5.5.d/newrelic.ini
</span><span class='line'>sed -i -e <span class="s1">&#39;s/newrelic.appname.*/newrelic.appname = &quot;&#39;</span><span class="s2">&quot;$SYMFONY__ENV__NEW_RELIC__APPLICATION_NAME&quot;</span><span class="s1">&#39;&quot;/&#39;</span> /etc/php-5.5.d/newrelic.ini
</span></code></pre></td></tr></table></div></figure>


<p>The script will set the license and application name using values from environment variables. Add the new environment variables to <code>.ebextensions/env/prod-variables.json</code> file and update your environment using AWS CLI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__NEW_RELIC__API__KEY&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;SYMFONY__ENV__NEW_RELIC__APPLICATION_NAME&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;aws:elasticbeanstalk:application:environment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;OptionName&quot;</span><span class="p">:</span> <span class="s2">&quot;NEW_RELIC_LICENSE_KEY&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install <a href="https://github.com/ekino/EkinoNewRelicBundle">EkinoNewRelicBundle</a> in your Symfony application by running the following on your development environment (don&rsquo;t forget to enable the bundle in your <code>app/AppKernel.php</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composer require ekino/newrelic-bundle <span class="s2">&quot;1.2.*@dev&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the following to your configuration files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># in app/config/config.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">ekino_new_relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>    <span class="l-Scalar-Plain">application_name</span><span class="p-Indicator">:</span> <span class="s">&quot;%new_relic_application_name%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span> <span class="s">&quot;%new_relic_api_key%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in app/config/config_prod.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">ekino_new_relic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update your <code>app/config/parameters.yml.dist</code> with new parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">new_relic_application_name</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.new_relic.application_name%&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">new_relic_api_key</span><span class="p-Indicator">:</span> <span class="s">&quot;%env.new_relic.api.key%&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To notify about deployment add a new container command to <code>03-main.config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">container_commands</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">900-notify-deployment</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="s">&quot;php</span><span class="nv"> </span><span class="s">app/console</span><span class="nv"> </span><span class="s">newrelic:notify-deployment</span><span class="nv"> </span><span class="s">--user=eb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Push the application to your environment and if everything was done correctly you should start seeing some stats in your New Relic account.</p>

<h2>Install nodejs With Front-End Tools (2014-10-03 <a name="install-nodejs"></a></h2>

<p>If you watched a <a href="https://www.youtube.com/watch?v=R7iN5SFglMo">Ryan Weaver &ndash; Cool like Frontend Developer</a> or a similar talk you might want to add some front end goodness to your project. For this you will need to install nodejs, Grunt, Bower. Below are the steps on how to do it.</p>

<p>Create <code>.ebextensions/bin/install-nodejs.sh</code> with the contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">hash_file</span><span class="o">=</span><span class="s2">&quot;/tmp/nodejshash&quot;</span>
</span><span class='line'>
</span><span class='line'>check_if_npm_packages_has_to_be_installed <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -f <span class="nv">$hash_file</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>check_if_same_hash
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        return </span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>check_if_same_hash <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">hash_new</span><span class="o">=</span><span class="s2">&quot;$(md5sum .ebextensions/bin/install-nodejs.sh 2&gt; /dev/null | cut -d &#39; &#39; -f 1)&quot;</span>
</span><span class='line'>    <span class="nv">hash_current</span><span class="o">=</span><span class="s2">&quot;$(cat &quot;</span><span class="nv">$hash_file</span><span class="s2">&quot; 2&gt; /dev/null | cut -d &#39; &#39; -f 1)&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$hash_new</span> <span class="o">==</span> <span class="nv">$hash_current</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        return </span>1
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        return </span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_node <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if </span><span class="nb">hash </span>nodejs 2&gt; /dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s1">&#39;nodejs install, add more processing if needed&#39;</span> &gt; /dev/null
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span>curl -sL https://rpm.nodesource.com/setup | bash -
</span><span class='line'>        yum install -y nodejs-0.10.32
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_npm_packages <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    npm install -g bower
</span><span class='line'>    npm install -g grunt-cli
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>update_current_hash <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$hash_new</span> &gt; <span class="nv">$hash_file</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>install_node
</span><span class='line'>
</span><span class='line'><span class="k">if </span>check_if_npm_packages_has_to_be_installed; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>install_npm_packages
</span><span class='line'>    update_current_hash
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script will install nodejs if it&rsquo;s not installed. Then it will check if npm packages have to be installed (new added or this is the first run) and install them if needed. Bower and Grunt-cli will be installed globally.</p>

<p>Add a container command to <code>03-main.config</code> to run this install script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">container_commands:</span>
</span><span class='line'>    <span class="mi">100</span><span class="err">-install-nodejs:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;source .ebextensions/bin/install-nodejs.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To install local npm packages, bower packages and run grunt production tasks add the following container commands (see <a href="https://github.com/ifdattic/symfony-app-deploy-to-aws-eb-article-code/commit/1a651a94c134a80eb9895b4eb5aee99d37ad5823">repository</a> for file contents):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">container_commands:</span>
</span><span class='line'>    <span class="mi">400</span><span class="err">-install-npm-packages:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;npm install&quot;</span>
</span><span class='line'>    <span class="mi">425</span><span class="err">-install-bower-packages:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;bower install --allow-root&quot;</span>
</span><span class='line'>    <span class="mi">450</span><span class="err">-run-grunt:</span>
</span><span class='line'>        <span class="err">command:</span> <span class="s2">&quot;grunt production&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion <a name="conclusion"></a></h2>

<p>This article might not had all the steps required for deploying your Symfony application to ElasticBeanstalk, but it should point you on the right way to deploying your application. If something was not informative enough or confusing, please let me know and I will try to clarify it. If you have any questions or ideas, leave them in the comments to start the knowledge sharing.</p>

<blockquote><p>I&rsquo;m doing research on this topic and would appreciate if you would like to fill some questions at <a href="http://goo.gl/forms/cmEu5sio7G" data-ga-event="eb,click,bottom" target="_blank">Google Forms</a>. It&rsquo;s fine if you don&rsquo;t want to answer any of them or only answer one, every bit helps. Thank you for your time and enjoy the article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What learning to swim reminded me about life]]></title>
    <link href="http://ifdattic.com/what-learning-to-swim-reminded-me-about-life"/>
    <updated>2014-08-26T14:21:47+03:00</updated>
    <id>http://ifdattic.com/what-learning-to-swim-reminded-me-about-life</id>
    <content type="html"><![CDATA[<p>Recently I decided it would be a good idea to learn how to swim (as I like water and have a few activities planned which might lead to drowning). While doing that, it reminded me of a couple of things which might be used in life.</p>

<h2>Relax</h2>

<p>Panicking in water will lead you to drowning. Which isn&rsquo;t fun at all (I&rsquo;m a bit of an expert in drowning). In life, doing/executing decisions while panicking/stressed could lead to bad results. Try to put decisions until you have cleared your head, or if it&rsquo;s not possible, take a few deep breaths before proceeding.</p>

<h2>Focus</h2>

<p>A beach or pool might be not the easiest location to focus (damn you eyes and beautiful girls/boys), but losing focus will lead to mediocre results. Keep your focus straight to get the best results you can get. And after it&rsquo;s done, reward yourself with a little break.</p>

<h2>Self correct and improve yourself</h2>

<p>All my life I always tried to improve myself, sometimes with better results, sometimes with not so good results. It&rsquo;s a skill you have to grow. If you want to reach the end of the pool you have to improve your form. If you focus and reflect, it&rsquo;s easy to spot when you&rsquo;re not working enough with your legs, when you did something too soon, when you did something you wasn&rsquo;t supposed to do. Try to find something where you can improve, track your progress, improve the parts which doesn&rsquo;t feel right, remove steps if you can get away with it.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Pareto_principle">Pareto principle</a> (80-20 rule) states that, for many events, roughly 80% of the effects come from 20% of the causes. Try to find that 20% and work on improving it as it will get you the most results.</p>

<h2>Experiment</h2>

<p><em>&ldquo;What is the smallest amount of movement, I have to do not to drown?&rdquo;</em> or <em>&ldquo;How long can I float like a corpse before I run out of air?&rdquo;</em>. It&rsquo;s hard to experiment when you&rsquo;re afraid of breaking things or doing something wrong. As soon as you get more confidence, start experimenting. Start asking yourself questions like <em>&ldquo;What if &hellip;?&rdquo;</em>, <em>&ldquo;How about &hellip;?&rdquo;</em>, <em>&ldquo;Why &hellip;?&rdquo;</em> and just do it. Best way to learn is from practice (a bit of theory never hurts). What is the worst that can happen? Well a lot! Just most of the time the worst outcome isn&rsquo;t as bad as you think and even a bad outcome most of the time has many pros (which can outweigh the cons).</p>

<h2>Slow progress is better than no progress</h2>

<p>It would be wonderful if after your finger touched the water you will start swimming like a shark (bitting legs is optional). Without hard work you&rsquo;re rarely good at something right away. As long as you keep working, sooner or later you gonna reach your goal. Even two steps forward, one step backwards is a progress.</p>

<h2>When you stop chasing success it comes to you</h2>

<p>Was reminded of this when for the first time reached the other side of the pool (~22 meters). It happened when I stopped trying to reach the other side and decided <em>&ldquo;just do what you&rsquo;re supposed to do, who cares if you reach the other side or the middle of the pool&rdquo;.</em> I think it must have something to do with your mind stepping away from putting sticks in the wheels and your body + subconscious just doing what they know they have to do.</p>

<h2>You can&rsquo;t avoid bad days, survive them</h2>

<p>Even if you have a very positive attitude to life and everything is great, still sooner or later a bad day will come. Just one of those days were no matter how hard you try the results are never what they should be. Bad days come and go, just try to get as much from it as you can.</p>

<h2>Conclusion</h2>

<p>Most of the points are basic and yet, it&rsquo;s hardest to see that what is simple and in front of your face. Sometimes you just need a slap in the face for you mind to go <em>&ldquo;Oh right, forgot about that one.&rdquo;</em></p>

<p>How about you? Have something recently reminded you that you forgot about life?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready to travel? Use the following tips]]></title>
    <link href="http://ifdattic.com/ready-to-travel-use-the-following-tips"/>
    <updated>2014-08-06T10:15:37+03:00</updated>
    <id>http://ifdattic.com/ready-to-travel-use-the-following-tips</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not someone who backpacked around the world for years (maybe some day). Actually not that long ago I didn&rsquo;t even like traveling, just listening to someone who returned from somewhere made me tired. But some time in spring of 2014, I just got the itch of needing to travel. As a lazy person who is always looking for ways to optimize and simplify his life, I decided to share some tips which I wish I knew before I started traveling or just giving them to someone who is about to pop his cherry. Tips are in no particular order.</p>

<p>You can jump to any particular tip:</p>

<ul>
<li><a href="#travel-lightly">Travel lightly</a></li>
<li><a href="#duffel">Get a convertible duffel bag</a></li>
<li><a href="#board-last">Be among the last people in the plane</a></li>
<li><a href="#use-headphones">Use in-ear headphones</a></li>
<li><a href="#prepare-smartphone">Prepare your smart phone</a></li>
<li><a href="#dont-plan-adapt">Don&rsquo;t plan, adapt</a></li>
<li><a href="#use-common-sense">Use common sense</a></li>
<li><a href="#use-zip-trash-bags">Use zip lock and trash bags</a></li>
<li><a href="#eat-nuts">Eat macadamia nuts</a></li>
<li><a href="#check-alarm">Check your alarm five times</a></li>
<li><a href="#optimize-medkit">Optimize your med-kit</a></li>
<li><a href="#lodgings">Learn about your lodgings</a></li>
</ul>


<h2>Travel lightly <a name="travel-lightly"></a></h2>

<p>Lightly is the relative term so it might be a backpack or a suitcase, but if you can just travel with medium backpack (42x32x25 cm). Don&rsquo;t be one of those travelers who drags a bunch of suitcases just for a weekend get away. You have no idea how refreshing it is when you can just move through the airport without waiting in some pointless lines. Or moving through the busy street without disturbing anyone or being disturbed. Most of the time you can get by without a lot of things and if you really need something you can always buy it.</p>

<h2>Get a convertible duffel bag <a name="duffel"></a></h2>

<p>I personally use <a href="http://www.amazon.co.uk/Kiva-Convertible-Duffel-Bag-Ruby/dp/B002AA7LCI">Kiva Convertible Duffel Bag</a>, but you can get something similar. At first I had my doubts about it, in theory it sounded like a great product, but I wasn&rsquo;t sure I will be using it in practice. Now I love it, and will probably be buying a couple more. Even if you travel with one backpack, which doesn&rsquo;t weight much it is probably quite full and just makes you feel rigid. Just fill your duffel bag with stuff from it and your comfort level will improve a lot.</p>

<h2>Be among the last people in the plane <a name="board-last"></a></h2>

<p>Don&rsquo;t be one of those who tries to cut the line to get into the plane. You won&rsquo;t fly out sooner than me, so just relax. Most will say it&rsquo;s just to get a better seat, well I&rsquo;m sorry, but it&rsquo;s a lie. You won&rsquo;t get a better seat by boarding earlier. If it&rsquo;s your first time flying, well OK, you might want to get a window seat, but believe me it&rsquo;s not so interesting either way. Also from my experience I found that being among the last people in, gives you much better choices for where to sit (also the <a href="http://blog.bufferapp.com/6-powerful-psychological-effects-that-explain-how-humans-tick">research</a> shows what it&rsquo;s better to have less choices). The important part is to enter through the front of the plane. After that you can just walk down the aisle and process your choices (e.g., a crying kid too close, teenagers, etc.) and take one which you think will be enjoyable or least bothersome. If you look like someone who might start carrying people under his arms in emergency (never was in a crashing plane so not sure about it) you might get upgraded to the emergency exit seat. Also for someone who &ldquo;has no ass&rdquo; and sitting for long periods of time becomes painful, I want to be on my legs for as long as I can.</p>

<h2>Use in-ear headphones <a name="use-headphones"></a></h2>

<p>First, because you can remove the noise everyone is making and exchange it with some music you like or a good audio book. I don&rsquo;t know about you, but listening for hours of kids crying to me doesn&rsquo;t sound like a good time. Second, I hate flying mostly because it messes with my ears. I noticed that in-ear headphones helps with it. Earbuds isn&rsquo;t bad either, in-ear headphones is just more comfortable for me. Over the ear headphones are useless and cumbersome. Another tip for helping with pressure messing with your ears is to squeeze your nose shut with your fingers and swallow. I was suggested this when I was jumping with a parachute (too late), but I did it on the couple of flights and it helped a lot. Just don&rsquo;t overdo it, use your gut and do it when you feel it&rsquo;s needed.</p>

<h2>Prepare your smart phone <a name="prepare-smartphone"></a></h2>

<p>Best choice would be to get a local sim card with a data plan. Doesn&rsquo;t always work. At least after I tried to put a local sim card in Netherlands it felt like my phone got an STD: it changed language everywhere to Dutch and everything stopped working. Didn&rsquo;t feel like giving it a second try. The most important thing to do is while you&rsquo;re connected to Internet just cache the area you will be visiting in Google Maps. Your GPS will work fine without the Internet and you won&rsquo;t need to fight with a paper map trying to figure out where you are. Just walk in the direction you want and from time to time check you position to correct your direction. Getting lost is just seeing more things than you planned and this way you will always have pointers how to get back to a familiar ground. You can also download a note with an information of where you&rsquo;re staying, a screen shot of a map (helped after trying to put local sim card) or anything else you might need.</p>

<h2>Don&rsquo;t plan, adapt <a name="dont-plan-adapt"></a></h2>

<p>I&rsquo;m not saying you shouldn&rsquo;t plan your trip, but don&rsquo;t overdo it and better be ready to adapt. Like googling <em>&ldquo;how to get from point A to point B&rdquo;</em> or <em>&ldquo;what to do in point C&rdquo;</em> is fine and useful. <em>&ldquo;On 2 pm I will be in point A, in 10 minutes the train will arrive, travel to point B for an hour, &hellip;&rdquo;</em> not so much.</p>

<p>Here&rsquo;s an example from my trip to Amsterdam. The end of the trip was supposed to be simple: travel with a train from Amsterdam to Eindhoven for 1.5 hours, sleep, fly back home. The real trip had much more steps. After buying the train ticket some kind of power failure happened which closed the whole Amsterdam-Eindhoven line. Had to travel to Rotterdam. After about 1.5 hours from all the information I had noticed it won&rsquo;t be taking me to the city center and will be going to the wrong direction. Had to make a call to get out (don&rsquo;t know if it was the correct call or not, just had to adapt to a situation to the best of my knowledge). Got out in suburbs at least 10 kilometers away from train station. As a bonus had to reach the train station in about 30 minutes (as the next train will be in another 30 minutes and the trip is longer). This is the great example why you should travel lightly. With a few more hick ups along the way, finally got in the train which was traveling for 1.5 hours to Eindhoven. From train station to the place I booked for the night was about 8 minutes of walking. After 7 meters of walking it started to drip. Put the jacket on just in case. After 3 meters the storm started with rain pouring like the sky was drowning. Arrived to my host drenched in water. Only after a shower I felt like human again and after working for a bit I felt like I&rsquo;m back in control. So it wasn&rsquo;t surprising when my first thought after I was suggested emergency exit seat my first thought was &ldquo;Great, another detour. At least I will have some legroom until we crash&rdquo;. Unfortunately, had a very nice flight with lots of turbulence and song lyrics <em>&ldquo;I&rsquo;m falling, I&rsquo;m falling fast&rdquo;</em> while landing. However, I wouldn&rsquo;t change this for anything as it showed me how I can react to un-expected situations (What doesn&rsquo;t kill you makes you stronger). Just sometimes you have enough to stop caring about adventure and all you can think of is a destination.</p>

<h2>Use common sense <a name="use-common-sense"></a></h2>

<p>If you walk around with your phone or wallet half falling of your ass pocket, don&rsquo;t be surprised when it will get stolen or lost. You might look like a tourist (especially if you&rsquo;re dragging a bunch of luggage around) making you an easier target, but all the problems might as well happen in the country you live. Just use some common sense and you should minimize your chances of being robbed or something like it happening to you. Keep your valuables in front pockets or somewhere where it is not so easy to reach. Get a padlock for your backpack, it won&rsquo;t do any good, but will make you mind feel safer thinking it will be harder for someone to get into your backpack (placebo effect). Don&rsquo;t flash around all the expensive toys you have. And if someone comes to you and asks if they could use your phone just say &ldquo;No&rdquo; and get ready to fight.</p>

<h2>Use zip lock and trash bags <a name="use-zip-trash-bags"></a></h2>

<p>Put your chargers into one of them, small medkit/toiletries in a different one and have a few spare bags (they take almost no space/weight). Not only it helps with organization, but it might also save your things from getting destroyed, if for example you get in a rain storm.</p>

<h2>Eat macadamia nuts <a name="eat-nuts"></a></h2>

<p>They are not cheap, they take space, they are heavy (all points relative), but they will keep you going until you could put a steak or some other nice meal in your stomach. A couple of them will keep you going for a few hours and won&rsquo;t make you crash like some crappy carbs filled snacks you would put in yourself otherwise.</p>

<h2>Check your alarm five times <a name="check-alarm"></a></h2>

<p>Learn from my mistakes and make sure your alarm is set correctly as you really DON&rsquo;T want to miss your flight.</p>

<p><img src="https://googledrive.com/host/0B3f3EKRXYPx4dUxwcTdSUk0tU0U/content/images/check-your-alarm-five-times.jpg"  alt="Screenshot of failed alarm"></p>

<p>If you learn it the hard way just like I did (I had to learn this lesson sooner or later), please see <a href="#dont-plan-adapt">Don&rsquo;t plan, adapt</a>.</p>

<p>And if you&rsquo;re trying to stay away from bad habits, like smoking or drinking, the urges for them will be much higher at this point. It&rsquo;s the perfect situation to have a smoke or a beer. Just acknowledge the urges and stay strong, they won&rsquo;t help at this point (at least I can&rsquo;t imagine how they might help at this point).</p>

<p>Smile and enjoy an expensive story :)</p>

<h2>Optimize your med-kit <a name="optimize-medkit"></a></h2>

<p>This will be different for everyone. Don&rsquo;t pack half of your backpack with drugs because you might need it if something almost impossible will happen. You probably don&rsquo;t want to leave some medication that is important for you either.</p>

<p>A good test that I will be using from now: if pharmacies are closed and will only open in the morning, could I survive over the night?</p>

<p>A few personal examples. Lets say, I get a terrible head ache and have no painkillers. Even if I had to spend time until morning rolled in the ball, it&rsquo;s still more of an inconvenience than a problem. There are also natural ways to help with it and after a couple hours of sleep it might even pass away. So pain killers would be useful to have, but not very important.</p>

<p>On the other side I have problems with my nose being blocked which, when trying to sleep leads to grasping for every molecule of air you can get in your lungs. There are some long term fixes which can lessen this issue. A short term fix also exists, but I try to avoid it as even the doctors suggest to avoid it. So for the trip to Spain I packed only the long term fix and it would have been enough, unfortunately, I got a cold and situation worsened leaving long term fix useless. Also, there is nothing I could do naturally to improve the situation (have enough problems with sleeping without having to do it while standing). After spending hours trying to fall asleep, decided to stop this torture and rather go for days without sleep, at least this way I won&rsquo;t <a href="#check-alarm">oversleep my flight</a>. Next time I will make damn sure I packed the short term fix as even an hour without it is one hour too much.</p>

<p>Pack everything you wouldn&rsquo;t want to be an hour(s) without. If you have free space, pack that might be helpful to shorten the wait time and for everything else just wait it over.</p>

<h2>Learn about your lodgings <a name="lodgings"></a></h2>

<p>If you know where you will be staying (for example by booking through <a href="https://www.airbnb.com">airbnb</a>) always ask about what is important for you. Don&rsquo;t assume things just from photos or description, always ask before booking.</p>

<p>As a digital nomad I need good (even poor works) internet connection to be able to work and earn money for financing my trips. What I don&rsquo;t want to hear during it is: <em>&ldquo;My internet connection isn&rsquo;t working, it will be fixed on Monday (which is after I check out).&rdquo;</em></p>

<p>Also from now on I ask if any smoking is being done inside (including shared space). As for someone who stopped smoking, I find it nauseating when I have to walk through smoked area (or even worse, it starts getting inside my room).</p>

<p>Even if something important for you is written in big letters, ask, don&rsquo;t assume.</p>

<h2>Conclusion</h2>

<p>This isn&rsquo;t the end of the list as I&rsquo;m sure it will be updated once I get more travel experience. But these are the tips I wish I knew about before having my first trip.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of SQL Performance Explained book]]></title>
    <link href="http://ifdattic.com/review-of-sql-performance-explained-book"/>
    <updated>2014-07-30T09:36:33+03:00</updated>
    <id>http://ifdattic.com/review-of-sql-performance-explained-book</id>
    <content type="html"><![CDATA[<p>This is the review of <strong>SQL Performance Explained</strong> book by <strong><a href="http://use-the-index-luke.com/about">Markus Winand</a></strong>. The book explains everything developers need to know about the SQL performance. And the only thing that developers need to learn is how to index <a href="http://www.commitstrip.com/en/2014/06/03/the-problem-is-not-the-tool-itself/">(comic strip explaining it)</a>.</p>

<!-- more -->


<p>Below is the list of the chapters in a book:</p>

<ol>
<li><strong>Anatomy of an Index</strong> doesn&rsquo;t cover SQL specifically, but it explains the fundamental structure of an index.</li>
<li><strong>The Where Clause</strong> explains all aspects of the <code>where</code> clause. This is the biggest chapter in the book and after learning the techniques provided, you will be able to write much faster SQL.</li>
<li><strong>Performance and Scalability</strong> is about performance measurements and database scalability. It will explain why adding hardware is not the best solution to slow queries.</li>
<li><strong>The Join Operation</strong> gives explanation about how to use indexes to perform a fast table join.</li>
<li><strong>Clustering Data</strong> explains how to get best performance when selecting only part of columns.</li>
<li><strong>Sorting and Grouping</strong> is about how to use indexes with <code>order by</code> and <code>group by</code>.</li>
<li><strong>Partial Results</strong> explains how to benefit from a &ldquo;pipelined&rdquo; execution if you don&rsquo;t need the full result set.</li>
<li><strong>Insert, Delete and Update</strong> deals with performance when executing write queries.</li>
</ol>


<p>The book is very well written so once you start reading it it&rsquo;s not so easy to put it down. The examples are for Oracle database, but it also covers all other databases (MySQL, MSSQL, PostgreSQL) so any differences or things to know won&rsquo;t be left out for database you&rsquo;re using.</p>

<p>I had this book for a while, but constantly prioritized something else. I was really glad I finally read it and wish I did it earlier. I don&rsquo;t think I&rsquo;m a novice when it comes to SQL (at least I knew about SQL injections, indexes, etc.), but reading this book really expanded my knowledge about improving my SQL. If you&rsquo;re working with relational databases I would suggest to read this book sooner than later. Other examples are provided in different languages (PHP, Java, etc.), so you won&rsquo;t be left in the dark thinking where to start.</p>

<p>You can buy this book from <a href="http://sql-performance-explained.com/">SQL Performance Explained website</a> or paperback from <a href="http://www.amazon.com/Performance-Explained-Everything-Developers-about/dp/3950307826">Amazon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up encrypted backup with duplicity]]></title>
    <link href="http://ifdattic.com/howto-encrypted-backup-with-duplicity"/>
    <updated>2014-06-11T09:11:39+03:00</updated>
    <id>http://ifdattic.com/how-to-set-up-encrypted-backup-with-duplicity</id>
    <content type="html"><![CDATA[<p>In the last half year or so, I started moving to the point where for example getting my laptop stolen (or I noticed a lot of people like installing liquids on their laptops) would be just a loss of money and a few hours. Rather than a complete disaster which might take a few days to recover. The first step of course was cleaning up my hard drive from all the personal photos, videos and a bunch of other stuff you constantly keep, but never really use. The great step to automating everything was using <a href="https://github.com/ifdattic/dotfiles">dotfiles</a> (or you can check original project <a href="https://github.com/mathiasbynens/dotfiles">mathiasbynens/dotfiles</a>). Not only it allows to automate how my machine behaves, but if I will have to set up a different one I won&rsquo;t miss some step for setting it up. Mostly what was left to do, was keeping some files available for any device. <em>Google Drive</em> was working great for it at first, but unfortunately the files in the drive isn&rsquo;t encrypted. It&rsquo;s fine for simple un-important files, but once you start adding more important files you start wanting a bit more security. This let to searching for a solution which will back up and encrypt my files and <a href="http://duplicity.nongnu.org">duplicity</a> looked promising.</p>

<h2>Prerequisites</h2>

<p>After reading documentation about how to use it I was getting my data encrypted and synced. Of course being a programmer I wanted to write some script to automate some of the things. It was quite fun to hack and experiment with something I haven&rsquo;t tried before, but fortunately found an already mature project which automates usage of duplicity. For those interested (or for myself in the future) here is the <a href="https://gist.github.com/ifdattic/4200774f6c6531d7aefb">initial script</a> I was making.</p>

<p>But from this point on we will be using <a href="https://github.com/zertrin/duplicity-backup">zertrin/duplicity-backup</a> bash script for automating and simplifying the working with duplicity.</p>

<p>Because, I already have it all set up on my OS X everything will be done on the <em>precise64</em> (Ubuntu) box using <a href="https://www.vagrantup.com">Vagrant</a>. If you want to test everything on virtual machine first, just check the Vagrant documentation on how to get started, it&rsquo;s only a couple of steps.</p>

<p>The biggest difference of making duplicity work on different operating systems (OS X, Centos, etc.) would be the installation of required programs.</p>

<p>Our box is missing git and pip so lets install them by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y git
</span><span class='line'>sudo apt-get install -y python-pip
</span></code></pre></td></tr></table></div></figure>


<p>To make it simpler at first we will backup to a different HDD location. Run the following commands to create the directories &amp; files to be used for tutorial:</p>

<figure class='code'><figcaption><span>Create directories & files for testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir directory-to-backup
</span><span class='line'>mkdir directory-to-backup/cache
</span><span class='line'>mkdir directory-holding-backup
</span><span class='line'>
</span><span class='line'><span class="c"># Create some files to be used for backup</span>
</span><span class='line'>touch directory-to-backup/cache/20140601 directory-to-backup/cache/20140602 directory-to-backup/cache/20140603
</span><span class='line'>touch directory-to-backup/20140601 directory-to-backup/20140602 directory-to-backup/20140603 directory-to-backup/20140604 directory-to-backup/20140605
</span></code></pre></td></tr></table></div></figure>


<p>You should have the following structure for your backup directory:</p>

<figure class='code'><figcaption><span>Structure of backup directory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>directory-to-backup/
</span><span class='line'>|-- 20140601
</span><span class='line'>|-- 20140602
</span><span class='line'>|-- 20140603
</span><span class='line'>|-- 20140604
</span><span class='line'>|-- 20140605
</span><span class='line'><span class="sb">`</span>-- cache
</span><span class='line'>    |-- 20140601
</span><span class='line'>    |-- 20140602
</span><span class='line'>    <span class="sb">`</span>-- 20140603
</span></code></pre></td></tr></table></div></figure>


<h2>Generate GPG keys for encryption</h2>

<p>To encrypt the backup you will need two (for increased security) GPG keys which will be used by duplicity. As the passphrase will be used in clear text, try to avoid re-using your personal passphrase. For this tutorial we will be using the following passphrases (for <em>production</em> use your own and keep them in the secure place): <em>I34Bs$YXvn@</em> (for signing key) and <em>P$ts&amp;#@qgD</em> (for encryption key).</p>

<p>Our Vagrant box has GPG installed, but if it&rsquo;s missing from your OS please install it first. If you&rsquo;re running this on the Vagrant you might need to give some work for your OS to generate random bytes. It can be done with the following commands:</p>

<figure class='code'><figcaption><span>Only for Vagrant box: random byte generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Install the program</span>
</span><span class='line'>sudo apt-get install -y rng-tools
</span><span class='line'>
</span><span class='line'><span class="c"># Run it</span>
</span><span class='line'>sudo rngd -r /dev/urandom
</span><span class='line'>
</span><span class='line'><span class="c"># After finishing to generate keys, kill it</span>
</span><span class='line'>sudo service rng-tools stop
</span></code></pre></td></tr></table></div></figure>


<h3>Generate signing key</h3>

<p>Generate the signing key with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --gen-key
</span></code></pre></td></tr></table></div></figure>


<p>And answer the prompts (just press enter if you want to use the default value):</p>

<figure class='code'><figcaption><span>Answer prompts with following for signing key generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Your selection?: <span class="o">(</span>1<span class="o">)</span> RSA and RSA <span class="o">(</span>default<span class="o">)</span>
</span><span class='line'>What keysize <span class="k">do </span>you want?: 2048
</span><span class='line'>Key is valid <span class="k">for</span>?: <span class="nv">0</span> <span class="o">=</span> key does not expire
</span><span class='line'>Is this correct?: y
</span><span class='line'>Real name: duplicitysign
</span><span class='line'>Email address: duplicitysign@example.com
</span><span class='line'>Comment:
</span><span class='line'>Change ... <span class="o">(</span>O<span class="o">)</span>kay/<span class="o">(</span>Q<span class="o">)</span>uit?: O
</span><span class='line'>Enter passphrase: I34Bs<span class="nv">$YXvn</span>@
</span><span class='line'>Repeat passphrase: I34Bs<span class="nv">$YXvn</span>@
</span></code></pre></td></tr></table></div></figure>


<p>If everything was done correctly you should have the signing key.</p>

<h3>Generate encryption key</h3>

<p>Do this again for generating the encryption key:</p>

<figure class='code'><figcaption><span>Answer prompts with following for encryption key generation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --gen-key
</span><span class='line'>
</span><span class='line'>Your selection?: <span class="o">(</span>1<span class="o">)</span> RSA and RSA <span class="o">(</span>default<span class="o">)</span>
</span><span class='line'>What keysize <span class="k">do </span>you want?: 2048
</span><span class='line'>Key is valid <span class="k">for</span>?: <span class="nv">0</span> <span class="o">=</span> key does not expire
</span><span class='line'>Is this correct?: y
</span><span class='line'>Real name: duplicityencrypt
</span><span class='line'>Email address: duplicityencrypt@example.com
</span><span class='line'>Comment:
</span><span class='line'>Change ... <span class="o">(</span>O<span class="o">)</span>kay/<span class="o">(</span>Q<span class="o">)</span>uit?: O
</span><span class='line'>Enter passphrase: P<span class="nv">$ts</span>&amp;#@qgD
</span><span class='line'>Repeat passphrase: P<span class="nv">$ts</span>&amp;#@qgD
</span></code></pre></td></tr></table></div></figure>


<h3>List and export GPG keys</h3>

<p>At this point you should have your signing &amp; encryption keys. You can check your keys with the following command (this includes the output which might differ for you):</p>

<figure class='code'><figcaption><span>List GPG keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --list-keys
</span><span class='line'>
</span><span class='line'>/home/vagrant/.gnupg/pubring.gpg
</span><span class='line'>--------------------------------
</span><span class='line'>pub   2048R/841BFBA2 2014-06-10
</span><span class='line'>uid                  duplicitysign &lt;duplicitysign@example.com&gt;
</span><span class='line'>sub   2048R/B5C9CA2B 2014-06-10
</span><span class='line'>
</span><span class='line'>pub   2048R/F953BE5A 2014-06-10
</span><span class='line'>uid                  duplicityencrypt &lt;duplicityencrypt@example.com&gt;
</span><span class='line'>sub   2048R/BE767308 2014-06-10
</span></code></pre></td></tr></table></div></figure>


<p>Export the public keys and save them in the secure place:</p>

<figure class='code'><figcaption><span>Export public keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># gpg --armor --export -a [gpg key id] &gt; [name]public.key</span>
</span><span class='line'>gpg --armor --export -a 841BFBA2 &gt; duplicitysignpublic.key
</span><span class='line'>gpg --armor --export -a F953BE5A &gt; duplicityencryptpublic.key
</span></code></pre></td></tr></table></div></figure>


<p>Export the private keys and save them in the secure place:</p>

<figure class='code'><figcaption><span>Export private keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># gpg --armor --export-secret-keys -a [gpg key id] &gt; [name]private.key</span>
</span><span class='line'>gpg --armor --export-secret-keys -a 841BFBA2 &gt; duplicitysignprivate.key
</span><span class='line'>gpg --armor --export-secret-keys -a F953BE5A &gt; duplicityencryptprivate.key
</span></code></pre></td></tr></table></div></figure>


<h3>Sign encryption key</h3>

<p>To sign your encryption key run the following:</p>

<figure class='code'><figcaption><span>Answer the prompts to sing your encryption key</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --sign-key duplicityencrypt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Are you sure that you want to sign this key with your
</span><span class='line'>key <span class="s2">&quot;duplicitysign &lt;duplicitysign@example.com&gt;&quot;</span> <span class="o">(</span>841BFBA2<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Really sign? <span class="o">(</span>y/N<span class="o">)</span> y
</span><span class='line'>
</span><span class='line'>Enter passphrase: I34Bs<span class="nv">$YXvn</span>@
</span></code></pre></td></tr></table></div></figure>


<h2>Install duplicity</h2>

<p>First you will need to install duplicity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y duplicity
</span></code></pre></td></tr></table></div></figure>


<p>And download the wrapper script for managing the duplicity. You could just get the script or download the project using different ways (e.g., wget), but we will use git for it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/zertrin/duplicity-backup.git
</span></code></pre></td></tr></table></div></figure>


<h2>Configure wrapper script (default configuration)</h2>

<p>The wrapper script uses a configuration file for running a backup. It allows to fine tune your backup. As you can have multiple configurations (e.g., to backup to different locations) they will be kept in the <code>duplicity-conf</code> directory (or use one of your choosing). Run the following commands to initialize your first initial config:</p>

<figure class='code'><figcaption><span>Initialize the backup configuration file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir duplicity-conf
</span><span class='line'>cp ./duplicity-backup/duplicity-backup.conf.example ./duplicity-conf/duplicity-backup.conf
</span></code></pre></td></tr></table></div></figure>


<p>The default configuration file has sensible defaults (it has a very descriptive comments if you start wondering that something does), but you need to change a few values to change how the script behaves. Just make sure the file has the following changes inside it (lines wrapped in <code>#</code> explains what and why it should have this value):</p>

<figure class='code'><figcaption><span>duplicity-backup.conf should have the following changes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Your signing key passphrase.</span>
</span><span class='line'><span class="c"># If your passphrase contains a `$` (dollar sign) make sure you</span>
</span><span class='line'><span class="c"># escape it with `\`, only need to escape in config</span>
</span><span class='line'><span class="nv">PASSPHRASE</span><span class="o">=</span><span class="s2">&quot;I34Bs\$YXvn@&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ID of GPG encryption key</span>
</span><span class='line'><span class="nv">GPG_ENC_KEY</span><span class="o">=</span><span class="s2">&quot;F953BE5A&quot;</span>
</span><span class='line'><span class="c"># ID of GPG signing key</span>
</span><span class='line'><span class="nv">GPG_SIGN_KEY</span><span class="o">=</span><span class="s2">&quot;841BFBA2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The starting directory of your backup. You might want to change it</span>
</span><span class='line'><span class="c"># to something like &quot;/Users&quot; if you&#39;re using OS X.</span>
</span><span class='line'><span class="c"># You might also want to add the directory of the user who will be</span>
</span><span class='line'><span class="c"># making backups, but it&#39;s completely up to you</span>
</span><span class='line'><span class="nv">ROOT</span><span class="o">=</span><span class="s2">&quot;/home/vagrant&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># To make it simpler we just gonna back up to a different directory</span>
</span><span class='line'><span class="c"># on the same machine.</span>
</span><span class='line'><span class="c"># Later examples for different locations will be provided and the</span>
</span><span class='line'><span class="c"># script file has examples for many different locations</span>
</span><span class='line'><span class="nv">DEST</span><span class="o">=</span><span class="s2">&quot;file:///home/vagrant/directory-holding-backup/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Currently we only want to backup one directory, you can expand</span>
</span><span class='line'><span class="c"># this list or even use a text file</span>
</span><span class='line'><span class="nv">INCLIST</span><span class="o">=(</span> <span class="s2">&quot;/home/vagrant/directory-to-backup/&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We don&#39;t want to backup OS X automatically generated files so we</span>
</span><span class='line'><span class="c"># exclude them.</span>
</span><span class='line'><span class="c"># We also don&#39;t want to backup contents of the directory, but we</span>
</span><span class='line'><span class="c"># want to backup the directory itself (as an example)</span>
</span><span class='line'><span class="nv">EXCLIST</span><span class="o">=(</span> <span class="s2">&quot;/**.DS_Store&quot;</span> <span class="se">\</span>
</span><span class='line'>          <span class="s2">&quot;/**Icon?&quot;</span> <span class="se">\</span>
</span><span class='line'>          <span class="s2">&quot;/**.AppleDouble&quot;</span> <span class="se">\</span>
</span><span class='line'>          <span class="s2">&quot;/home/vagrant/directory-to-backup/cache/*&quot;</span> <span class="se">\</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Just change to a directory where you want to keep your logs</span>
</span><span class='line'><span class="nv">LOGDIR</span><span class="o">=</span><span class="s2">&quot;/home/vagrant/logs/duplicity/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># You could leave it as a default, but I personally add additional</span>
</span><span class='line'><span class="c"># placeholder to help me differentiate between config files</span>
</span><span class='line'><span class="c"># (in this case &#39;main-&#39; was added)</span>
</span><span class='line'><span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;duplicity-main-`date +%Y-%m-%d_%H-%M`.txt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Change to who will own the log files</span>
</span><span class='line'><span class="nv">LOG_FILE_OWNER</span><span class="o">=</span><span class="s2">&quot;vagrant:vagrant&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 30 days is long enough to keep the logs, it allows to check</span>
</span><span class='line'><span class="c"># if everything is running fine, but doesn&#39;t spam you with</span>
</span><span class='line'><span class="c"># lots of files (depending on how often you will run your backup)</span>
</span><span class='line'><span class="nv">REMOVE_LOGS_OLDER_THAN</span><span class="o">=</span><span class="s1">&#39;30&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Backup</h2>

<p>Now that everything is ready you can just run your backup using the following command:</p>

<figure class='code'><figcaption><span>Run backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --backup
</span></code></pre></td></tr></table></div></figure>


<p>If you didn&rsquo;t run into any errors you should have the backup of the your whole directory. The directory containing the backup should look something like:</p>

<figure class='code'><figcaption><span>Initial directory structure which contains backup files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>directory-holding-backup/
</span><span class='line'>|-- duplicity-full.20140610T045757Z.manifest.gpg
</span><span class='line'>|-- duplicity-full.20140610T045757Z.vol1.difftar.gpg
</span><span class='line'><span class="sb">`</span>-- duplicity-full-signatures.20140610T045757Z.sigtar.gpg
</span></code></pre></td></tr></table></div></figure>


<h3>List files in backup</h3>

<p>To list the files in your current backup you can run the following command:</p>

<figure class='code'><figcaption><span>List files in backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --list-current-files
</span></code></pre></td></tr></table></div></figure>


<p>Which at the moment (if you&rsquo;re following the tutorial) should give the following output:</p>

<figure class='code'><figcaption><span>List of files in backup (if following example)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Last full backup date: Tue Jun 10 04:57:57 2014
</span><span class='line'>Tue Jun 10 04:53:56 2014 .
</span><span class='line'>Tue Jun 10 04:56:38 2014 directory-to-backup
</span><span class='line'>Tue Jun 10 04:49:32 2014 directory-to-backup/20140601
</span><span class='line'>Tue Jun 10 04:49:32 2014 directory-to-backup/20140602
</span><span class='line'>Tue Jun 10 04:49:32 2014 directory-to-backup/20140603
</span><span class='line'>Tue Jun 10 04:49:32 2014 directory-to-backup/20140604
</span><span class='line'>Tue Jun 10 04:49:32 2014 directory-to-backup/20140605
</span><span class='line'>Tue Jun 10 04:48:46 2014 directory-to-backup/cache
</span></code></pre></td></tr></table></div></figure>


<h3>Restore from backup</h3>

<p>You can run different commands to restore from your backup.</p>

<p>To restore the entire backup run the following command:</p>

<figure class='code'><figcaption><span>Restore the entire backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --restore
</span><span class='line'>
</span><span class='line'><span class="c"># /home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --restore /home/vagrant/restoredir</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will ask you for a directory where you want to restore your backup (or add it at the end of the command). The script will ask you if you really want to restore (if restore path wasn&rsquo;t provided with command, answer with <em>yes</em>) and your encryption key passphrase for decryption.</p>

<p>If everything went successfully your restore directory should look like:</p>

<figure class='code'><figcaption><span>Directory structure of restored backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>restoredir/
</span><span class='line'><span class="sb">`</span>-- directory-to-backup
</span><span class='line'>    |-- 20140601
</span><span class='line'>    |-- 20140602
</span><span class='line'>    |-- 20140603
</span><span class='line'>    |-- 20140604
</span><span class='line'>    |-- 20140605
</span><span class='line'>    <span class="sb">`</span>-- cache
</span></code></pre></td></tr></table></div></figure>


<p>You can also restore only a file or a directory. To restore a file in the current directory (provide a path at the end of command if you want to restore to a different directory) run the following command:</p>

<figure class='code'><figcaption><span>Restore a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --restore-file directory-to-backup/20140603 restored-file
</span></code></pre></td></tr></table></div></figure>


<p>Which will ask you if you really want to restore and for your encryption key passphrase.</p>

<h2>Backup to Amazon S3</h2>

<p>Amazon S3 allows you to store and retrieve any amount of data, at any time, from anywhere on the web. Duplicity allows you to backup to S3. This section will take you through steps how to safely do it.</p>

<p>Because you don&rsquo;t want to have the credentials to your whole AWS account kept in plain text (at least I don&rsquo;t), you need to create an IAM user. If you never did it before here is the <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_SettingUpUser.html">tutorial on how to create an IAM user</a>. Just name it any way you want (e.g., duplicity-backup) and make note of the generated Access &amp; Secret keys as you will need them soon.</p>

<p>For security reasons you probably don&rsquo;t want this user to have the full control of your AWS account (IAM best practices suggests to give lowest permissions and add only the required permissions) you will want to attach the following policy to the user (<a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingPolicies.html">tutorial on how to attach IAM policy</a>).</p>

<p>This policy will only allow a user to work with a bucket used for backups and all the files in it. Also the user requires to have a permission to list all the buckets as otherwise you won&rsquo;t be able to do anything with your backup bucket (don&rsquo;t worry, he won&rsquo;t have any permissions on any other buckets). Just replace <code>duplicity-backup-article</code> with the name of the bucket you will be using for backups. Name the policy any way you want (e.g., <code>fullOnDuplicityBackupBucket</code>).</p>

<figure class='code'><figcaption><span>IAM policy to only allow actions on backup bucket</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;s3:*&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::duplicity-backup-article&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::duplicity-backup-article/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="s2">&quot;s3:ListAllMyBuckets&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="s2">&quot;arn:aws:s3:::*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now copy the default configuration file we use for backup:</p>

<figure class='code'><figcaption><span>Create duplicity config file for S3 backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp duplicity-conf/duplicity-backup.conf duplicity-conf/duplicity-backup-s3.conf
</span></code></pre></td></tr></table></div></figure>


<p>And make the following changes to the newly created config file:</p>

<figure class='code'><figcaption><span>duplicity-backup-s3.conf should have the following changes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Just enter the values you received then you created duplicity IAM user</span>
</span><span class='line'><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="s2">&quot;Enter Access key provided after creating IAM user&quot;</span>
</span><span class='line'><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="s2">&quot;Enter Secret key provided after creating IAM user&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Replace the file destination with the following destination</span>
</span><span class='line'><span class="c"># providing the bucket used for backup</span>
</span><span class='line'><span class="c"># The folder &#39;s3&#39; in this example can be anything, but I use it</span>
</span><span class='line'><span class="c"># to tell me which configuration is used</span>
</span><span class='line'><span class="nv">DEST</span><span class="o">=</span><span class="s2">&quot;s3+http://duplicity-backup-article/s3&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># If you live in Europe you might want to add &#39;--s3-european-buckets&#39; option</span>
</span><span class='line'><span class="c">#STATIC_OPTIONS=&quot;--full-if-older-than 14D --s3-use-new-style --s3-european-buckets&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># To help distinguish it between other backup logs</span>
</span><span class='line'><span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;duplicity-s3-`date +%Y-%m-%d_%H-%M`.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also need to install <a href="https://github.com/boto/boto#installation">boto</a> for this to work. Just use the installation method you&rsquo;re most comfortable with:</p>

<figure class='code'><figcaption><span>Multiple methods for installing boto</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python-boto
</span><span class='line'>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>
</span><span class='line'>pip install boto
</span><span class='line'>
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>
</span><span class='line'>git clone git://github.com/boto/boto.git
</span><span class='line'><span class="nb">cd </span>boto
</span><span class='line'>python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>Run the following command to back up to S3:</p>

<figure class='code'><figcaption><span>Run backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup-s3.conf --backup
</span></code></pre></td></tr></table></div></figure>


<p>If you did everything correctly your backup bucket on S3 should contain the encrypted backup.</p>

<h2>Backup to Google Drive</h2>

<p>If you have a Google account then you might have some free space in your Google Drive which could be used for keeping your backups.</p>

<p>Start by copying the default configuration file we use for backup:</p>

<figure class='code'><figcaption><span>Create duplicity config file for Google Drive backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp duplicity-conf/duplicity-backup.conf duplicity-conf/duplicity-backup-google.conf
</span></code></pre></td></tr></table></div></figure>


<p>And make the following changes to the newly created config file:</p>

<figure class='code'><figcaption><span>duplicity-backup-google.conf should have the following changes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Just replace &#39;GOOGLEACCOUNT&#39; with your Google email (doesn&#39;t matter if</span>
</span><span class='line'><span class="c"># it&#39;s @gmail or Google Apps based)</span>
</span><span class='line'><span class="c"># You can use any folder(s) you like for keeping your backup</span>
</span><span class='line'><span class="nv">DEST</span><span class="o">=</span><span class="s2">&quot;gdocs://GOOGLEACCOUNT/duplicity-backup/google&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Enter your Google account password</span>
</span><span class='line'><span class="c"># If you use 2-step authentication you will need to generate</span>
</span><span class='line'><span class="c"># an application specific password</span>
</span><span class='line'><span class="nv">FTP_PASSWORD</span><span class="o">=</span><span class="s2">&quot;Enter your Google password&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># To help distinguish it between other backup logs</span>
</span><span class='line'><span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;duplicity-google-`date +%Y-%m-%d_%H-%M`.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also need to install <a href="https://developers.google.com/gdata/articles/python_client_lib">Google Data Python Library</a> for this to work. Just use the installation method you&rsquo;re most comfortable with, for example:</p>

<figure class='code'><figcaption><span>Install Google Data Python Library</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pip install gdata
</span></code></pre></td></tr></table></div></figure>


<p>Run the following command to back up to Google Drive:</p>

<figure class='code'><figcaption><span>Run backup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup-google.conf --backup
</span></code></pre></td></tr></table></div></figure>


<p>Due to API changes, running this on Vagrant virtual machine was throwing an error. To fix it you should update duplicity to the latest version.</p>

<p>The only problem I have with using Google Drive for backup is what the password has no fine tunning for permissions (like you have IAM policies in S3) and I just don&rsquo;t like the idea of keeping a password in plain text which allows full access to my Google account. So I chose to use S3 for backup destination.</p>

<p>If I start disliking S3 for backup destination, I will probably try using Google Drive again. But only this time I will set up a simple file destination to the Google Drive folder on my machine and let the Google Drive application do the syncing. However I haven&rsquo;t tried this yet.</p>

<h2>Run backup automatically with Cron</h2>

<p>Even though duplicity helps a lot with encryption and backup, you won&rsquo;t get a lot of use from it if you just gonna forget to run a backup (an believe me sooner or later you will forget to run it). This is why you need to automate your backups (or automate everything you can once you start going a bit crazy).</p>

<p>You can choose how often to run the backup, but currently I&rsquo;m using <em>every 15 minutes</em>. This looks like a great balance between having your files backed up, but not constantly using resources for it.</p>

<p>First you should check if your <code>crontab</code> contains any existing values as you wouldn&rsquo;t want to remove them:</p>

<figure class='code'><figcaption><span>Check your crontab list</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crontab -l
</span></code></pre></td></tr></table></div></figure>


<p>If you will get something like &ldquo;<em>no crontab for [username]</em>&rdquo; you&rsquo;re good to go. Otherwise just add existing values to your crontab file. First create a file (name doesn&rsquo;t matter but we will name it <code>crontab.sh</code>) which will have the following contents:</p>

<figure class='code'><figcaption><span>Contents of crontab.sh file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>*/15 * * * * /home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --backup &gt; /dev/null 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<p>Just make sure you have an empty line at the end, as you will get errors otherwise. After you done it just update your crontab by running:</p>

<figure class='code'><figcaption><span>Update crontab jobs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crontab crontab.sh
</span></code></pre></td></tr></table></div></figure>


<p>If everything was done correctly you should be getting backups every 15 minutes. You can check logs from time to time to make sure everything is running correctly (I&rsquo;m just paranoid).</p>

<p>If you&rsquo;re having problems with cron backup, but it&rsquo;s working when you run command manually, you might have the problem with your <code>PATH</code> variable. I had this problem when I was setting it up on OS X (it would depend on where you install programs), but on the Vagrant virtual machine it was working fine. The fix to it is to update your <code>PATH</code> variable with additional required directories, so for example if you need to add <code>/home/vagrant/custom/bin</code> to your <code>PATH</code> add the following line (after a first line) to your duplicity configuration file:</p>

<figure class='code'><figcaption><span>Add as a second line to a config file if needed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/home/vagrant/custom/bin:$PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Update on 2014-12-21:</strong> After getting paranoid during my trip I did some checking of the logs and learned that duplicity wasn&rsquo;t backing up as supposed due to an existing lock file. I would guess this might happen if you put your laptop to sleep during the back up (or something along those lines).</p>

<p>To fix that, I just added additional command to crontab to remove old files from logs directory (this is where lock file is saved). Modify it to your needs.</p>

<figure class='code'><figcaption><span>Remove old log and lock files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>23 15 * * * find /home/vagrant/logs/duplicity -mtime +2 -type f -delete
</span></code></pre></td></tr></table></div></figure>


<h2>Extras &amp; Troubleshooting</h2>

<h3>Backup duplicity configuration file and GPG keys</h3>

<p>You might want to export your duplicity configuration file with GPG keys for safekeeping. duplicity wrapper script allows you to easily do it. Just run the command bellow to export it as an encrypted tarfile in the current directory:</p>

<figure class='code'><figcaption><span>Run to backup GPG keys & configuration file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/home/vagrant/duplicity-backup/duplicity-backup.sh --config /home/vagrant/duplicity-conf/duplicity-backup.conf --backup-script
</span></code></pre></td></tr></table></div></figure>


<p>It will show you the information of what will be backed up and ask you if you want to continue. If you answer with <em>yes</em> it will ask for a password which will protect the archive (it&rsquo;s not asking for GPG passphrase, just for a different password used to encrypt the archive). If everything went fine it should output something like:</p>

<figure class='code'><figcaption><span>Output of running &#8211;backup-script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg -d duplicity-backup-2014-06-10.tar.gpg | tar x
</span></code></pre></td></tr></table></div></figure>


<p>This is the command you will have to run if you want to decrypt your configuration and GPG keys. You should also probably keep this archive and a password someplace safe, but it&rsquo;s completely up to you.</p>

<h3>OS X open files error</h3>

<p>On OS X you might get the error &ldquo;<code>Too many open files in system</code>&rdquo; after which the backup stops. To take care of it just create an <code>/etc/launchd.conf</code> file with contents provided below. You might need to restart your OS. If you want to find more about it read the following <a href="http://superuser.com/a/443168/298391">superuser answer</a>.</p>

<figure class='code'><figcaption><span>Contents of launchd.conf file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>limit maxfiles 1000000 1000000
</span></code></pre></td></tr></table></div></figure>


<h3>Usage examples</h3>

<p>If you want more duplicity wrapper usage examples read the <a href="https://github.com/zertrin/duplicity-backup#usage-examples">wrapper project documentation</a>.</p>

<h2>Conclusion</h2>

<p>By now you should have automatic encrypted backups running on your OS. You can finally enjoy the cup of tea, and if you will accidentally spill it on your machine, it is no big deal as you have all your data safely tucked away.</p>

<p>Do you have any suggestions on how to automate your machine?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Achievement unlocked: Put out trash can fire]]></title>
    <link href="http://ifdattic.com/achievement-unlocked-put-out-trash-can-fire"/>
    <updated>2014-05-26T21:41:36+03:00</updated>
    <id>http://ifdattic.com/achievement-unlocked-put-out-trash-can-fire</id>
    <content type="html"><![CDATA[<p>Today I did something I wanted to do for the long time, but chickened out before.</p>

<p><strong>I put out the trash can fire.</strong></p>

<p>Before I walked past a few trash can fires. Always wanted to put one out. Always was attacked by some stupid fear and just walked away. This time it looked like it will be the same scenario.</p>

<p>Then I looked around at other people who walked past, or sitting like they don&rsquo;t see it. &ldquo;<em>Hey, maybe they don&rsquo;t have the equipment for putting it out?</em>&rdquo; Fine, but the outside bar is like a meter away, waiters could definitely find a cup of water somewhere. &ldquo;<em>Maybe they don&rsquo;t care, after all the smoke is going in the different direction than the customers are sitting.</em>&rdquo;</p>

<p>At this point I decided, I don&rsquo;t want to be like everyone at this place and moment. I can be better, even if it&rsquo;s something as stupid as putting out a fire in progress.</p>

<p>I changed direction determined to take care of the problem or die trying (overdramatization). It might have cost me my bottle of drinking water, but it felt good. I felt proud of myself for winning against some stupid fear and doing something that felt right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Scare Your Customers Away]]></title>
    <link href="http://ifdattic.com/how-to-scare-your-customers-away"/>
    <updated>2014-04-06T18:38:16+03:00</updated>
    <id>http://ifdattic.com/how-to-scare-your-customers-away</id>
    <content type="html"><![CDATA[<p>A while ago after quitting my job I decided it would be a great time to update all the passwords I use (hey my paranoia can sometimes get paranoid). It&rsquo;s no easy task, but you got to do what you got to do. So one Saturday I sit down armed with a bucket of tea (I&rsquo;m joking, it was only half a bucket) ready to change credentials for all my accounts. When you do a task like that you begin to notice that a lot of websites have made some choices that can really get on your nerves (personally, your experience might differ). At the end of the day my password manager had a lot less accounts to remember. I started to compile a list of that should be avoided unless you want to risk losing customers (again, this is personal preference). Through the series of articles I will try to provide every item from that list (order is of no particular importance).</p>

<h2>Password max length at 16 characters</h2>

<p>I promise if I go back in time a couple of decades, I would even use a password with the value of <em>&ldquo;password&rdquo;</em> and just throw a number at the end to make it impossible to brute force. But we live now at 201something, I think <strong>&ldquo;don&rsquo;t limit password length&rdquo;</strong> should be old news by now (but knowing situation about SQL injection I shouldn&rsquo;t get my hopes up). I&rsquo;m not saying you can&rsquo;t limit it, but choose some better limit (60 or so). Some people use password managers so they don&rsquo;t even know that is their 40 characters long random password (until you are cursed to type it on your mobile). I might don&rsquo;t pay attention to this if it was in some site on which I created an account for hell knows what reason, but most often you see this in online banks and financial services. I would at least like 20 characters before someone gets the hand on my money. Or worst case scenario, just don&rsquo;t show the error about max length restriction, I will be much happier believing my accounts are secure.</p>

<h2>Send my password to email</h2>

<p>You should know the scenario: finding some useful service, creating an account, checking an email for confirmation email. And in one of them finding something similar to: <em>&ldquo;Your password is <strong>plain-text-password-you-used</strong>&rdquo;</em>. Why? Why would you do this? Not only now I have to delete this email, but also I will have to go to trash and permanently delete it. You start to inconvenience me (your customer) and this is not a good idea. As an added bonus, I start thinking that you&rsquo;re saving passwords as plain text. This also happens when changing your password. And, <em>(Insert a name of higher entity)</em> forgive, you send the password I used after submitting <em>Forgot Password</em> form.</p>

<h2>Send an email to all customers that they new password is &ldquo;test&rdquo;</h2>

<p>(facepalm). One more time. (doublefacepalm). If you don&rsquo;t find anything wrong with this one, then&hellip; I don&rsquo;t know what.. see no future/salvation for humanity, or something like what&hellip; You probably want a story about this one? One summer morning I sit down to check my emails. I take care of them one by one while sipping my enormous cup of tea. Then I reach one with subject similar to &ldquo;We updated our shop!!!&rdquo;. My professional curiosity rises a bit trying to think about that changes they might have done. So I open it and start reading it. At first it is general text and pleasantries. Until I reach a bottom of email where black on white <em>&ldquo;We had to change passwords for all accounts and you can log in to your new account using &lsquo;test&rsquo;&rdquo;</em>. <strong>WTF?!!!</strong> <em>You have just received a critical facepalm, please insert a token to continue.</em> Programmers are born in WTF moments, they embrace those moments, they take strength from these moments.. But really, WTF??? The chance of only me getting that password is &ndash; impossible, and even then, WTF? So, just like a good puppy&hellip; I mean programmer, how about trying to debug that happened.</p>

<p>Business is going well, so you decide to start using something new and more powerfull. All good so far. You import or re-type user accounts from old system to a new system and because you didn&rsquo;t do so bad on your old e-shop you don&rsquo;t know the passwords of your users. Nods of approvement continue. So then you change a password of your account to &ldquo;test&rdquo;, run a SQL query on all the rows to update them to the same value and then send an email to everyone that their new password is &ldquo;test&rdquo;. This is where people like me start raising their eyebrow(s) and embracing WTF moments. I think I made my point clear to everyone, but just in case, imagine me making growling sounds for a bit.</p>

<h2>Conclusion</h2>

<p>This should be enough for this article in the series. Did you run into any of the described issues? What was your reaction?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Yii Extension by Example - EPrism]]></title>
    <link href="http://ifdattic.com/create-yii-extension-by-example-eprism"/>
    <updated>2014-03-05T21:46:37+02:00</updated>
    <id>http://ifdattic.com/create-yii-extension-by-example-eprism</id>
    <content type="html"><![CDATA[<p>This is the tutorial about how to make a simple <a href="http://www.yiiframework.com/">Yii</a> extension. It would be most useful to people who are just starting with Yii framework. The tutorial is step-by-step guide using an <a href="http://www.yiiframework.com/extension/eprism">EPrism</a> extension as a base. This would be really helpful if for example you found a nice JavaScript plugin and want to use it as a part of framework rather than just adding it statically in your application.</p>

<h2>1. Set up</h2>

<p>Everything needs to start from something, so do the following steps to have a base on which you can build your extension:</p>

<ul>
<li>Create a folder <code>EPrism</code> for extension</li>
<li>Create an extension file name <code>EPrism.php</code> inside the folder</li>
<li>Create a class <code>EPrism</code> which extends a framework class of <code>CWidget</code> in the <code>EPrism.php</code> file</li>
<li>Add <code>init()</code> and <code>run()</code> methods</li>
</ul>


<p><a href="http://www.yiiframework.com/doc/api/1.1/CWidget/"><code>CWidget</code> class</a> is a base class for widgets. You can think of a widget as a self-contained component that may generate presentation based on model data.</p>

<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CWidget#init-detail"><code>init()</code> method</a> initializes the widget.</p>

<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CWidget#run-detail"><code>run()</code> method</a> executes the widget.</p>

<h4>Step results</h4>

<p>By now your folder structure should be:</p>

<figure class='code'><figcaption><span>Folder structure after first step</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>EPrism/
</span><span class='line'>└── EPrism.php
</span></code></pre></td></tr></table></div></figure>


<p>The contents of <code>EPrism.php</code> file should be:</p>

<figure class='code'><figcaption><span>Extension contents after first step</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">EPrism</span> <span class="k">extends</span> <span class="nx">CWidget</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Add extension assets</h2>

<p>To be able to use the extension <em>out of the box</em>, you need to add the assets for it. Start by creating a folder <code>assets</code> which will contain the extension assets.</p>

<p>Now go to the <a href="http://prismjs.com/download.html">Prism download page</a>, generate the wanted configuration, and download provided code. Save JavaScript code as <code>prism.js</code> in <code>assets</code> folder, and CSS code as <code>prism.css</code> in the same folder.</p>

<p>To use the downloaded assets you will need to add the code to <code>run()</code> method.</p>

<p>First you want to <a href="http://www.yiiframework.com/doc/api/1.1/CAssetManager/#publish-detail">publish your assets</a> to a web accessible directory:</p>

<figure class='code'><figcaption><span>Publish assets to a web accessible directory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$assets</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getAssetManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">publish</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/assets&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also get <em>ClientScript</em> component to help you with registering your assets:</p>

<figure class='code'><figcaption><span>Get & assign ClientScript component to a variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cs</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getClientScript</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because <em>Prism</em> only needs the asset files added to page for it to run, all that is left is to register the assets:</p>

<figure class='code'><figcaption><span>Register assets to the page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerCssFile</span><span class="p">(</span><span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.css&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span><span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerCssFile-detail"><code>registerCssFile()</code></a> and <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerScriptFile-detail"><code>registerScriptFile()</code></a> adds the CSS and JavaScript files to the rendered page. If you needed to run some JavaScript code to run the plugin then you will need to add a call to <a href="http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerScript-detail"><code>registerScript()</code></a> method which will add your JavaScript code to the page.</p>

<p>And this is it. You only need this much code to create a simple Yii extension. But of course it can be improved so continue reading if you want to get some ideas how to improve your extensions after having the minimal needed code.</p>

<h4>Step results</h4>

<p>By now your folder structure should be:</p>

<figure class='code'><figcaption><span>Folder structure after second step (minimal working extension)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>EPrism/
</span><span class='line'>├── EPrism.php
</span><span class='line'>└── assets
</span><span class='line'>    ├── prism.css
</span><span class='line'>    └── prism.js
</span></code></pre></td></tr></table></div></figure>


<p>The contents of <code>EPrism.php</code> file should be:</p>

<figure class='code'><figcaption><span>Extension contents after second step (minimal working extension)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">EPrism</span> <span class="k">extends</span> <span class="nx">CWidget</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$assets</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getAssetManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">publish</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/assets&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$cs</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getClientScript</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerCssFile</span><span class="p">(</span><span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.css&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span><span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Add customizations for script</h2>

<p>The extension currently does what it&rsquo;s supposed to do, but how about adding a couple of customizations like allowing to change the position of where script is inserted and disabling automatic highlighting.</p>

<h3>Change script position</h3>

<p>First add the class variable which will tell where JavaScript files should be inserted:</p>

<figure class='code'><figcaption><span>Add variable to hold script position</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="nv">$scriptPosition</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add the following code at the start of <code>init()</code> method:</p>

<figure class='code'><figcaption><span>Set to default position if none provided</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">clientScript</span><span class="o">-&gt;</span><span class="na">defaultScriptFilePosition</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will make sure that if you don&rsquo;t set a custom script position for the extension, the default position for all script files will be used.</p>

<p>To finish it off just set the position then registering script file in <code>run()</code> method:</p>

<figure class='code'><figcaption><span>Set the position of script through second parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span><span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if for example you need to have some script loaded in the <code>&lt;head&gt;</code> element while your application is configured to add all scripts before closing <code>&lt;body&gt;</code> it is very simple to do in a widget configuration.</p>

<h3>Disable automatic highlighting</h3>

<p><em>Prism</em> automatically highlights the code in your page, but you can turn it off by adding <code>data-manual</code> attribute to the <code>&lt;script&gt;</code> element which loads the plugin.</p>

<p>You will need to add two variables, one for holding all the options for script and another as a flag for manual highlighting:</p>

<figure class='code'><figcaption><span>Add variables to allow script customization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">private</span> <span class="nv">$scriptOptions</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="nv">$manualHighlight</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$scriptOptions</code> variable is private because you don&rsquo;t want anyone changing it (the widget will populate it with needed values). To make sure it happens add the following code in the <code>init()</code> method before returning parent method:</p>

<figure class='code'><figcaption><span>Populate script options from public variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">manualHighlight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptOptions</span><span class="p">[</span><span class="s1">&#39;data-manual&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then add options then registering your script file:</p>

<figure class='code'><figcaption><span>Customize registered script with 3rd parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptOptions</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can disable the automatic highlighting when you call the widget just by setting <code>manualHighlight</code> attribute to <code>true</code>.</p>

<h3>Allow to use custom asset files</h3>

<p>To make extension re-usable and easy to use we added the JavaScript and CSS assets to it, but in some cases you might not want to use them. Maybe you only need to use a small portion of highlighter or maybe you have all the needed code in another file. To take care of those cases lets make asset files configurable using the following rules:</p>

<ul>
<li>If value is <code>false</code> don&rsquo;t register asset</li>
<li>If value is <code>null</code> register default asset</li>
<li>If value is <code>string</code> register the provided value</li>
</ul>


<p>To allow for this configuration first add the following class variables:</p>

<figure class='code'><figcaption><span>Add variables for asset files customization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="nv">$cssFile</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="nv">$scriptFile</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then change the asset registration lines with extended logic:</p>

<figure class='code'><figcaption><span>Extend the asset registration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerCssFile</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">:</span> <span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.css&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">:</span> <span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptOptions</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple change allows you to be much more flexible with widget usage.</p>

<h4>Step results</h4>

<p>You folder structure hasn&rsquo;t changed so it will be the same as before.</p>

<p>The contents of <code>EPrism.php</code> file should be:</p>

<figure class='code'><figcaption><span>Extension contents with all improvements</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">EPrism</span> <span class="k">extends</span> <span class="nx">CWidget</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$scriptOptions</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$manualHighlight</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$scriptPosition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$cssFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$scriptFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">clientScript</span><span class="o">-&gt;</span><span class="na">defaultScriptFilePosition</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">manualHighlight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptOptions</span><span class="p">[</span><span class="s1">&#39;data-manual&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$assets</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getAssetManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">publish</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/assets&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$cs</span> <span class="o">=</span> <span class="nx">Yii</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getClientScript</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerCssFile</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cssFile</span> <span class="o">:</span> <span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.css&#39;</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$cs</span><span class="o">-&gt;</span><span class="na">registerScriptFile</span><span class="p">(</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptFile</span> <span class="o">:</span> <span class="nv">$assets</span> <span class="o">.</span> <span class="s1">&#39;/prism.js&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptPosition</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">scriptOptions</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bonus points: Sharing is caring</h2>

<p>At this point you have a working, customizable extension which will kick ass in your project. But how about sharing it with your fellow programmers?</p>

<p>Simply add <strong>readme</strong> explaining how to use your extension and some comments in the code explaining what is what. Even if you&rsquo;re not going to share the extension with others, you will thank yourself later when the time comes to improve it. Include the <code>composer.json</code> file to make it possible to use your extension through <a href="https://getcomposer.org/">Composer</a> and just share it on <a href="https://github.com/">GitHub</a> or somewhere else for everyone to enjoy.</p>

<h2>Conclussion</h2>

<p>Now you can relax and take a well deserved cup of tea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EPrism Extension]]></title>
    <link href="http://ifdattic.com/eprism-extension"/>
    <updated>2014-01-02T16:44:58+02:00</updated>
    <id>http://ifdattic.com/eprism-extension</id>
    <content type="html"><![CDATA[<p>EPrism is an extension for Yii framework.</p>

<p>This extension is a wrapper for <a href="http://prismjs.com">Prism</a> by <a href="http://lea.verou.me">Lea Verou</a> (I only wrote the extension, not the syntax highlighter). <em>Prism</em> is a lightweight, extensible syntax highlighter, built with modern web standards in mind. This extension adds this great syntax highlighter using a <code>widget()</code> method.</p>

<!-- more -->


<h2>Features</h2>

<p>Here&rsquo;s some of the features provided by extension:</p>

<ul>
<li>easy to install and use;</li>
<li>simple configuration to better suit your needs;</li>
<li>adds a great JavaScript syntax highlighter.</li>
</ul>


<p>You can find more information and source code at <a href="https://github.com/ifdattic/EPrism">GitHub repository</a> or <a href="http://www.yiiframework.com/extension/eprism">Yii Framework website</a>.</p>
]]></content>
  </entry>
  
</feed>
